var documenterSearchIndex = {"docs":
[{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/blocks.html#Blocks","page":"Blocks","title":"Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are the basic building blocks of a quantum circuit in Yao. It simply means a quantum operator, thus, all the blocks have matrices in principal and one can get its matrix by mat. The basic blocks required to build an arbitrary quantum circuit is defined in the component package YaoBlocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Block Tree serves as an intermediate representation for Yao to analysis, optimize the circuit, then it will be lowered to instructions like for simulations, blocks will be lowered to instruct! calls.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The structure of blocks is the same with a small type system, it consists of two basic kinds of blocks: CompositeBlock (like composite types), and PrimitiveBlock (like primitive types). By combining these two kinds of blocks together, we'll be able to construct a quantum circuit and represent it in a tree data structure.","category":"page"},{"location":"man/blocks.html#Primitive-Blocks","page":"Blocks","title":"Primitive Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are subtypes of PrimitiveBlock, they are the leaf nodes in a block tree, thus primitive types do not have subtypes.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following primitive blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t ->(t isa Type && t <: YaoBlocks.PrimitiveBlock)","category":"page"},{"location":"man/blocks.html#YaoBlocks.GeneralMatrixBlock","page":"Blocks","title":"YaoBlocks.GeneralMatrixBlock","text":"GeneralMatrixBlock{D, MT} <: PrimitiveBlock{D}\nGeneralMatrixBlock{D}(m, n, A, tag=\"matblock(...)\")\nGeneralMatrixBlock(A; nlevel=2, tag=\"matblock(...)\")\n\nGeneral matrix gate wraps a matrix operator to quantum gates. This is the most general form of a quantum gate.\n\nArguments\n\nm and n are the number of dits in row and column.\nA is a matrix.\ntag is the printed information.\nD and nlevel are the number of levels in each qudit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.IdentityGate","page":"Blocks","title":"YaoBlocks.IdentityGate","text":"IdentityGate{D} <: TrivialGate{D}\n\nThe identity gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure{D,K, OT, LT, PT, RNG} <: PrimitiveBlock{D}\nMeasure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=1:n, resetto=nothing, remove=false, nlevel=2)\n\nMeasure operator, currently only qudits are supported.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure-Union{Tuple{Int64}, Tuple{RNG}, Tuple{OT}} where {OT, RNG}","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=AllLocs(), resetto=nothing, remove=false)\n\nCreate a Measure block with number of qudits n.\n\nExamples\n\nYou can create a Measure block on given basis (default is the computational basis).\n\njulia> Measure(4)\nMeasure(4)\n\nOr you could specify which qudits you are going to measure\n\njulia> Measure(4; locs=1:3)\nMeasure(4;locs=(1, 2, 3))\n\nby default this will collapse the current register to measure results.\n\njulia> r = normalize!(arrayreg(bit\"000\") + arrayreg(bit\"111\"))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.7071067811865475 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n 0.7071067811865475 + 0.0im\n\njulia> r |> Measure(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n\nBut you can also specify the target bit configuration you want to collapse to with keyword resetto.\n\n```jldoctest; setup=:(using Yao) julia> m = Measure(4; resetto=bit\"0101\") Measure(4;postprocess=ResetTo{BitStr{4,Int64}}(0101 ₍₂₎))\n\njulia> m.postprocess ResetTo{BitStr{4,Int64}}(0101 ₍₂₎)```\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.PhaseGate","page":"Blocks","title":"YaoBlocks.PhaseGate","text":"PhaseGate\n\nGlobal phase gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RotationGate","page":"Blocks","title":"YaoBlocks.RotationGate","text":"RotationGate{D,T,GT<:AbstractBlock{D}} <: PrimitiveBlock{D}\n\nRotationGate, with GT both hermitian and isreflexive.\n\nDefinition\n\nExpression rot(G, θ) defines the following gate\n\ncos fractheta2I - i sin fractheta2 G\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ShiftGate","page":"Blocks","title":"YaoBlocks.ShiftGate","text":"ShiftGate <: PrimitiveBlock\n\nPhase shift gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.TimeEvolution","page":"Blocks","title":"YaoBlocks.TimeEvolution","text":"TimeEvolution{D, TT, GT} <: PrimitiveBlock{D}\n\nTimeEvolution, where GT is block type. input matrix should be hermitian.\n\nnote: Note\nTimeEvolution contructor check hermicity of the input block by default, but sometimes it can be slow. Turn off the check manually by specifying optional parameter check_hermicity = false.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Composite-Blocks","page":"Blocks","title":"Composite Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Composite blocks are subtypes of CompositeBlock, they are the composition of blocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following composite blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t -> t isa Type && t <: YaoBlocks.CompositeBlock","category":"page"},{"location":"man/blocks.html#YaoBlocks.AbstractAdd","page":"Blocks","title":"YaoBlocks.AbstractAdd","text":"AbstractAdd{D} <: CompositeBlock{D}\n\nThe abstract add interface, aimed to support Hamiltonian types.\n\nRequired Interfaces\n\nchsubblocks\nsubblocks\n\nProvides\n\nunsafe_apply! and its backward\nmat and its backward\nadjoint\noccupied_locs\ngetindex over dit strings\nishermitian\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Add","page":"Blocks","title":"YaoBlocks.Add","text":"Add{D} <: AbstractAdd{D}\nAdd(blocks::AbstractBlock...) -> Add\n\nType for block addition.\n\njulia> X + X\nnqubits: 1\n+\n├─ X\n└─ X\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.CachedBlock","page":"Blocks","title":"YaoBlocks.CachedBlock","text":"CachedBlock{ST, BT, D} <: TagBlock{BT, D}\n\nA label type that tags an instance of type BT. It forwards every methods of the block it contains, except mat and apply!, it will cache the matrix form whenever the program has.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ChainBlock","page":"Blocks","title":"YaoBlocks.ChainBlock","text":"ChainBlock{D} <: CompositeBlock{D}\n\nChainBlock is a basic construct tool to create user defined blocks horizontically. It is a Vector like composite type.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered{BT, D} <: TagBlock{BT,D}\n\nWrapper block allowing to execute the inverse of a block of quantum circuit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered-Union{Tuple{BT}, Tuple{D}} where {D, BT<:AbstractBlock{D}}","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered(block)\n\nCreate a Daggered block. Let G be a input block, G' or Daggered(block) in code represents G^dagger.\n\nExamples\n\nThe inverse QFT is not hermitian, thus it will be tagged with a Daggered block.\n\njulia> A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))));\n\njulia> B(n, i) = chain(n, i==j ? put(i=>H) : A(j, i) for j in i:n);\n\njulia> qft(n) = chain(B(n, i) for i in 1:n);\n\njulia> struct QFT <: PrimitiveBlock{2} n::Int end\n\njulia> YaoBlocks.nqudits(q::QFT) = q.n\n\n\njulia> circuit(q::QFT) = qft(nqubits(q));\n\njulia> YaoBlocks.mat(x::QFT) = mat(circuit(x));\n\njulia> QFT(2)'\n [†]QFT\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.KronBlock","page":"Blocks","title":"YaoBlocks.KronBlock","text":"KronBlock{D,M,MT<:NTuple{M,Any}} <: CompositeBlock{D}\n\ncomposite block that combine blocks by kronecker product.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.PutBlock","page":"Blocks","title":"YaoBlocks.PutBlock","text":"PutBlock{D,C,GT<:AbstractBlock} <: AbstractContainer{GT,D}\n\nType for putting a block at given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RepeatedBlock","page":"Blocks","title":"YaoBlocks.RepeatedBlock","text":"RepeatedBlock{D,C,GT<:AbstractBlock} <: AbstractContainer{GT,D}\n\nRepeat the same block on given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Scale","page":"Blocks","title":"YaoBlocks.Scale","text":"Scale{S <: Union{Number, Val}, D, BT <: AbstractBlock{D}} <: TagBlock{BT, D}\nScale(factor, block)\n\nMultiply a block with a scalar factor, which can be a number or a Val. If the factor is a number, it is regarded as a parameter that can be changed dynamically. If the factor is a Val, it is regarded as a constant.\n\nExamples\n\njulia> 2 * X\n[scale: 2] X\n\njulia> im * Z\n[+im] Z\n\njulia> -im * Z\n[-im] Z\n\njulia> -Z\n[-] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Subroutine","page":"Blocks","title":"YaoBlocks.Subroutine","text":"Subroutine{D, BT <: AbstractBlock, C} <: AbstractContainer{BT, D}\n\nSubroutine node on given locations. This allows you to shoehorn a smaller circuit to a larger one.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.UnitaryChannel","page":"Blocks","title":"YaoBlocks.UnitaryChannel","text":"UnitaryChannel{D, W<:AbstractVector} <: CompositeBlock{D}\nUnitaryChannel(operators, probs)\n\nCreate a unitary channel, where probs is a real vector that sum up to 1.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Error-and-Exceptions","page":"Blocks","title":"Error and Exceptions","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nPages = [\"error.jl\"]","category":"page"},{"location":"man/blocks.html#YaoBlocks.islocs_conflict-Tuple{Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Blocks","title":"YaoBlocks.islocs_conflict","text":"islocs_conflict(locs) -> Bool\n\nCheck if the input locations has conflicts.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.islocs_inbounds-Tuple{Int64, Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Blocks","title":"YaoBlocks.islocs_inbounds","text":"islocs_inbounds(n, locs) -> Bool\n\nCheck if the input locations are inside given bounds n.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.@assert_locs_inbounds-Tuple{Any, Any, Vararg{Any}}","page":"Blocks","title":"YaoBlocks.@assert_locs_inbounds","text":"@assert_locs_inbounds <number of total qudits> <locations list> [<msg>]\n\nAssert if all the locations are inbounds.\n\n\n\n\n\n","category":"macro"},{"location":"man/blocks.html#YaoBlocks.@assert_locs_safe-Tuple{Any, Any, Vararg{Any}}","page":"Blocks","title":"YaoBlocks.@assert_locs_safe","text":"@assert_locs_safe <number of total qudits> <locations list> [<msg>]\n\nAssert if all the locations are:     - inbounds.     - do not have any conflict.\n\n\n\n\n\n","category":"macro"},{"location":"man/blocks.html#Extending-Blocks","page":"Blocks","title":"Extending Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are defined as a sub-type system inside Julia, you could extend it by defining new Julia types by subtyping abstract types we provide. But we also provide some handy tools to help you create your own blocks.","category":"page"},{"location":"man/blocks.html#Define-Custom-Constant-Blocks","page":"Blocks","title":"Define Custom Constant Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Constant blocks are used quite often and in numerical simulation we would expect it to be a real constant in the program, which means it won't allocate new memory when we try to get its matrix for several times, and it won't change with parameters.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"In Yao, you can simply define a constant block with @const_gate, with the corresponding matrix:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"using YaoBlocks, BitBasis # hide\n@const_gate Rand = rand(ComplexF64, 4, 4)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"This will automatically create a type RandGate{T} and a constant binding Rand to the instance of RandGate{ComplexF64}, and it will also bind a Julia constant for the given matrix, so when you call mat(Rand), no allocation will happen.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@allocated mat(Rand)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If you want to use other data type like ComplexF32, you could directly call Rand(ComplexF32), which will create a new instance with data type ComplexF32.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Rand(ComplexF32)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"But remember this won't bind the matrix, it only binds the matrix you give","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@allocated mat(Rand(ComplexF32))","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"so if you want to make the matrix call mat for ComplexF32 to have zero allocation as well, you need to do it explicitly.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@const_gate Rand::ComplexF32","category":"page"},{"location":"man/blocks.html#Define-Custom-Blocks","page":"Blocks","title":"Define Custom Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are the most basic block to build a quantum circuit, if a primitive block has a certain structure, like containing tweakable parameters, it cannot be defined as a constant, thus create a new type by subtyping PrimitiveBlock is necessary","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"using YaoBlocks\n\nmutable struct PhaseGate{T <: Real} <: PrimitiveBlock{1}\n    theta::T\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If your insterested block is a composition of other blocks, you should define a CompositeBlock, e.g","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"struct ChainBlock{N} <: CompositeBlock{N}\n    blocks::Vector{AbstractBlock{N}}\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Besides types, there are several interfaces you could define for a block, but don't worry, they should just error if it doesn't work.","category":"page"},{"location":"man/blocks.html#Define-the-matrix","page":"Blocks","title":"Define the matrix","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The matrix form of a block is the minimal requirement to make a custom block functional, defining it is super simple, e.g for phase gate:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"mat(::Type{T}, gate::PhaseGate) where T = exp(T(im * gate.theta)) * Matrix{Complex{T}}(I, 2, 2)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Or for composite blocks, you could just calculate the matrix by call mat on its subblocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"mat(::Type{T}, c::ChainBlock) where T = prod(x->mat(T, x), reverse(c.blocks))","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The rest will just work, but might be slow since you didn't define any specification for this certain block.","category":"page"},{"location":"man/blocks.html#Define-how-blocks-are-applied-to-registers","page":"Blocks","title":"Define how blocks are applied to registers","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Although, having its matrix is already enough for applying a block to register, we could improve the performance or dispatch to other actions by overloading apply! interface, e.g we can use specialized instruction to make X gate (a builtin gate defined @const_gate) faster:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"function apply!(r::ArrayReg, x::XGate)\n    nactive(r) == 1 || throw(QubitMismatchError(\"register size $(nactive(r)) mismatch with block size $N\"))\n    instruct!(matvec(r.state), Val(:X), (1, ))\n    return r\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"In Yao, this interface allows us to provide more aggressive specialization on different patterns of quantum circuits to accelerate the simulation etc.","category":"page"},{"location":"man/blocks.html#Define-Parameters","page":"Blocks","title":"Define Parameters","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If you want to use some member of the block to be parameters, you need to declare them explicitly","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"niparams(::Type{<:PhaseGate}) = 1\ngetiparams(x::PhaseGate) = x.theta\nsetiparams!(r::PhaseGate, param::Real) = (r.theta = param; r)","category":"page"},{"location":"man/blocks.html#Define-Adjoint","page":"Blocks","title":"Define Adjoint","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Since blocks are actually quantum operators, it makes sense to call their adjoint as well. We provide Daggered for general purpose, but some blocks may have more specific transformation rules for adjoints, e.g","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Base.adjoint(x::PhaseGate) = PhaseGate(-x.theta)","category":"page"},{"location":"man/blocks.html#Define-Cache-Keys","page":"Blocks","title":"Define Cache Keys","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"To enable cache, you should define cache_key, e.g for phase gate, we only cares about its phase, instead of the whole instance","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"cache_key(gate::PhaseGate) = gate.theta","category":"page"},{"location":"man/blocks.html#APIs","page":"Blocks","title":"APIs","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nOrder = [:function, :macro]","category":"page"},{"location":"man/blocks.html#Base.:|>-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"Base.:|>","text":"|>(register, circuit) -> register\n\nApply a quantum circuits to register, which modifies the register directly.\n\nExample\n\njulia> arrayreg(bit\"0\") |> X |> Y\n\nwarning: Warning\n|> is equivalent to apply!, which means it has side effects. You need to use apply if you do not want to change it in-place.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Int64, Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(n, locs_and_blocks::Pair{<:Any, <:AbstractBlock}...) -> KronBlock\n\nReturns a n-qudit KronBlock. The inputs contains a list of location-block pairs, where a location can be an integer or a range. It is conceptually a chain of put block without address conflicts, but it has a richer type information that can be useful for various purposes such as more efficient mat function.\n\nLet I be a 2times 2 identity matrix, G and H be two 2times 2 matrix, the matrix representation of kron(n, i=>G, j=>H) (assume j  i) is defined as\n\nI^otimes n-j otimes H otimes I^otimes j-i-1 otimes G otimes I^i-1\n\nFor multiple locations, the expression can be complicated.\n\nExamples\n\nUse kron to construct a KronBlock, it will put an X gate on the 1st qubit, and a Y gate on the 3rd qubit.\n\njulia> kron(4, 1=>X, 3=>Y)\nnqubits: 4\nkron\n├─ 1=>X\n└─ 3=>Y\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{AbstractBlock}}","page":"Blocks","title":"Base.kron","text":"kron(blocks::AbstractBlock...)\nkron(n, itr)\n\nReturn a KronBlock, with total number of qubits n, and blocks should use all the locations on n wires in quantum circuits.\n\nExamples\n\nYou can use kronecker product to composite small blocks to a large blocks.\n\njulia> kron(X, Y, Z, Z)\nnqubits: 4\nkron\n├─ 1=>X\n├─ 2=>Y\n├─ 3=>Z\n└─ 4=>Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(blocks...) -> f(n)\nkron(itr) -> f(n)\n\nReturn a lambda, which will take the total number of qubits as input.\n\nExamples\n\nIf you don't know the number of qubit yet, or you are just too lazy, it is fine.\n\njulia> kron(put(1=>X) for _ in 1:2)\n(n -> kron(n, ((n  ->  put(n, 1 => X)), (n  ->  put(n, 1 => X)))...))\n\njulia> kron(X for _ in 1:2)\nnqubits: 2\nkron\n├─ 1=>X\n└─ 2=>X\n\njulia> kron(1=>X, 3=>Y)\n(n -> kron(n, (1 => X, 3 => Y)...))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{AbstractBlock, Any}","page":"Blocks","title":"Base.repeat","text":"repeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{Int64, AbstractBlock, Vararg{Int64}}","page":"Blocks","title":"Base.repeat","text":"repeat(n, subblock::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a n-qudit RepeatedBlock block, which is conceptually a [kron] block with all gates being the same. If locs is provided, repeat on locs, otherwise repeat on all locations. Let G be a 2times 2 matrix, the matrix representation of repeat(n, X) is\n\nX^otimes n\n\nThe RepeatedBlock can be used to accelerate repeated applying certain gate types: X, Y, Z, S, T, Sdag, and Tdag.\n\nExamples\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\nRepeat over certain gates will provide speed up.\n\njulia> reg = rand_state(20);\n\njulia> @time apply!(reg, repeat(20, X));\n  0.002252 seconds (5 allocations: 656 bytes)\n\njulia> @time apply!(reg, chain([put(20, i=>X) for i=1:20]));\n  0.049362 seconds (82.48 k allocations: 4.694 MiB, 47.11% compilation time)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#LinearAlgebra.ishermitian-Tuple{Any}","page":"Blocks","title":"LinearAlgebra.ishermitian","text":"ishermitian(op::AbstractBlock) -> Bool\n\nReturns true if op is hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chcontent-Tuple{AbstractContainer, Any}","page":"Blocks","title":"YaoAPI.chcontent","text":"chcontent(x, blk)\n\nCreate a similar block of x and change its content to blk.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chsubblocks-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.chsubblocks","text":"chsubblocks(composite_block, itr)\n\nChange the sub-blocks of a CompositeBlock with given iterator itr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.content-Tuple{AbstractContainer}","page":"Blocks","title":"YaoAPI.content","text":"content(x)\n\nReturns the content of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.dispatch!-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.dispatch!","text":"dispatch!(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.expect-Tuple{AbstractBlock, DensityMatrix}","page":"Blocks","title":"YaoAPI.expect","text":"expect(op::AbstractBlock, reg) -> Vector\nexpect(op::AbstractBlock, reg => circuit) -> Vector\nexpect(op::AbstractBlock, density_matrix) -> Vector\n\nGet the expectation value of an operator, the second parameter can be a register reg or a pair of input register and circuit reg => circuit.\n\nexpect'(op::AbstractBlock, reg=>circuit) -> Pair expect'(op::AbstractBlock, reg) -> AbstracRegister\n\nObtain the gradient with respect to registers and circuit parameters. For pair input, the second return value is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nnote: Note\nFor batched register, expect(op, reg=>circuit) returns a vector of size number of batch as output. However, one can not differentiate over a vector loss, so expect'(op, reg=>circuit) accumulates the gradient over batch, rather than returning a batched gradient of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.getiparams-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.getiparams","text":"getiparams(block)\n\nReturns the intrinsic parameters of node block, default is an empty tuple.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.iparams_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.iparams_eltype","text":"iparams_eltype(block)\n\nReturn the element type of getiparams.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat([T=ComplexF64], blk)\n\nReturns the matrix form of given block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{GeneralMatrixBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat(A::GeneralMatrixBlock)\n\nReturn the matrix of general matrix block.\n\nwarn: Warn\nInstead of converting it to the default data type ComplexF64, this will return its contained matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.operator_fidelity-Tuple{AbstractBlock, AbstractBlock}","page":"Blocks","title":"YaoAPI.operator_fidelity","text":"operator_fidelity(b1::AbstractBlock, b2::AbstractBlock) -> Number\n\nOperator fidelity defined as\n\nF^2 = frac1d^2leftrm Tr(b1^dagger b2)right\n\nHere, d is the size of the Hilbert space. Note this quantity is independant to global phase. See arXiv: 0803.2940v2, Equation (2) for reference.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters","text":"parameters(block)\n\nReturns all the parameters contained in block tree with given root block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters_eltype","text":"parameters_eltype(x)\n\nReturn the element type of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams!([f], block, itr)\nsetiparams!([f], block, params...)\n\nSet the parameters of block. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.subblocks-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.subblocks","text":"subblocks(x)\n\nReturns an iterator of the sub-blocks of a composite block. Default is empty.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rx-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rx","text":"Rx(theta)\n\nReturn a RotationGate on X axis.\n\nExample\n\njulia> Rx(0.1)\nrot(X, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Ry-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Ry","text":"Ry(theta)\n\nReturn a RotationGate on Y axis.\n\nExample\n\njulia> Ry(0.1)\nrot(Y, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rz-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rz","text":"Rz(theta)\n\nReturn a RotationGate on Z axis.\n\nExample\n\njulia> Rz(0.1)\nrot(Z, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.applymatrix-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.applymatrix","text":"applymatrix(g::AbstractBlock) -> Matrix\n\nTransform the apply! function of specific block to dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache","page":"Blocks","title":"YaoBlocks.cache","text":"cache(x[, level=1; recursive=false])\n\nCreate a CachedBlock with given block x, which will cache the matrix of x for the first time it calls mat, and use the cached matrix in the following calculations.\n\nExamples\n\njulia> cache(control(3, 1, 2=>X))\nnqubits: 3\n[cached] control(1)\n   └─ (2,) X\n\n\njulia> chain(cache(control(3, 1, 2=>X)), repeat(H))\nnqubits: 3\nchain\n└─ [cached] control(1)\n      └─ (2,) X\n\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cache_key-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.cache_key","text":"cache_key(block)\n\nReturns the key that identify the matrix cache of this block. By default, we use the returns of parameters as its key.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache_type-Tuple{Type{<:AbstractBlock}}","page":"Blocks","title":"YaoBlocks.cache_type","text":"cache_type(::Type) -> DataType\n\nReturn the element type that a CacheFragment will use.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.chain","text":"chain(n)\n\nReturn an empty ChainBlock which can be used like a list of blocks.\n\nExamples\n\njulia> chain(2)\nnqubits: 2\nchain\n\n\njulia> chain(2; nlevel=3)\nnqudits: 2\nchain\n\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{}","page":"Blocks","title":"YaoBlocks.chain","text":"chain()\n\nReturn an lambda n->chain(n).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Union{Tuple{Vararg{AbstractBlock{D}}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.chain","text":"chain(blocks...) -> ChainBlock\nchain(n) -> ChainBlock\n\nReturn a ChainBlock which chains a list of blocks with the same number of qudits. Let G_i be a sequence of n-qudit blocks, the matrix representation of block chain(G_1, G_2, ..., G_m) is\n\nG_m G_m-1ldots G_1\n\nIt is almost equivalent to matrix multiplication except the order is reversed. We make its order different from regular matrix multiplication because quantum circuits can be represented more naturally in this form.\n\nExamples\n\njulia> chain(X, Y, Z)\nnqubits: 1\nchain\n├─ X\n├─ Y\n└─ Z\n\njulia> chain(2, put(1=>X), put(2=>Y), cnot(2, 1))\nnqubits: 2\nchain\n├─ put on (1)\n│  └─ X\n├─ put on (2)\n│  └─ Y\n└─ control(2)\n   └─ (1,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chmeasureoperator-Union{Tuple{D}, Tuple{Measure{D, K} where K, AbstractBlock}} where D","page":"Blocks","title":"YaoBlocks.chmeasureoperator","text":"chmeasureoperator(m::Measure, op::AbstractBlock)\n\nchange the measuring operator. It will also discard existing measuring results.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cleanup-Tuple{EntryTable}","page":"Blocks","title":"YaoBlocks.cleanup","text":"cleanup(entries::EntryTable; zero_threshold=0.0)\n\nClean up the entry table by 1) sort entries, 2) merge items and 3) clean up zeros. Any value with amplitude ≤ zero_threshold will be regarded as zero.\n\njulia> et = EntryTable([bit\"000\",bit\"011\",bit\"101\",bit\"101\",bit\"011\",bit\"110\",bit\"110\",bit\"011\",], [1.0 + 0.0im,-1, 1,1,1,-1,1,1,-1])\nEntryTable{DitStr{2, 3, Int64}, ComplexF64}:\n  000 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   -1.0 + 0.0im\n  101 ₍₂₎   1.0 + 0.0im\n  101 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n  110 ₍₂₎   -1.0 + 0.0im\n  110 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n\n\njulia> cleanup(et)\nEntryTable{DitStr{2, 3, Int64}, ComplexF64}:\n  000 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n  101 ₍₂₎   2.0 + 0.0im\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cnot-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cnot","text":"cnot([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CNOT gate with number of active qubits n and locs of control qubits ctrl_locs, and location of X gate.\n\nExamples\n\njulia> cnot(3, (2, 3), 1)\nnqubits: 3\ncontrol(2, 3)\n└─ (1,) X\n\njulia> cnot(2, 1)\n(n -> cnot(n, 2, 1))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.collect_blocks-Union{Tuple{T}, Tuple{Type{T}, AbstractBlock}} where T<:AbstractBlock","page":"Blocks","title":"YaoBlocks.collect_blocks","text":"collect_blocks(block_type, root)\n\nReturn a ChainBlock with all block of block_type in root.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs, target) -> f(n)\n\nReturn a lambda that takes the number of total active qubits as input. See also control.\n\nExamples\n\njulia> control((2, 3), 1=>X)\n(n -> control(n, (2, 3), 1 => X))\n\njulia> control(2, 1=>X)\n(n -> control(n, 2, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Int64, Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(n, ctrl_locs, locations => subblock)\n\nReturn a n-qubit ControlBlock, where the control locations ctrl_locs and the subblock locations in the third argument can be an integer, a tuple or a range, and the size of the subblock should match the length of locations. Let I be the 2 times 2 identity matrix, G be a 2 times 2 subblock, P_0=0ranglelangle 0 and P_1=1ranglelangle 1 be two single qubit projection operators to subspace 0rangle and 1rangle, i and j be two integers that ij. The matrix representation of control(n, i, j=>G) is\n\nbeginalign\nI^otimes n-i P_0 otimes I^otimes i-j-1 otimes Iotimes I^otimes j-1\n+\n I^otimes n-i P_1 otimes I^otimes i-j-1 otimes Gotimes I^otimes j-1\nendalign\n\nThe multi-controlled multi-qubit controlled block is more complicated, it means apply the gate when control qubits are all ones. Each control location can take a negative sign to represent the inverse control, meaning only when this qubit is 0, the controlled gate is applied.\n\nExamples\n\njulia> control(4, (1, 2), 3=>X)\nnqubits: 4\ncontrol(1, 2)\n└─ (3,) X\n\njulia> control(4, 1, 3=>X)\nnqubits: 4\ncontrol(1)\n└─ (3,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cunmat","page":"Blocks","title":"YaoBlocks.cunmat","text":"cunmat(nbit::Int, cbits::NTuple{C, Int}, cvals::NTuple{C, Int}, U0::AbstractMatrix, locs::NTuple{M, Int}) where {C, M} -> AbstractMatrix\n\ncontrol-unitary matrix\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cz-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cz","text":"cz([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CZ gate with number of active qubits n and locs of control qubits ctrl_locs, and location of Z gate. See also cnot.\n\nExamples\n\njulia> cz(2, 1, 2)\nnqubits: 2\ncontrol(1)\n└─ (2,) Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.decode_sign-Union{Tuple{Tuple{Vararg{Int64, N}}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.decode_sign","text":"decode_sign(ctrls...)\n\nDecode signs into control sequence on control or inversed control.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dispatch-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.dispatch","text":"dispatch(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x, the generic non-inplace version.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dump_gate","page":"Blocks","title":"YaoBlocks.dump_gate","text":"dump_gate(blk::AbstractBlock) -> Expr\n\nconvert a gate to a YaoScript expression for serization. The fallback is GateTypeName(fields...)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.eigenbasis-Union{Tuple{AbstractBlock{D}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.eigenbasis","text":"eigenbasis(op::AbstractBlock)\n\nReturn the eigenvalue and eigenvectors of target operator. By applying eigenvector' to target state, one can swith the basis to the eigenbasis of this operator. However, eigenvalues does not have a specific form.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.gate_expr-Union{Tuple{G}, Tuple{Val{G}, Any, Any}} where G","page":"Blocks","title":"YaoBlocks.gate_expr","text":"gate_expr(::Val{G}, args, info)\n\nObtain the gate constructior from its YaoScript expression. G is a symbol for the gate type, the default constructor is G(args...). info contains the informations about the number of qubit and Yao version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.getcol-Tuple{LuxurySparse.SDSparseMatrixCSC, Int64}","page":"Blocks","title":"YaoBlocks.getcol","text":"getcol(csc::SDparseMatrixCSC, icol::Int) -> (View, View)\n\nget specific col of a CSC matrix, returns a slice of (rowval, nzval)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.igate-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.igate","text":"igate(n::Int; nlevel=2)\n\nThe constructor for IdentityGate. Let I_d be a d times d identity matrix, igate(n; nlevel=d) is defined as I_d^otimes n.\n\nExamples\n\njulia> igate(2)\nigate(2)\n\njulia> igate(2; nlevel=3)\nigate(2;nlevel=3)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.isclean-Tuple{EntryTable}","page":"Blocks","title":"YaoBlocks.isclean","text":"isclean(entries::EntryTable; zero_threshold=0.0)\n\nReturn true if the entries are ordered, unique and amplitudes are nonzero. Any value with amplitude ≤ zero_threshold will be regarded as zero.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.map_address","page":"Blocks","title":"YaoBlocks.map_address","text":"map_address(block::AbstractBlock, info::AddressInfo) -> AbstractBlock\n\nmap the locations in block to target locations.\n\nExample\n\nmap_address can be used to embed a sub-circuit to a larger one.\n\njulia> c = chain(5, repeat(H, 1:5), put(2=>X), kron(1=>X, 3=>Y))\nnqubits: 5\nchain\n├─ repeat on (1, 2, 3, 4, 5)\n│  └─ H\n├─ put on (2)\n│  └─ X\n└─ kron\n   ├─ 1=>X\n   └─ 3=>Y\n\n\njulia> map_address(c, AddressInfo(10, [6,7,8,9,10]))\nnqubits: 10\nchain\n├─ repeat on (6, 7, 8, 9, 10)\n│  └─ H\n├─ put on (7)\n│  └─ X\n└─ kron\n   ├─ 6=>X\n   └─ 8=>Y\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractMatrix}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(mat_or_block; nlevel=2, tag=\"matblock(...)\")\n\nCreate a GeneralMatrixBlock with a matrix m.\n\nExamples\n\njulia> matblock(ComplexF64[0 1;1 0])\nmatblock(...)\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix when calling `mat`.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.num_nonzero","page":"Blocks","title":"YaoBlocks.num_nonzero","text":"num_nonzero(nbits, nctrls, U, [N])\n\nReturn number of nonzero entries of the matrix form of control-U gate. nbits is the number of qubits, and nctrls is the number of control qubits.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.parameters!-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters!","text":"parameters!(out, block)\n\nAppend all the parameters contained in block tree with given root block to out.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parameters_range-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters_range","text":"parameters_range(block)\n\nReturn the range of real parameters present in block.\n\nnote: Note\nIt may not be the case that length(parameters_range(block)) == nparameters(block).\n\nExample\n\njulia> YaoBlocks.parameters_range(RotationGate(X, 0.1))\n1-element Vector{Tuple{Float64, Float64}}:\n (0.0, 6.283185307179586)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parse_block","page":"Blocks","title":"YaoBlocks.parse_block","text":"parse_block(n, ex)\n\nThis function parse the julia object ex to a quantum block, it defines the syntax of high level interfaces. ex can be a function takes number of qubits n as input or it can be a pair.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.phase-Tuple{Real}","page":"Blocks","title":"YaoBlocks.phase","text":"phase(theta)\n\nReturns a global phase gate. Defined with following matrix form:\n\ne^iθ I\n\nExamples\n\nYou can create a global phase gate with a phase (a real number).\n\njulia> phase(0.1)\nphase(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(block, list)\n\nPop the first nparameters parameters of list, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{Function, AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(f, block, list)\n\nPop the first nparameters parameters of list, map them with a function f, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.postwalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.postwalk","text":"postwalk(f, src::AbstractBlock)\n\nWalk the tree and call f after the children are visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.prewalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.prewalk","text":"prewalk(f, src::AbstractBlock)\n\nWalk the tree and call f once the node is visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_annotation-Tuple{IO, Any, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_annotation","text":"print_annotation(io, root, node, child, k)\n\nPrint the annotation of k-th child of node, aka the k-th element of subblocks(node).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_prefix-Tuple{IO, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_prefix","text":"print_prefix(io, depth, charset, active_levels)\n\nprint prefix of a tree node in a single line.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_subtypetree","page":"Blocks","title":"YaoBlocks.print_subtypetree","text":"print_subtypetree(::Type[, level=1, indent=4])\n\nPrint subtype tree, level specify the depth of the tree.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_title-Tuple{IO, AbstractBlock}","page":"Blocks","title":"YaoBlocks.print_title","text":"print_title(io, block)\n\nPrint the title of given block of an AbstractBlock.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_tree","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree(io, root, node[, depth=1, active_levels=()]; kwargs...)\n\nPrint the block tree.\n\nKeywords\n\nmaxdepth: max tree depth to print\ncharset: default is ('├','└','│','─'). See also BlockTreeCharSet.\ntitle: control whether to print the title, true or false, default is true\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_tree-Tuple{Any}","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree([io=stdout], root)\n\nPrint the block tree.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projector-Tuple{Any}","page":"Blocks","title":"YaoBlocks.projector","text":"projector(x)\n\nReturn projector on 0 or projector on 1.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.pswap-Tuple{Int64, Int64, Int64, Real}","page":"Blocks","title":"YaoBlocks.pswap","text":"pswap(n::Int, i::Int, j::Int, α::Real)\npswap(i::Int, j::Int, α::Real) -> f(n)\n\nparametrized swap gate.\n\nExamples\n\njulia> pswap(2, 1, 2, 0.1)\nnqubits: 2\nput on (1, 2)\n└─ rot(SWAP, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.put","text":"put(pair) -> f(n)\n\nLazy curried version of put.\n\nExamples\n\njulia> put(1=>X)\n(n -> put(n, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Union{Tuple{M}, Tuple{Int64, Pair{Tuple{Vararg{Int64, M}}, <:AbstractBlock}}} where M","page":"Blocks","title":"YaoBlocks.put","text":"put(n::Int, locations => subblock) => PutBlock\n\nCreate a n-qudit PutBlock. The second argument is a pair of locations and subblock, where the locations can be a tuple, an integer or a range and the subblock size should match the length of locations. Let I be a 2times 2 identity matrix and G be a 2times 2 matrix, the matrix representation of put(n, i=>G) is defined as\n\nI^otimes n-i otimes G otimes I^otimes i-1\n\nFor multiple locations, the expression can be complicated,  which corresponds to the matrix representation of multi-qubit gate applied on n-qubit space in quantum computing.\n\nExamples\n\njulia> put(4, 1=>X)\nnqubits: 4\nput on (1)\n└─ X\n\nIf you want to put a multi-qubit gate on specific locations, you need to write down all possible locations.\n\njulia> put(4, (1, 3)=>kron(X, Y))\nnqubits: 4\nput on (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\nThe outter locations creates a scope which make it seems to be a contiguous two qubits for the block inside PutBlock.\n\ntips: Tips\nIt is better to use subroutine instead of put for large blocks, since put will use the matrix of its contents directly instead of making use of what's in it. put is more efficient for small blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rand_hermitian-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.rand_hermitian","text":"rand_hermitian([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random hermitian matrix.\n\njulia> ishermitian(rand_hermitian(2))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rand_unitary-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.rand_unitary","text":"rand_unitary([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random unitary matrix.\n\nExamples\n\njulia> isunitary(rand_unitary(2))\ntrue\n\njulia> eltype(rand_unitary(ComplexF32, 2))\nComplexF32 (alias for Complex{Float32})\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rmlines-Tuple{Expr}","page":"Blocks","title":"YaoBlocks.rmlines","text":"rmlines(ex)\n\nRemove LineNumberNode from an Expr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rot-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.rot","text":"rot(U, theta)\n\nReturn a RotationGate on U axis.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setcol!-Tuple{SparseMatrixCSC, Int64, AbstractVector, Any}","page":"Blocks","title":"YaoBlocks.setcol!","text":"setcol!(csc::SparseMatrixCSC, icol::Int, rowval::AbstractVector, nzval) -> SparseMatrixCSC\n\nset specific col of a CSC matrix\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setiparams","page":"Blocks","title":"YaoBlocks.setiparams","text":"setiparams([f], block, itr)\nsetiparams([f], block, params...)\n\nSet the parameters of block, the non-inplace version. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.shift-Tuple{Any}","page":"Blocks","title":"YaoBlocks.shift","text":"shift(θ)\n\nCreate a ShiftGate with phase θ.\n\nbeginpmatrix\n1  0\n0  e^itheta\nendpmatrix\n\nExamples\n\njulia> shift(0.1)\nshift(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.simple_commute_eachother-Union{Tuple{Vector{<:AbstractBlock{D}}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.simple_commute_eachother","text":"Return true if operators commute to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.sprand_hermitian-Tuple{Int64, Any}","page":"Blocks","title":"YaoBlocks.sprand_hermitian","text":"sprand_hermitian([T=ComplexF64], N, density)\n\nCreate a sparse random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.sprand_unitary-Tuple{Int64, Real}","page":"Blocks","title":"YaoBlocks.sprand_unitary","text":"sprand_unitary([T=ComplexF64], N::Int, density) -> SparseMatrixCSC\n\nCreate a random sparse unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(block, locs) -> f(n)\n\nLazy curried version of subroutine.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{Int64, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(n, block, locs)\n\nCreate a n-qudit Subroutine block, where the subblock is a subprogram of size m, and locs is a tuple or range of length m. It runs a quantum subprogram with smaller size on a subset of locations. While its mathematical definition is the same as the put block, while it is more suited for running a larger chunk of circuit.\n\nExamples\n\nSubroutine is equivalent to put a block on given position mathematically, but more efficient and convenient for large blocks.\n\njulia> r = rand_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> apply!(copy(r), subroutine(X, 1)) ≈ apply!(copy(r), put(1=>X))\ntrue\n\nIt works for in-contigious locs as well\n\njulia> r = rand_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> cc = subroutine(4, kron(X, Y), (1, 3))\nnqubits: 4\nSubroutine: (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\njulia> pp = chain(4, put(1=>X), put(3=>Y))\nnqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n└─ put on (3)\n   └─ Y\n\njulia> apply!(copy(r), cc) ≈ apply!(copy(r), pp)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(n, loc1, loc2)\n\nCreate a n-qubit Swap gate which swap loc1 and loc2.\n\nExamples\n\njulia> swap(4, 1, 2)\nnqubits: 4\nput on (1, 2)\n└─ SWAP\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(loc1, loc2) -> f(n)\n\nCreate a lambda that takes the total number of active qubits as input. Lazy curried version of swap(n, loc1, loc2). See also Swap.\n\nExamples\n\njulia> swap(1, 2)\n(n -> swap(n, 1, 2))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.time_evolve-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.time_evolve","text":"time_evolve(H, dt[; tol=1e-7, check_hermicity=true])\n\nCreate a TimeEvolution block with Hamiltonian H and time step dt. The TimeEvolution block will use Krylove based expv to calculate time propagation. TimeEvolution block can also be used for imaginary time evolution if dt is complex. Let H be a hamiltonian and t be a time, the matrix representation of time_evolve(H, t) is e^-iHt.\n\nArguments\n\nH the hamiltonian represented as an AbstractBlock.\ndt: the evolution duration (start time is zero).\n\nKeyword Arguments\n\ntol::Real=1e-7: error tolerance.\ncheck_hermicity=true: check hermicity or not.\n\nExamples\n\njulia> time_evolve(kron(2, 1=>X, 2=>X), 0.1)\nTime Evolution Δt = 0.1, tol = 1.0e-7\nkron\n├─ 1=>X\n└─ 2=>X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.u1ij!","page":"Blocks","title":"YaoBlocks.u1ij!","text":"u1ij!(target, i, j, a, b, c, d)\n\nsingle u1 matrix into a target matrix.\n\nnote: Note\nFor coo, we take an additional parameter     * ptr: starting position to store new data.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.unitary_channel-Tuple{Any, AbstractVector}","page":"Blocks","title":"YaoBlocks.unitary_channel","text":"unitary_channel(operators, probs) -> UnitaryChannel\n\nReturns a UnitaryChannel instance, where `operators is a list of operators, probs is a real vector that sum up to 1. The unitary channel is defined as below\n\nphi(rho) = sum_i p_i U_i ρ U_i^dagger\n\nwhere rho in a DensityMatrix as the register to apply on, p_i is the i-th element in probs, U_i is the i-th operator in operators.\n\nExamples\n\njulia> unitary_channel([X, Y, Z], [0.1, 0.2, 0.7])\nnqubits: 1\nunitary_channel\n├─ [0.1] X\n├─ [0.2] Y\n└─ [0.7] Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.unmat-Tuple{Val{2}, Int64, AbstractMatrix, Tuple{Vararg{T, N}} where {N, T}}","page":"Blocks","title":"YaoBlocks.unmat","text":"unmat(::Val{D}, nbit::Int, U::AbstractMatrix, locs::NTuple) -> AbstractMatrix\n\nReturn the matrix representation of putting matrix at locs.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.@yao_str-Tuple{String}","page":"Blocks","title":"YaoBlocks.@yao_str","text":"@yao_str\nyao\"...\"\n\nThe mark up language for quantum circuit.\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"CurrentModule = YaoSym\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister, YaoSym\n    using YaoBlocks\n    using YaoArrayRegister\n    using YaoSym\nend","category":"page"},{"location":"man/symbolic.html#Symbolic-Computation","page":"Symbolic Computation","title":"Symbolic Computation","text":"","category":"section"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"Symbolic Computation support for Yao","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"@ket_str\n@bra_str\n@vars\nszero_state","category":"page"},{"location":"man/symbolic.html#YaoSym.@ket_str","page":"Symbolic Computation","title":"YaoSym.@ket_str","text":"@ket_str\n\nCreate a ket register. See also @bra_str.\n\nExamples\n\na symbolic quantum state can be created simply by\n\njulia> ket\"110\" + 2ket\"111\"\n|110⟩ + 2.0|111⟩\n\nqubits can be partially actived by focus!\n\njulia> ket\"100\" + ket\"111\" |> focus!(1:2)\n|100⟩ + |111⟩\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.@bra_str","page":"Symbolic Computation","title":"YaoSym.@bra_str","text":"@bra_str\n\nCreate a bra register. See also @ket_str.\n\nExamples\n\nSimilar to @ket_str literal, a symbolic quantum state can be created by\n\njulia> bra\"111\" + 2bra\"101\"\n2.0⟨101| + ⟨111|\n\njulia> bra\"111\" * (ket\"101\" + ket\"111\")\n1\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.szero_state","page":"Symbolic Computation","title":"YaoSym.szero_state","text":"szero_state(n; nbatch=1)\n\nCreate a symbolic zero state, same as ket\"000\", but allows you use an integer.\n\n\n\n\n\n","category":"function"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/4.shor-algorithm/main.jl\"","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Shor","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html#References","page":"Shor's Algorithm","title":"References","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Neilsen\nAn Insightful Blog","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The main program of a Shor's algorithm can be summrized in several lines of code. For the theory part, please refer the reference materials above. It factorize an integer L, and returns one of the factors.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"using Yao, BitBasis\nusing Yao.EasyBuild: qft_circuit","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Number-theory-basic","page":"Shor's Algorithm","title":"Number theory basic","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Before entering the main program, let us defined some useful functions in number theory.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"module NumberTheory\n\nexport Z_star, Eulerφ, continued_fraction, mod_inverse, rand_primeto, factor_a_power_b\nexport is_order, order_from_float, find_order\n\n\"\"\"\n    Z_star(N::Int) -> Vector\n\nreturns the Z* group elements of `N`, i.e. {x | gcd(x, N) == 1}\n\"\"\"\nZ_star(N::Int) = filter(i->gcd(i, N)==1, 0:N-1)\nEulerφ(N) = length(Z_star(N))\n\n\"\"\"\n    continued_fraction(ϕ, niter::Int) -> Rational\n\nobtain `s` and `r` from `ϕ` that satisfies `|s/r - ϕ| ≦ 1/2r²`\n\"\"\"\ncontinued_fraction(ϕ, niter::Int) = niter==0 || isinteger(ϕ) ? floor(Int, ϕ) : floor(Int, ϕ) + 1//continued_fraction(1/mod(ϕ, 1), niter-1)\ncontinued_fraction(ϕ::Rational, niter::Int) = niter==0 || ϕ.den==1 ? floor(Int, ϕ) : floor(Int, ϕ) + 1//continued_fraction(1/mod(ϕ, 1), niter-1)\n\n\"\"\"\n    mod_inverse(x::Int, N::Int) -> Int\n\nReturn `y` that `(x*y)%N == 1`, notice the `(x*y)%N` operations in Z* forms a group and this is the definition of inverse.\n\"\"\"\nfunction mod_inverse(x::Int, N::Int)\n    for i=1:N\n        (x*i)%N == 1 && return i\n    end\n    throw(ArgumentError(\"Can not find the inverse, $x is probably not in Z*($N)!\"))\nend\n\n\"\"\"\n    is_order(r, x, N) -> Bool\n\nReturns true if `r` is the order of `x`, i.e. `r` satisfies `x^r % N == 1`.\n\"\"\"\nis_order(r, x, N) = powermod(x, r, N) == 1\n\n\"\"\"\n    find_order(x::Int, N::Int) -> Int\n\nFind the order of `x` by brute force search.\n\"\"\"\nfunction find_order(x::Int, N::Int)\n    findfirst(r->is_order(r, x, N), 1:N)\nend\n\n\"\"\"\n    rand_primeto(N::Int) -> Int\n\nReturns a random number `2 ≦ x < N` that is prime to `N`.\n\"\"\"\nfunction rand_primeto(N::Int)\n    while true\n        x = rand(2:N-1)\n        d = gcd(x, N)\n        if d == 1\n            return x\n        end\n    end\nend\n\n\"\"\"\n    order_from_float(ϕ, x, L) -> Int\n\nEstimate the order of `x` to `L`, `r`, from a floating point number `ϕ ∼ s/r` using the continued fraction method.\n\"\"\"\nfunction order_from_float(ϕ, x, L)\n    k = 1\n    rnum = continued_fraction(ϕ, k)\n    while rnum.den < L && k < 100\n        r = rnum.den\n        if is_order(r, x, L)\n            return r\n        end\n        k += 1\n        rnum = continued_fraction(ϕ, k)\n    end\n    return nothing\nend\n\n\"\"\"\n    factor_a_power_b(N::Int) -> (Int, Int) or nothing\n\nFactorize `N` into the power form `a^b`.\n\"\"\"\nfunction factor_a_power_b(N::Int)\n    y = log2(N)\n    for b = 2:ceil(Int, y)\n        x = 2^(y/b)\n        u1 = floor(Int, x)\n        u1^b == N && return (u1, b)\n        (u1+1)^b == N && return (u1+1, b)\n    end\nend\n\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Main.##296.NumberTheory","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#A-quantum-function-to-compute-mod","page":"Shor's Algorithm","title":"A quantum function to compute mod","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Before introducing the main program, let us customize a block for computing the classical function mod. In a more practical setup, it should be compiled to basic quantum gates. Here we just hack this function for simplicity.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"\n    KMod <: PrimitiveBlock{2}\n\nThe first `k` qubits are exponent, and the rest `n-k` are base `a`,\nit calculates `mod(a^k*x, L)`, notice `gcd(a, L)` should be 1.\n\"\"\"\nstruct KMod <: PrimitiveBlock{2}\n    n::Int\n    k::Int\n    a::Int\n    L::Int\n    function KMod(n, k, a, L)\n        @assert gcd(a, L) == 1 && L<=1<<(n-k)\n        new(n, k, a, L)\n    end\nend\n\nYao.nqudits(m::KMod) = m.n\n\nfunction bint2_reader(T, k::Int)\n    mask = bmask(T, 1:k)\n    return b -> (b&mask, b>>k)\nend\n\nfunction Yao.unsafe_apply!(reg::AbstractArrayReg, m::KMod)\n    nstate = zero(reg.state)\n\n    reader = bint2_reader(Int, m.k)\n    for b in 0:1<<m.n-1\n        k, i = reader(b)\n        _i = i >= m.L ? i : mod(i*powermod(m.a, k, m.L), m.L)\n        _b = k + _i<<m.k + 1\n        for j in 1:size(nstate,2)\n            @inbounds nstate[_b,j] = reg.state[b+1,j]\n        end\n    end\n    reg.state .= nstate\n    reg\nend\n\nfunction Yao.mat(::Type{T}, m::KMod) where {T}\n    perm = Vector{Int}(undef, 1<<m.n)\n    reader = bint2_reader(Int, m.k)\n    for b in 0:1<<m.n-1\n        k, i = reader(b)\n        _i = i >= m.L ? i : mod(i*powermod(m.a, k, m.L), m.L)\n        _b = k + _i<<m.k + 1\n        @inbounds perm[_b] = b+1\n    end\n    YaoBlocks.LuxurySparse.PermMatrix(perm, ones(T, 1<<m.n))\nend\n\nBase.adjoint(m::KMod) = KMod(m.n, m.k, mod_inverse(m.a, m.L), m.L)\nYao.print_block(io::IO, m::KMod) = print(io, \"Mod: $(m.a)^k*x % $(m.L) (nqubits = $(nqudits(m)), number of control bits = $(m.k))\")","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Main-Program","page":"Shor's Algorithm","title":"Main Program","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Here, the input ver can be either Val(:quantum) or Val(:classical), where the classical version is for comparison.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"using .NumberTheory\n\nfunction shor(L::Int, ver=Val(:quantum); maxtry=100)\n    L%2 == 0 && return 2\n\n    # find short cut solutions like `a^b`\n    res = NumberTheory.factor_a_power_b(L)\n    res !== nothing && return res[1]\n\n    for _ = 1:maxtry\n        # step 1\n        x = NumberTheory.rand_primeto(L)\n\n        # step 2\n        r = get_order(ver, x, L; )\n        if r%2 == 0 && powermod(x, r÷2, L) != L-1\n            # step 3\n            f1, f2 = gcd(powermod(x, r÷2, L)-1, L), gcd(powermod(x, r÷2, L)+1, L)\n            if f1!=1\n                return f1\n            elseif f2!=1\n                return f2\n            else\n                error(\"Algorithm Fail!\")\n            end\n        end\n    end\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor (generic function with 2 methods)","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Except some shortcuts, in each try, the main program can be summarized in several steps","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"randomly pick a number that prime to the input numebr L, i.e. gcd(x, L) = 1.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The complexity of this algorithm is polynomial.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get the order x, i.e. finding a number r that satisfies mod(x^r, L) = 1.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"If r is even and x^(r÷2) is non-trivial, go on, otherwise start another try. Here, trivial means equal to L-1 (mod L).","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"According to Theorem 5.2 in Neilsen book,","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"one of gcd(x^(r÷2)-1, L) and gcd(x^(r÷2)+1, L) must be a non-trivial (!=1) factor of L. Notice powermod(x, r÷2, L) must be -1 rather than 1, otherwise the order should be r/2 according to definition.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The only difference between classical and quantum version is the order finding algorithm.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Order-Finding","page":"Shor's Algorithm","title":"Order Finding","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"We provided a classical order finding algorithm in NumberTheory, here we focus on the quantum version. The algorithm is consisted","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"run the circuit to get a bitstring,\ninterpret this bitstring in output register as a rational number s/r.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"To achieve this, we first interpret it as a floating point number, then the continued fraction algorithm can find the best match for us.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"When using the quantum version, we have the flexibility to set key word arguments nshot, nbit (size of input data register) and ncbit (size of control register, or output register). nbit can be simply chosen as the minimum register size to store input, while ncbit can be estimated with the following function","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"estimate the required size of the output register.\"\"\"\nestimate_ncbit(nbit::Int, ϵ::Real) = 2*nbit + 1 + ceil(Int,log2(2+1/2ϵ))\n\nget_order(::Val{:classical}, x::Int, L::Int; kwargs...) = NumberTheory.find_order(x, L)\nfunction get_order(::Val{:quantum}, x::Int, L::Int; nshots::Int=10,\n            nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25))\n    c = order_finding_circuit(x, L; nbit=nbit, ncbit=ncbit)\n    reg = join(product_state(nbit, 1), zero_state(ncbit))\n\n    res = measure(copy(reg) |> c; nshots=nshots)\n    for r in res\n        # split bit string b into lower bits `k` and higher bits `r`.\n        mask = bmask(1:ncbit)\n        k,i = r&mask, r>>ncbit\n        # get s/r\n        ϕ = bfloat(k)  #\n        ϕ == 0 && continue\n\n        # order_from_float: given a floating point number,\n        # return the closest rational number with bounded number of continued fraction steps.\n        order = NumberTheory.order_from_float(ϕ, x, L)\n        if order === nothing\n            continue\n        else\n            return order\n        end\n    end\n    return nothing\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get_order (generic function with 2 methods)","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#The-circuit-used-for-finding-order","page":"Shor's Algorithm","title":"The circuit used for finding order","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"\n    order_finding_circuit(x::Int, L::Int; nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25)) -> AbstractBlock\n\nReturns the circuit for finding the order of `x` to `L`,\nfeeding input `|1>⊗|0>` will get the resulting quantum register with the desired \"phase\" information.\n\"\"\"\nfunction order_finding_circuit(x::Int, L::Int; nbit::Int, ncbit::Int)\n    N = nbit+ncbit\n    chain(N, repeat(N, H, 1:ncbit), KMod(N, ncbit, x, L),\n        subroutine(N, qft_circuit(ncbit)', 1:ncbit))\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Main.##296.order_finding_circuit","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The circuit for order finding is consisted of three parts","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Hadamard gates,\nKMod that computes a classical function mod(a^k*x, L).","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"k is the integer stored in first K (or ncbit) qubits and the rest N-K qubits stores a. Notice it is not a basic gate, it should have been compiled to multiple gates, which is not implemented in Yao for the moment. To learn more about implementing arithmatics on a quantum circuit, please read this paper.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Inverse quantum fourier transformation.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Run","page":"Shor's Algorithm","title":"Run","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Factorizing 15, you should see 3 or 5, please report a bug if it is not...","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor(15, Val(:quantum))","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"3","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"This page was generated using Literate.jl.","category":"page"},{"location":"dev/index.html#Developer-Notes","page":"Developer Notes","title":"Developer Notes","text":"","category":"section"},{"location":"dev/index.html#Overview-of-the-Architecture","page":"Developer Notes","title":"Overview of the Architecture","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"The following is an overview of the entire ecosystem, where Yao and CuYao are two meta-packages.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: stack)","category":"page"},{"location":"dev/index.html#The-role-of-QBIR","page":"Developer Notes","title":"The role of QBIR","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"Currently the main functionality is built on the Quantum Block Intermediate Representation (QBIR). A quantum program is defined by QBIR and then interpreted to different targets, such as different simulation backend or matrix representation.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: framework)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/7.variation-quantum-eigen-solver/main.jl\"","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html#Variational-Quantum-Eigen-Solver","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"section"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"using Yao, Yao.AD, Yao.EasyBuild","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"number of qubits","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"n = 4","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"4","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"depth","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"d = 5\ncircuit = dispatch!(variational_circuit(n, d),:random)\n\ngatecount(circuit)\n\nnparameters(circuit)\n\nh = heisenberg(n)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"nqubits: 4\n+\n├─ +\n│  ├─ repeat on (1, 2)\n│  │  └─ X\n│  ├─ repeat on (1, 2)\n│  │  └─ Y\n│  └─ repeat on (1, 2)\n│     └─ Z\n├─ +\n│  ├─ repeat on (2, 3)\n│  │  └─ X\n│  ├─ repeat on (2, 3)\n│  │  └─ Y\n│  └─ repeat on (2, 3)\n│     └─ Z\n├─ +\n│  ├─ repeat on (3, 4)\n│  │  └─ X\n│  ├─ repeat on (3, 4)\n│  │  └─ Y\n│  └─ repeat on (3, 4)\n│     └─ Z\n└─ +\n   ├─ repeat on (1, 4)\n   │  └─ X\n   ├─ repeat on (1, 4)\n   │  └─ Y\n   └─ repeat on (1, 4)\n      └─ Z\n","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"pick the one you like either reverse-mode or forward mode grad = faithfulgrad(h, zerostate(n) => circuit; nshots=100)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"for i in 1:1000\n      _, grad = expect'(h, zero_state(n) => circuit)\n      dispatch!(-, circuit, 1e-2 * grad)\n      println(\"Step $i, energy = $(real.(expect(h, zero_state(n)=>circuit)))\")\nend\n\nusing LinearAlgebra\nw, _ = eigen(Matrix(mat(h)))","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"LinearAlgebra.Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n16-element Vector{Float64}:\n -7.9999999999999964\n -4.0\n -3.9999999999999956\n -3.999999999999994\n -7.437659514860159e-32\n -4.426399962566284e-32\n  0.0\n  2.7369110631344083e-48\n  2.003298162163793e-32\n  3.552713678800501e-15\n  4.440892098500626e-15\n  3.9999999999999987\n  3.9999999999999996\n  4.0\n  4.0\n  4.0\nvectors:\n16×16 Matrix{ComplexF64}:\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  1.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im      0.559869+0.0im      0.43191+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im   2.22045e-16+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   6.41024e-18+0.0im   0.0+0.0im      0.481733+0.0im    -0.624453+0.0im        0.0+0.0im     -0.211325+0.0im   1.34897e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -6.41024e-18+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im     -0.559869+0.0im     -0.43191+0.0im        0.0+0.0im           0.0+0.0im   2.22045e-16+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im     0.707107+0.0im  -1.30125e-33+0.0im   0.0+0.0im  -1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im  -8.71576e-33+0.0im   3.06708e-33+0.0im           0.0+0.0im  -1.97795e-16+0.0im   1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im  -2.39233e-17+0.0im   0.0+0.0im      -0.12908+0.0im     0.167322+0.0im        0.0+0.0im      0.788675+0.0im   2.77891e-17+0.0im           0.0+0.0im     -0.288675+0.0im   2.39233e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im   0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im  -1.29477e-16+0.0im  6.29876e-17+0.0im        0.0+0.0im   6.06671e-17+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   1.75131e-17+0.0im   0.0+0.0im     -0.352653+0.0im     0.457131+0.0im        0.0+0.0im      -0.57735+0.0im  -4.12788e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -1.75131e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im    -0.707107+0.0im   1.30125e-33+0.0im   0.0+0.0im   1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im   8.71576e-33+0.0im  -3.06708e-33+0.0im           0.0+0.0im  -3.14995e-16+0.0im  -1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n 0.288675+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im      0.866025+0.0im           0.0+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im  -0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5-0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  1.0+0.0im","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/5.shor-9-code/main.jl\"","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html#Shor's-9-qubit-code","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"section"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"The well-known Shor's 9 qubit code can correct any single Pauli error, but it can also correct some other kinds of errors. Its circuit is shown as below (Image: shor-9-circuit) which can be constructed by the following code","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"using Yao\nusing SymEngine\n\nshor(E) = chain(9,\n    # encode circuit\n    cnot(1, 4), cnot(1, 7),\n    put(1=>H), put(4=>H), put(7=>H),\n    cnot(1,2), cnot(1,3), cnot(4,5), cnot(4,6), cnot(7,8), cnot(7,9),\n    E, # the error\n    # decode circuit\n    cnot(1,2), cnot(1,3), cnot((2, 3), 1),\n    cnot(4,5), cnot(4,6), cnot((5, 6), 4),\n    cnot(7,8), cnot(7,9), cnot((8, 9), 7),\n    put(1=>H), put(4=>H), put(7=>H), cnot(1, 4), cnot(1, 7), cnot((4, 7), 1)\n)","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"shor (generic function with 1 method)","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"Now we can check whether it can correct a given error by doing symbolic computation on an arbitrary 1-qubit pure quantum state α0 + β1 and a specific weight-9 error.","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"@vars α β\ns = α * ket\"0\" + β * ket\"1\" |> append_qudits!(8)\nE = kron(1=>X, 2=>Z, 3=>Z, 4=>X, 5=>Z, 6=>Z, 7=>X, 8=>Z, 9=>Z);\ns |> shor(E) |> expand","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"(1.0 + 0.0*im)*α|110110110⟩ + (1.0 + 0.0*im)*β|110110111⟩","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"This page was generated using Literate.jl.","category":"page"},{"location":"benchmarks.html#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks.html#Benchmark-Guard","page":"Benchmarks","title":"Benchmark Guard","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"To ensure some PR do not contain performance regression, we defined package benchmarks with PkgBenchmark in each component package, you can run the benchmark suite and compare the performance between different version and commits.","category":"page"},{"location":"benchmarks.html#Benchmark-with-Other-Packages","page":"Benchmarks","title":"Benchmark with Other Packages","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"We also provide benchmarks comparing to other packages, you can find a complete benchmark results here: quantum-benchmarks","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"a glance of Yao's benchmark comparing to other packages:","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"(Image: relative-gate)","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"(Image: relative-circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"EditURL = \"<unknown>/docs/src/quick-start/1.prepare-ghz-state/main.jl\"","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#example-ghz","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, you have to use this package in Julia.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"using Yao","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Now, we just define the circuit according to the circuit image below: (Image: ghz)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Let me explain what happens here.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Put-single-qubit-gate-X-to-location-1","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Put single qubit gate X to location 1","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"we have an X gate applied to the first qubit. We need to tell Yao to put this gate on the first qubit by","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We use Julia's Pair to denote the gate and its location in the circuit, for two-qubit gate, you could also use a tuple of locations:","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, (1, 2)=>swap(2, 1, 2))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1, 2)\n└─ put on (1, 2)\n   └─ SWAP\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"But, wait, why there's no 4 in the definition above? This is because all the functions in Yao that requires to input the number of qubits as its first arguement could be lazy (curried), and let other constructors to infer the total number of qubits later, e.g","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> put(n, 1 => X))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"which will return a lambda that ask for a single arguement n.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)(4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Apply-the-same-gate-on-different-locations","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Apply the same gate on different locations","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"next we should put Hadmard gates on all locations except the 1st qubits.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We provide repeat to apply the same block repeatly, repeat can take an iterator of desired locations, and like put, we can also leave the total number of qubits there.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"repeat(H, 2:4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> repeat(n, H, 2:4...))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Define-control-gates","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Define control gates","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"In Yao, we could define controlled gates by feeding a gate to control","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(4, 2, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\ncontrol(2)\n└─ (1,) X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Like many others, you could leave the number of total qubits there, and infer it later.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(2, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> control(n, 2, 1 => X))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Composite-each-part-together","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Composite each part together","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This will create a ControlBlock, the concept of block in Yao basically just means quantum operators, since the quantum circuit itself is a quantum operator, we could create a quantum circuit by composite each part of.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Here, we use chain to chain each part together, a chain of quantum operators means to apply each operators one by one in the chain. This will create a ChainBlock.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"You can check the type of it with typeof","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"typeof(circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ChainBlock{4}","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Construct-GHZ-state-from-00...00","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Construct GHZ state from 00...00","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"For simulation, we provide a builtin register type called ArrayReg, we will use the simulated register in this example.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, let's create 0000, you can create it with zero_state","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"zero_state(4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Or we also provide bit string literals to create arbitrary eigen state","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg(bit\"0000\")","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"They will both create a register with Julia's builtin Array as storage.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Feed-Registers-to-Circuits","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Feed Registers to Circuits","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Circuits can be applied to registers with apply!","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"apply!(zero_state(4), circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"or you can use pipe operator |>, when you want to chain several operations together, here we measure the state right after the circuit for 1000 times","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"results = zero_state(4) |> circuit |> r->measure(r, nshots=1000)\n\nusing StatsBase, Plots\n\nhist = fit(Histogram, Int.(results), 0:16)\nbar(hist.edges[1] .- 0.5, hist.weights, legend=:none)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM172.015 1486.45 L2352.76 1486.45 L2352.76 47.2441 L172.015 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"172\" y=\"47\" width=\"2182\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  341.095,1486.45 341.095,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  955.289,1486.45 955.289,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  341.095,1486.45 341.095,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  955.289,1486.45 955.289,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,1467.55 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M341.095 1517.37 Q337.484 1517.37 335.655 1520.93 Q333.85 1524.47 333.85 1531.6 Q333.85 1538.71 335.655 1542.27 Q337.484 1545.82 341.095 1545.82 Q344.729 1545.82 346.535 1542.27 Q348.363 1538.71 348.363 1531.6 Q348.363 1524.47 346.535 1520.93 Q344.729 1517.37 341.095 1517.37 M341.095 1513.66 Q346.905 1513.66 349.961 1518.27 Q353.039 1522.85 353.039 1531.6 Q353.039 1540.33 349.961 1544.94 Q346.905 1549.52 341.095 1549.52 Q335.285 1549.52 332.206 1544.94 Q329.151 1540.33 329.151 1531.6 Q329.151 1522.85 332.206 1518.27 Q335.285 1513.66 341.095 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M945.566 1514.29 L963.923 1514.29 L963.923 1518.22 L949.849 1518.22 L949.849 1526.7 Q950.867 1526.35 951.886 1526.19 Q952.904 1526 953.923 1526 Q959.71 1526 963.089 1529.17 Q966.469 1532.34 966.469 1537.76 Q966.469 1543.34 962.997 1546.44 Q959.525 1549.52 953.205 1549.52 Q951.029 1549.52 948.761 1549.15 Q946.515 1548.78 944.108 1548.04 L944.108 1543.34 Q946.191 1544.47 948.414 1545.03 Q950.636 1545.58 953.113 1545.58 Q957.117 1545.58 959.455 1543.48 Q961.793 1541.37 961.793 1537.76 Q961.793 1534.15 959.455 1532.04 Q957.117 1529.94 953.113 1529.94 Q951.238 1529.94 949.363 1530.35 Q947.511 1530.77 945.566 1531.65 L945.566 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1544.17 1544.91 L1551.81 1544.91 L1551.81 1518.55 L1543.5 1520.21 L1543.5 1515.95 L1551.76 1514.29 L1556.44 1514.29 L1556.44 1544.91 L1564.08 1544.91 L1564.08 1548.85 L1544.17 1548.85 L1544.17 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1583.52 1517.37 Q1579.91 1517.37 1578.08 1520.93 Q1576.28 1524.47 1576.28 1531.6 Q1576.28 1538.71 1578.08 1542.27 Q1579.91 1545.82 1583.52 1545.82 Q1587.16 1545.82 1588.96 1542.27 Q1590.79 1538.71 1590.79 1531.6 Q1590.79 1524.47 1588.96 1520.93 Q1587.16 1517.37 1583.52 1517.37 M1583.52 1513.66 Q1589.33 1513.66 1592.39 1518.27 Q1595.47 1522.85 1595.47 1531.6 Q1595.47 1540.33 1592.39 1544.94 Q1589.33 1549.52 1583.52 1549.52 Q1577.71 1549.52 1574.63 1544.94 Q1571.58 1540.33 1571.58 1531.6 Q1571.58 1522.85 1574.63 1518.27 Q1577.71 1513.66 1583.52 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2158.86 1544.91 L2166.5 1544.91 L2166.5 1518.55 L2158.19 1520.21 L2158.19 1515.95 L2166.45 1514.29 L2171.13 1514.29 L2171.13 1544.91 L2178.77 1544.91 L2178.77 1548.85 L2158.86 1548.85 L2158.86 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2188.26 1514.29 L2206.62 1514.29 L2206.62 1518.22 L2192.54 1518.22 L2192.54 1526.7 Q2193.56 1526.35 2194.58 1526.19 Q2195.6 1526 2196.62 1526 Q2202.4 1526 2205.78 1529.17 Q2209.16 1532.34 2209.16 1537.76 Q2209.16 1543.34 2205.69 1546.44 Q2202.22 1549.52 2195.9 1549.52 Q2193.72 1549.52 2191.45 1549.15 Q2189.21 1548.78 2186.8 1548.04 L2186.8 1543.34 Q2188.88 1544.47 2191.11 1545.03 Q2193.33 1545.58 2195.81 1545.58 Q2199.81 1545.58 2202.15 1543.48 Q2204.49 1541.37 2204.49 1537.76 Q2204.49 1534.15 2202.15 1532.04 Q2199.81 1529.94 2195.81 1529.94 Q2193.93 1529.94 2192.06 1530.35 Q2190.2 1530.77 2188.26 1531.65 L2188.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1445.72 2352.76,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1176.32 2352.76,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,906.93 2352.76,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,637.537 2352.76,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,368.145 2352.76,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,98.752 2352.76,98.752 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 172.015,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1445.72 190.912,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1176.32 190.912,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,906.93 190.912,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,637.537 190.912,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,368.145 190.912,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,98.752 190.912,98.752 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M124.07 1431.51 Q120.459 1431.51 118.631 1435.08 Q116.825 1438.62 116.825 1445.75 Q116.825 1452.86 118.631 1456.42 Q120.459 1459.96 124.07 1459.96 Q127.705 1459.96 129.51 1456.42 Q131.339 1452.86 131.339 1445.75 Q131.339 1438.62 129.51 1435.08 Q127.705 1431.51 124.07 1431.51 M124.07 1427.81 Q129.881 1427.81 132.936 1432.42 Q136.015 1437 136.015 1445.75 Q136.015 1454.48 132.936 1459.08 Q129.881 1463.67 124.07 1463.67 Q118.26 1463.67 115.182 1459.08 Q112.126 1454.48 112.126 1445.75 Q112.126 1437 115.182 1432.42 Q118.26 1427.81 124.07 1427.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M54.5569 1189.67 L62.1958 1189.67 L62.1958 1163.3 L53.8856 1164.97 L53.8856 1160.71 L62.1495 1159.04 L66.8254 1159.04 L66.8254 1189.67 L74.4642 1189.67 L74.4642 1193.6 L54.5569 1193.6 L54.5569 1189.67 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 1162.12 Q90.2975 1162.12 88.4688 1165.69 Q86.6632 1169.23 86.6632 1176.36 Q86.6632 1183.46 88.4688 1187.03 Q90.2975 1190.57 93.9086 1190.57 Q97.5428 1190.57 99.3483 1187.03 Q101.177 1183.46 101.177 1176.36 Q101.177 1169.23 99.3483 1165.69 Q97.5428 1162.12 93.9086 1162.12 M93.9086 1158.42 Q99.7187 1158.42 102.774 1163.02 Q105.853 1167.61 105.853 1176.36 Q105.853 1185.08 102.774 1189.69 Q99.7187 1194.27 93.9086 1194.27 Q88.0984 1194.27 85.0197 1189.69 Q81.9642 1185.08 81.9642 1176.36 Q81.9642 1167.61 85.0197 1163.02 Q88.0984 1158.42 93.9086 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 1162.12 Q120.459 1162.12 118.631 1165.69 Q116.825 1169.23 116.825 1176.36 Q116.825 1183.46 118.631 1187.03 Q120.459 1190.57 124.07 1190.57 Q127.705 1190.57 129.51 1187.03 Q131.339 1183.46 131.339 1176.36 Q131.339 1169.23 129.51 1165.69 Q127.705 1162.12 124.07 1162.12 M124.07 1158.42 Q129.881 1158.42 132.936 1163.02 Q136.015 1167.61 136.015 1176.36 Q136.015 1185.08 132.936 1189.69 Q129.881 1194.27 124.07 1194.27 Q118.26 1194.27 115.182 1189.69 Q112.126 1185.08 112.126 1176.36 Q112.126 1167.61 115.182 1163.02 Q118.26 1158.42 124.07 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M57.7745 920.275 L74.0939 920.275 L74.0939 924.21 L52.1495 924.21 L52.1495 920.275 Q54.8115 917.52 59.3949 912.891 Q64.0013 908.238 65.1819 906.895 Q67.4272 904.372 68.3068 902.636 Q69.2096 900.877 69.2096 899.187 Q69.2096 896.433 67.2652 894.696 Q65.3439 892.96 62.2421 892.96 Q60.043 892.96 57.5893 893.724 Q55.1588 894.488 52.381 896.039 L52.381 891.317 Q55.2051 890.183 57.6588 889.604 Q60.1124 889.025 62.1495 889.025 Q67.5198 889.025 70.7142 891.71 Q73.9087 894.396 73.9087 898.886 Q73.9087 901.016 73.0985 902.937 Q72.3115 904.835 70.205 907.428 Q69.6263 908.099 66.5245 911.317 Q63.4226 914.511 57.7745 920.275 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 892.729 Q90.2975 892.729 88.4688 896.294 Q86.6632 899.835 86.6632 906.965 Q86.6632 914.071 88.4688 917.636 Q90.2975 921.178 93.9086 921.178 Q97.5428 921.178 99.3483 917.636 Q101.177 914.071 101.177 906.965 Q101.177 899.835 99.3483 896.294 Q97.5428 892.729 93.9086 892.729 M93.9086 889.025 Q99.7187 889.025 102.774 893.632 Q105.853 898.215 105.853 906.965 Q105.853 915.692 102.774 920.298 Q99.7187 924.882 93.9086 924.882 Q88.0984 924.882 85.0197 920.298 Q81.9642 915.692 81.9642 906.965 Q81.9642 898.215 85.0197 893.632 Q88.0984 889.025 93.9086 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 892.729 Q120.459 892.729 118.631 896.294 Q116.825 899.835 116.825 906.965 Q116.825 914.071 118.631 917.636 Q120.459 921.178 124.07 921.178 Q127.705 921.178 129.51 917.636 Q131.339 914.071 131.339 906.965 Q131.339 899.835 129.51 896.294 Q127.705 892.729 124.07 892.729 M124.07 889.025 Q129.881 889.025 132.936 893.632 Q136.015 898.215 136.015 906.965 Q136.015 915.692 132.936 920.298 Q129.881 924.882 124.07 924.882 Q118.26 924.882 115.182 920.298 Q112.126 915.692 112.126 906.965 Q112.126 898.215 115.182 893.632 Q118.26 889.025 124.07 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M67.9133 636.183 Q71.2698 636.901 73.1448 639.169 Q75.0429 641.438 75.0429 644.771 Q75.0429 649.887 71.5244 652.688 Q68.0059 655.489 61.5245 655.489 Q59.3486 655.489 57.0338 655.049 Q54.7421 654.632 52.2884 653.776 L52.2884 649.262 Q54.2328 650.396 56.5477 650.975 Q58.8625 651.554 61.3856 651.554 Q65.7837 651.554 68.0754 649.817 Q70.3902 648.081 70.3902 644.771 Q70.3902 641.716 68.2374 640.003 Q66.1078 638.267 62.2884 638.267 L58.2606 638.267 L58.2606 634.424 L62.4735 634.424 Q65.9226 634.424 67.7513 633.058 Q69.58 631.669 69.58 629.077 Q69.58 626.415 67.6819 625.003 Q65.8069 623.568 62.2884 623.568 Q60.3671 623.568 58.168 623.984 Q55.969 624.401 53.3301 625.281 L53.3301 621.114 Q55.9921 620.373 58.3069 620.003 Q60.6449 619.632 62.705 619.632 Q68.0291 619.632 71.1309 622.063 Q74.2327 624.47 74.2327 628.591 Q74.2327 631.461 72.5892 633.452 Q70.9457 635.419 67.9133 636.183 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 623.336 Q90.2975 623.336 88.4688 626.901 Q86.6632 630.443 86.6632 637.572 Q86.6632 644.679 88.4688 648.243 Q90.2975 651.785 93.9086 651.785 Q97.5428 651.785 99.3483 648.243 Q101.177 644.679 101.177 637.572 Q101.177 630.443 99.3483 626.901 Q97.5428 623.336 93.9086 623.336 M93.9086 619.632 Q99.7187 619.632 102.774 624.239 Q105.853 628.822 105.853 637.572 Q105.853 646.299 102.774 650.905 Q99.7187 655.489 93.9086 655.489 Q88.0984 655.489 85.0197 650.905 Q81.9642 646.299 81.9642 637.572 Q81.9642 628.822 85.0197 624.239 Q88.0984 619.632 93.9086 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 623.336 Q120.459 623.336 118.631 626.901 Q116.825 630.443 116.825 637.572 Q116.825 644.679 118.631 648.243 Q120.459 651.785 124.07 651.785 Q127.705 651.785 129.51 648.243 Q131.339 644.679 131.339 637.572 Q131.339 630.443 129.51 626.901 Q127.705 623.336 124.07 623.336 M124.07 619.632 Q129.881 619.632 132.936 624.239 Q136.015 628.822 136.015 637.572 Q136.015 646.299 132.936 650.905 Q129.881 655.489 124.07 655.489 Q118.26 655.489 115.182 650.905 Q112.126 646.299 112.126 637.572 Q112.126 628.822 115.182 624.239 Q118.26 619.632 124.07 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M66.5939 354.939 L54.7884 373.388 L66.5939 373.388 L66.5939 354.939 M65.367 350.865 L71.2466 350.865 L71.2466 373.388 L76.1772 373.388 L76.1772 377.277 L71.2466 377.277 L71.2466 385.425 L66.5939 385.425 L66.5939 377.277 L50.9921 377.277 L50.9921 372.763 L65.367 350.865 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 353.943 Q90.2975 353.943 88.4688 357.508 Q86.6632 361.05 86.6632 368.179 Q86.6632 375.286 88.4688 378.851 Q90.2975 382.392 93.9086 382.392 Q97.5428 382.392 99.3483 378.851 Q101.177 375.286 101.177 368.179 Q101.177 361.05 99.3483 357.508 Q97.5428 353.943 93.9086 353.943 M93.9086 350.24 Q99.7187 350.24 102.774 354.846 Q105.853 359.429 105.853 368.179 Q105.853 376.906 102.774 381.513 Q99.7187 386.096 93.9086 386.096 Q88.0984 386.096 85.0197 381.513 Q81.9642 376.906 81.9642 368.179 Q81.9642 359.429 85.0197 354.846 Q88.0984 350.24 93.9086 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 353.943 Q120.459 353.943 118.631 357.508 Q116.825 361.05 116.825 368.179 Q116.825 375.286 118.631 378.851 Q120.459 382.392 124.07 382.392 Q127.705 382.392 129.51 378.851 Q131.339 375.286 131.339 368.179 Q131.339 361.05 129.51 357.508 Q127.705 353.943 124.07 353.943 M124.07 350.24 Q129.881 350.24 132.936 354.846 Q136.015 359.429 136.015 368.179 Q136.015 376.906 132.936 381.513 Q129.881 386.096 124.07 386.096 Q118.26 386.096 115.182 381.513 Q112.126 376.906 112.126 368.179 Q112.126 359.429 115.182 354.846 Q118.26 350.24 124.07 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M53.793 81.472 L72.1494 81.472 L72.1494 85.4072 L58.0754 85.4072 L58.0754 93.8793 Q59.0939 93.5321 60.1124 93.3701 Q61.131 93.1849 62.1495 93.1849 Q67.9365 93.1849 71.3161 96.3562 Q74.6957 99.5274 74.6957 104.944 Q74.6957 110.523 71.2235 113.625 Q67.7513 116.703 61.4319 116.703 Q59.256 116.703 56.9875 116.333 Q54.7421 115.963 52.3347 115.222 L52.3347 110.523 Q54.418 111.657 56.6402 112.213 Q58.8625 112.768 61.3393 112.768 Q65.3439 112.768 67.6819 110.662 Q70.0198 108.555 70.0198 104.944 Q70.0198 101.333 67.6819 99.2265 Q65.3439 97.1201 61.3393 97.1201 Q59.4643 97.1201 57.5893 97.5367 Q55.7375 97.9534 53.793 98.833 L53.793 81.472 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 84.5507 Q90.2975 84.5507 88.4688 88.1155 Q86.6632 91.6571 86.6632 98.7867 Q86.6632 105.893 88.4688 109.458 Q90.2975 113 93.9086 113 Q97.5428 113 99.3483 109.458 Q101.177 105.893 101.177 98.7867 Q101.177 91.6571 99.3483 88.1155 Q97.5428 84.5507 93.9086 84.5507 M93.9086 80.847 Q99.7187 80.847 102.774 85.4534 Q105.853 90.0368 105.853 98.7867 Q105.853 107.514 102.774 112.12 Q99.7187 116.703 93.9086 116.703 Q88.0984 116.703 85.0197 112.12 Q81.9642 107.514 81.9642 98.7867 Q81.9642 90.0368 85.0197 85.4534 Q88.0984 80.847 93.9086 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 84.5507 Q120.459 84.5507 118.631 88.1155 Q116.825 91.6571 116.825 98.7867 Q116.825 105.893 118.631 109.458 Q120.459 113 124.07 113 Q127.705 113 129.51 109.458 Q131.339 105.893 131.339 98.7867 Q131.339 91.6571 129.51 88.1155 Q127.705 84.5507 124.07 84.5507 M124.07 80.847 Q129.881 80.847 132.936 85.4534 Q136.015 90.0368 136.015 98.7867 Q136.015 107.514 132.936 112.12 Q129.881 116.703 124.07 116.703 Q118.26 116.703 115.182 112.12 Q112.126 107.514 112.126 98.7867 Q112.126 90.0368 115.182 85.4534 Q118.26 80.847 124.07 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip752)\" d=\"\nM291.959 109.528 L291.959 1445.72 L390.23 1445.72 L390.23 109.528 L291.959 109.528 L291.959 109.528  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  291.959,109.528 291.959,1445.72 390.23,1445.72 390.23,109.528 291.959,109.528 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM414.798 1445.72 L414.798 1445.72 L513.069 1445.72 L513.069 1445.72 L414.798 1445.72 L414.798 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  414.798,1445.72 414.798,1445.72 513.069,1445.72 414.798,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM537.637 1445.72 L537.637 1445.72 L635.908 1445.72 L635.908 1445.72 L537.637 1445.72 L537.637 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  537.637,1445.72 537.637,1445.72 635.908,1445.72 537.637,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM660.476 1445.72 L660.476 1445.72 L758.747 1445.72 L758.747 1445.72 L660.476 1445.72 L660.476 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  660.476,1445.72 660.476,1445.72 758.747,1445.72 660.476,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM783.314 1445.72 L783.314 1445.72 L881.585 1445.72 L881.585 1445.72 L783.314 1445.72 L783.314 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  783.314,1445.72 783.314,1445.72 881.585,1445.72 783.314,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM906.153 1445.72 L906.153 1445.72 L1004.42 1445.72 L1004.42 1445.72 L906.153 1445.72 L906.153 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  906.153,1445.72 906.153,1445.72 1004.42,1445.72 906.153,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1028.99 1445.72 L1028.99 1445.72 L1127.26 1445.72 L1127.26 1445.72 L1028.99 1445.72 L1028.99 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1028.99,1445.72 1028.99,1445.72 1127.26,1445.72 1028.99,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1151.83 1445.72 L1151.83 1445.72 L1250.1 1445.72 L1250.1 1445.72 L1151.83 1445.72 L1151.83 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1151.83,1445.72 1151.83,1445.72 1250.1,1445.72 1151.83,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1274.67 1445.72 L1274.67 1445.72 L1372.94 1445.72 L1372.94 1445.72 L1274.67 1445.72 L1274.67 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.67,1445.72 1274.67,1445.72 1372.94,1445.72 1274.67,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1397.51 1445.72 L1397.51 1445.72 L1495.78 1445.72 L1495.78 1445.72 L1397.51 1445.72 L1397.51 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1397.51,1445.72 1397.51,1445.72 1495.78,1445.72 1397.51,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1520.35 1445.72 L1520.35 1445.72 L1618.62 1445.72 L1618.62 1445.72 L1520.35 1445.72 L1520.35 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1520.35,1445.72 1520.35,1445.72 1618.62,1445.72 1520.35,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1643.19 1445.72 L1643.19 1445.72 L1741.46 1445.72 L1741.46 1445.72 L1643.19 1445.72 L1643.19 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1643.19,1445.72 1643.19,1445.72 1741.46,1445.72 1643.19,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1766.02 1445.72 L1766.02 1445.72 L1864.3 1445.72 L1864.3 1445.72 L1766.02 1445.72 L1766.02 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1766.02,1445.72 1766.02,1445.72 1864.3,1445.72 1766.02,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1888.86 1445.72 L1888.86 1445.72 L1987.13 1445.72 L1987.13 1445.72 L1888.86 1445.72 L1888.86 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1888.86,1445.72 1888.86,1445.72 1987.13,1445.72 1888.86,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2011.7 1445.72 L2011.7 1445.72 L2109.97 1445.72 L2109.97 1445.72 L2011.7 1445.72 L2011.7 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2011.7,1445.72 2011.7,1445.72 2109.97,1445.72 2011.7,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2134.54 87.9763 L2134.54 1445.72 L2232.81 1445.72 L2232.81 87.9763 L2134.54 87.9763 L2134.54 87.9763  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2134.54,87.9763 2134.54,1445.72 2232.81,1445.72 2232.81,87.9763 2134.54,87.9763 \n  \"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"279.676\" cy=\"109.528\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"402.514\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"525.353\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"648.192\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"771.03\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"893.869\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1016.71\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1139.55\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1262.39\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1385.22\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1508.06\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1630.9\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1753.74\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1876.58\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1999.42\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2122.26\" cy=\"87.9763\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2245.1\" cy=\"109.528\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"GHZ state will collapse to 0000 or 1111.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/3.grover-search/main.jl\"","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Grover","page":"Grover Search","title":"Grover Search","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"using Yao\nusing Yao.EasyBuild: variational_circuit\nusing LinearAlgebra","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Grover-Step","page":"Grover Search","title":"Grover Step","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"A single grover step is consist of applying oracle circuit and reflection circuit. The reflection_circuit function takes the wave function generator U as the input and returns U|0><0|U'.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function grover_step!(reg::AbstractRegister, oracle, U::AbstractBlock)\n    apply!(reg |> oracle, reflect_circuit(U))\nend\n\nfunction reflect_circuit(gen::AbstractBlock)\n    N = nqubits(gen)\n    reflect0 = control(N, -collect(1:N-1), N=>-Z)\n    chain(gen', reflect0, gen)\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"reflect_circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Compute the propotion of target states to estimate the number of iterations, which requires computing the output state.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function solution_state(oracle, gen::AbstractBlock)\n    N = nqubits(gen)\n    reg= zero_state(N) |> gen\n    reg.state[real.(statevec(ArrayReg(ones(ComplexF64, 1<<N)) |> oracle)) .> 0] .= 0\n    normalize!(reg)\nend\n\nfunction num_grover_step(oracle, gen::AbstractBlock)\n    N = nqubits(gen)\n    reg = zero_state(N) |> gen\n    ratio = abs2(solution_state(oracle, gen)'*reg)\n    Int(round(pi/4/sqrt(ratio)))-1\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_grover_step (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"First, we define the problem by an oracle, it finds bit string bit\"000001100100\".","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_bit = 12\noracle = matblock(Diagonal((v = ones(ComplexF64, 1<<num_bit); v[Int(bit\"000001100100\")+1]*=-1; v)))","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"matblock(...)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"then solve the above problem","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = repeat(num_bit, H, 1:num_bit)\nreg = zero_state(num_bit) |> gen\n\ntarget_state = solution_state(oracle, gen)\n\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    overlap = abs(reg'*target_state)\n    println(\"step $(i-1), overlap = $overlap\")\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.04685974121093736\nstep 1, overlap = 0.0780487209558483\nstep 2, overlap = 0.10916148124670066\nstep 3, overlap = 0.14016763852852288\nstep 4, overlap = 0.17103691335084453\nstep 5, overlap = 0.20173915993747182\nstep 6, overlap = 0.23224439562572258\nstep 7, overlap = 0.26252283014636996\nstep 8, overlap = 0.29254489471570244\nstep 9, overlap = 0.322281270911289\nstep 10, overlap = 0.35170291930325104\nstep 11, overlap = 0.3807811078130809\nstep 12, overlap = 0.40948743977231195\nstep 13, overlap = 0.4377938816536402\nstep 14, overlap = 0.46567279044741594\nstep 15, overlap = 0.49309694065677034\nstep 16, overlap = 0.5200395508850146\nstep 17, overlap = 0.5464743099893477\nstep 18, overlap = 0.5723754027753314\nstep 19, overlap = 0.5977175352070423\nstep 20, overlap = 0.6224759591082774\nstep 21, overlap = 0.6466264963306958\nstep 22, overlap = 0.6701455623652912\nstep 23, overlap = 0.6930101893741392\nstep 24, overlap = 0.7151980486199263\nstep 25, overlap = 0.7366874722713579\nstep 26, overlap = 0.7574574745631494\nstep 27, overlap = 0.7774877722899375\nstep 28, overlap = 0.7967588046140988\nstep 29, overlap = 0.8152517521681291\nstep 30, overlap = 0.8329485554329328\nstep 31, overlap = 0.8498319323740713\nstep 32, overlap = 0.8658853953187506\nstep 33, overlap = 0.8810932670570639\nstep 34, overlap = 0.8954406961517668\nstep 35, overlap = 0.9089136714416339\nstep 36, overlap = 0.9214990357242339\nstep 37, overlap = 0.9331844986047592\nstep 38, overlap = 0.9439586484983656\nstep 39, overlap = 0.953810963774298\nstep 40, overlap = 0.9627318230309194\nstep 41, overlap = 0.9707125144916121\nstep 42, overlap = 0.9777452445123718\nstep 43, overlap = 0.983823145192787\nstep 44, overlap = 0.9889402810829753\nstep 45, overlap = 0.9930916549799182\nstep 46, overlap = 0.9962732128075449\nstep 47, overlap = 0.9984818475757891\nstep 48, overlap = 0.9997154024147601\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Rejection-Sampling","page":"Grover Search","title":"Rejection Sampling","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In practise, it is often not possible to determine the number of iterations before actual running. we can use rejection sampling technique to avoid estimating the number of grover steps.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In a single try, we apply the grover algorithm for nstep times.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function single_try(oracle, gen::AbstractBlock, nstep::Int; nbatch::Int)\n    N = nqubits(gen)\n    reg = zero_state(N+1; nbatch)\n    focus(reg, (1:N...,)) do r\n        r |> gen\n        for i = 1:nstep\n            grover_step!(r, oracle, gen)\n        end\n        return r\n    end\n    reg |> checker\n    res = measure!(RemoveMeasured(), reg, (N+1))\n    return res, reg\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"single_try (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"After running the grover search, we have a checker program that flips the ancilla qubit if the output is the desired value, we assume the checker program can be implemented in polynomial time. to gaurante the output is correct. We contruct a checker \"program\", if the result is correct, flip the ancilla qubit","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ctrl = -collect(1:num_bit); ctrl[[3,6,7]] *= -1\nchecker = control(num_bit+1,ctrl, num_bit+1=>X)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 13\ncontrol(¬1, ¬2, 3, ¬4, ¬5, 6, 7, ¬8, ¬9, ¬10, ¬11, ¬12)\n└─ (13,) X","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The register is batched, with batch dimension nshot. focus! views the first 1-N qubts as system. For a batched register, measure! returns a vector of bitstring as output.","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run-2","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"maxtry = 100\nnshot = 3\n\nfor nstep = 0:maxtry\n    println(\"number of iter = $nstep\")\n    res, regi = single_try(oracle, gen, nstep; nbatch=3)\n\n    # success!\n    if any(==(1), res)\n        overlap_final = viewbatch(regi, findfirst(==(1), res))'*target_state\n        println(\"success, overlap = $(overlap_final)\")\n        break\n    end\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"number of iter = 0\nnumber of iter = 1\nnumber of iter = 2\nnumber of iter = 3\nnumber of iter = 4\nnumber of iter = 5\nnumber of iter = 6\nnumber of iter = 7\nsuccess, overlap = -1.0 + 0.0im\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The final state has an overlap of 1 with the target state.","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Amplitude-Amplification","page":"Grover Search","title":"Amplitude Amplification","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Given a circuit to generate a state, now we want to project out the subspace with [1,3,5,8,9,11,12] fixed to 1 and [4,6] fixed to 0. We can construct an oracle","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"evidense = [1, 3, -4, 5, -6, 8, 9, 11, 12]\nfunction inference_oracle(nbit::Int, locs::Vector{Int})\n    control(nbit, locs[1:end-1], abs(locs[end]) => (locs[end]>0 ? Z : -Z))\nend\noracle = inference_oracle(nqubits(reg), evidense)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 12\ncontrol(1, 3, ¬4, 5, ¬6, 8, 9, 11)\n└─ (12,) Z","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"We use a variational circuit generator defined in Yao.EasyBuild","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = dispatch!(variational_circuit(num_bit), :random)\nreg = zero_state(num_bit) |> gen","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 12/12\n    nlevel: 2","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run-3","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"solution = solution_state(oracle, gen)\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    println(\"step $(i-1), overlap = $(abs(reg'*solution))\")\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.14727396608461799\nstep 1, overlap = 0.24386840162082757\nstep 2, overlap = 0.3380967066803797\nstep 3, overlap = 0.42904463217284955\nstep 4, overlap = 0.5158297568543766\nstep 5, overlap = 0.5976100490100498\nstep 6, overlap = 0.6735920362573321\nstep 7, overlap = 0.7430385042031005\nstep 8, overlap = 0.8052756492581629\nstep 9, overlap = 0.8596996162091493\nstep 10, overlap = 0.9057823571170585\nstep 11, overlap = 0.9430767546965624\nstep 12, overlap = 0.9712209604665334\nstep 13, overlap = 0.9899419055809422\nstep 14, overlap = 0.9990579502763237\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/automatic_differentiation.html#Automatic-Differentiation","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Yao currently contains builtin automatic differentiation engine (an operator overloading based) especially for quantum circuits. It uses the reversible context of quantum computation to optimize the performance during simulation, thus you may find this is way faster than any other AD engine at the moment.","category":"page"},{"location":"man/automatic_differentiation.html#Builtin-Reverse-mode-AD-engine-for-simulation","page":"Automatic Differentiation","title":"Builtin Reverse mode AD engine for simulation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"As for expectation, the usage is pretty simple, since the evluation of expectations are just","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"to get the gradients, simply add an adjoint","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect'(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"which will return the pair of gradients, one is the gradient of input register and the other is the gradient of circuit parameters.","category":"page"},{"location":"man/automatic_differentiation.html#Integration-with-General-purpose-AD-engine","page":"Automatic Differentiation","title":"Integration with General purpose AD engine","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The builtin AD engine for Yao only provides the differentiation of quantum circuits, but you can plug it into a general AD engine, such as Zygote, since we have ported these rules to ChainRules.","category":"page"},{"location":"man/automatic_differentiation.html#APIs","page":"Automatic Differentiation","title":"APIs","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Modules = [YaoBlocks.AD]\nOrder = [:function, :macro]","category":"page"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.apply_back-Tuple{Tuple{AbstractArrayReg, AbstractArrayReg}, AbstractBlock}","page":"Automatic Differentiation","title":"YaoBlocks.AD.apply_back","text":"apply_back(st::Tuple{<:AbstractArrayReg, <:AbstractArrayReg}, block::AbstractBlock; kwargs...) -> (out, outδ), paramsδ\n\nThe backward function of apply!. Returns a tuple of ((input register, gradient of input register), parameter gradients)\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.generator-Tuple{RotationGate}","page":"Automatic Differentiation","title":"YaoBlocks.AD.generator","text":"generator(rot::Rotor) -> AbstractBlock\n\nReturn the generator of rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.mat_back-Union{Tuple{T}, Tuple{AbstractBlock, AbstractMatrix{T}}} where T","page":"Automatic Differentiation","title":"YaoBlocks.AD.mat_back","text":"mat_back([::Type{T}, ]block::AbstractBlock, adjm::AbstractMatrix) -> Vector\n\nThe backward function of mat. Returns the gradients of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.projection-Tuple{AbstractMatrix, AbstractMatrix}","page":"Automatic Differentiation","title":"YaoBlocks.AD.projection","text":"projection(y::AbstractMatrix, op::AbstractMatrix) -> typeof(y)\n\nProject op to sparse matrix with same sparsity as y.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.rotgrad-Union{Tuple{T}, Tuple{D}, Tuple{Type{T}, RotationGate{D, T, GT} where {T, GT<:AbstractBlock{D}}}} where {D, T}","page":"Automatic Differentiation","title":"YaoBlocks.AD.rotgrad","text":"The matrix gradient of a rotation block.\n\n\n\n\n\n","category":"method"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/6.quantum-circuit-born-machine/main.jl\"","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#qcbm","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Yao is designed with variational quantum circuits in mind, and this tutorial will introduce how to use Yao for this kind of task by implementing a quantum circuit born machine described in Jin-Guo Liu, Lei Wang (2018)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"let's use the packages first","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"using Yao, LinearAlgebra, Plots","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Training-Target","page":"Quantum Circuit Born Machine","title":"Training Target","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In this tutorial, we will ask the variational circuit to learn the most basic distribution: a guassian distribution. It is defined as follows:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"f(x left mu sigma^2right) = frac1sqrt2pisigma^2 e^-frac(x-mu)^22sigma^2","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We implement it as gaussian_pdf:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gaussian_pdf(x, μ::Real, σ::Real)\n    pl = @. 1 / sqrt(2pi * σ^2) * exp(-(x - μ)^2 / (2 * σ^2))\n    pl / sum(pl)\nend\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can plot the distribution, it looks like","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"plot(pg)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip790\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip791\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"\nM216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip792\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  244.907,1486.45 244.907,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  564.812,1486.45 564.812,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  884.716,1486.45 884.716,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1204.62,1486.45 1204.62,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1524.52,1486.45 1524.52,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1844.43,1486.45 1844.43,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2164.33,1486.45 2164.33,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  244.907,1486.45 244.907,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  564.812,1486.45 564.812,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  884.716,1486.45 884.716,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1204.62,1486.45 1204.62,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1524.52,1486.45 1524.52,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1844.43,1486.45 1844.43,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2164.33,1486.45 2164.33,1467.55 \n  \"/>\n<path clip-path=\"url(#clip790)\" d=\"M244.907 1517.37 Q241.296 1517.37 239.468 1520.93 Q237.662 1524.47 237.662 1531.6 Q237.662 1538.71 239.468 1542.27 Q241.296 1545.82 244.907 1545.82 Q248.542 1545.82 250.347 1542.27 Q252.176 1538.71 252.176 1531.6 Q252.176 1524.47 250.347 1520.93 Q248.542 1517.37 244.907 1517.37 M244.907 1513.66 Q250.718 1513.66 253.773 1518.27 Q256.852 1522.85 256.852 1531.6 Q256.852 1540.33 253.773 1544.94 Q250.718 1549.52 244.907 1549.52 Q239.097 1549.52 236.019 1544.94 Q232.963 1540.33 232.963 1531.6 Q232.963 1522.85 236.019 1518.27 Q239.097 1513.66 244.907 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M539.499 1544.91 L547.138 1544.91 L547.138 1518.55 L538.828 1520.21 L538.828 1515.95 L547.092 1514.29 L551.768 1514.29 L551.768 1544.91 L559.406 1544.91 L559.406 1548.85 L539.499 1548.85 L539.499 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M578.851 1517.37 Q575.24 1517.37 573.411 1520.93 Q571.605 1524.47 571.605 1531.6 Q571.605 1538.71 573.411 1542.27 Q575.24 1545.82 578.851 1545.82 Q582.485 1545.82 584.291 1542.27 Q586.119 1538.71 586.119 1531.6 Q586.119 1524.47 584.291 1520.93 Q582.485 1517.37 578.851 1517.37 M578.851 1513.66 Q584.661 1513.66 587.716 1518.27 Q590.795 1522.85 590.795 1531.6 Q590.795 1540.33 587.716 1544.94 Q584.661 1549.52 578.851 1549.52 Q573.041 1549.52 569.962 1544.94 Q566.906 1540.33 566.906 1531.6 Q566.906 1522.85 569.962 1518.27 Q573.041 1513.66 578.851 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M863.489 1544.91 L879.808 1544.91 L879.808 1548.85 L857.864 1548.85 L857.864 1544.91 Q860.526 1542.16 865.109 1537.53 Q869.716 1532.88 870.896 1531.53 Q873.142 1529.01 874.021 1527.27 Q874.924 1525.51 874.924 1523.82 Q874.924 1521.07 872.98 1519.33 Q871.058 1517.6 867.957 1517.6 Q865.757 1517.6 863.304 1518.36 Q860.873 1519.13 858.095 1520.68 L858.095 1515.95 Q860.92 1514.82 863.373 1514.24 Q865.827 1513.66 867.864 1513.66 Q873.234 1513.66 876.429 1516.35 Q879.623 1519.03 879.623 1523.52 Q879.623 1525.65 878.813 1527.57 Q878.026 1529.47 875.919 1532.07 Q875.341 1532.74 872.239 1535.95 Q869.137 1539.15 863.489 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M899.623 1517.37 Q896.012 1517.37 894.183 1520.93 Q892.378 1524.47 892.378 1531.6 Q892.378 1538.71 894.183 1542.27 Q896.012 1545.82 899.623 1545.82 Q903.257 1545.82 905.063 1542.27 Q906.891 1538.71 906.891 1531.6 Q906.891 1524.47 905.063 1520.93 Q903.257 1517.37 899.623 1517.37 M899.623 1513.66 Q905.433 1513.66 908.489 1518.27 Q911.567 1522.85 911.567 1531.6 Q911.567 1540.33 908.489 1544.94 Q905.433 1549.52 899.623 1549.52 Q893.813 1549.52 890.734 1544.94 Q887.679 1540.33 887.679 1531.6 Q887.679 1522.85 890.734 1518.27 Q893.813 1513.66 899.623 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1193.46 1530.21 Q1196.82 1530.93 1198.69 1533.2 Q1200.59 1535.47 1200.59 1538.8 Q1200.59 1543.92 1197.07 1546.72 Q1193.56 1549.52 1187.07 1549.52 Q1184.9 1549.52 1182.58 1549.08 Q1180.29 1548.66 1177.84 1547.81 L1177.84 1543.29 Q1179.78 1544.43 1182.1 1545.01 Q1184.41 1545.58 1186.93 1545.58 Q1191.33 1545.58 1193.62 1543.85 Q1195.94 1542.11 1195.94 1538.8 Q1195.94 1535.75 1193.79 1534.03 Q1191.66 1532.3 1187.84 1532.3 L1183.81 1532.3 L1183.81 1528.45 L1188.02 1528.45 Q1191.47 1528.45 1193.3 1527.09 Q1195.13 1525.7 1195.13 1523.11 Q1195.13 1520.45 1193.23 1519.03 Q1191.36 1517.6 1187.84 1517.6 Q1185.92 1517.6 1183.72 1518.01 Q1181.52 1518.43 1178.88 1519.31 L1178.88 1515.14 Q1181.54 1514.4 1183.86 1514.03 Q1186.19 1513.66 1188.25 1513.66 Q1193.58 1513.66 1196.68 1516.09 Q1199.78 1518.5 1199.78 1522.62 Q1199.78 1525.49 1198.14 1527.48 Q1196.49 1529.45 1193.46 1530.21 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1219.46 1517.37 Q1215.85 1517.37 1214.02 1520.93 Q1212.21 1524.47 1212.21 1531.6 Q1212.21 1538.71 1214.02 1542.27 Q1215.85 1545.82 1219.46 1545.82 Q1223.09 1545.82 1224.9 1542.27 Q1226.73 1538.71 1226.73 1531.6 Q1226.73 1524.47 1224.9 1520.93 Q1223.09 1517.37 1219.46 1517.37 M1219.46 1513.66 Q1225.27 1513.66 1228.32 1518.27 Q1231.4 1522.85 1231.4 1531.6 Q1231.4 1540.33 1228.32 1544.94 Q1225.27 1549.52 1219.46 1549.52 Q1213.65 1549.52 1210.57 1544.94 Q1207.51 1540.33 1207.51 1531.6 Q1207.51 1522.85 1210.57 1518.27 Q1213.65 1513.66 1219.46 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1512.7 1518.36 L1500.89 1536.81 L1512.7 1536.81 L1512.7 1518.36 M1511.47 1514.29 L1517.35 1514.29 L1517.35 1536.81 L1522.28 1536.81 L1522.28 1540.7 L1517.35 1540.7 L1517.35 1548.85 L1512.7 1548.85 L1512.7 1540.7 L1497.09 1540.7 L1497.09 1536.19 L1511.47 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1540.01 1517.37 Q1536.4 1517.37 1534.57 1520.93 Q1532.76 1524.47 1532.76 1531.6 Q1532.76 1538.71 1534.57 1542.27 Q1536.4 1545.82 1540.01 1545.82 Q1543.64 1545.82 1545.45 1542.27 Q1547.28 1538.71 1547.28 1531.6 Q1547.28 1524.47 1545.45 1520.93 Q1543.64 1517.37 1540.01 1517.37 M1540.01 1513.66 Q1545.82 1513.66 1548.88 1518.27 Q1551.95 1522.85 1551.95 1531.6 Q1551.95 1540.33 1548.88 1544.94 Q1545.82 1549.52 1540.01 1549.52 Q1534.2 1549.52 1531.12 1544.94 Q1528.07 1540.33 1528.07 1531.6 Q1528.07 1522.85 1531.12 1518.27 Q1534.2 1513.66 1540.01 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.13 1514.29 L1837.48 1514.29 L1837.48 1518.22 L1823.41 1518.22 L1823.41 1526.7 Q1824.43 1526.35 1825.45 1526.19 Q1826.47 1526 1827.48 1526 Q1833.27 1526 1836.65 1529.17 Q1840.03 1532.34 1840.03 1537.76 Q1840.03 1543.34 1836.56 1546.44 Q1833.09 1549.52 1826.77 1549.52 Q1824.59 1549.52 1822.32 1549.15 Q1820.08 1548.78 1817.67 1548.04 L1817.67 1543.34 Q1819.75 1544.47 1821.97 1545.03 Q1824.2 1545.58 1826.67 1545.58 Q1830.68 1545.58 1833.02 1543.48 Q1835.35 1541.37 1835.35 1537.76 Q1835.35 1534.15 1833.02 1532.04 Q1830.68 1529.94 1826.67 1529.94 Q1824.8 1529.94 1822.92 1530.35 Q1821.07 1530.77 1819.13 1531.65 L1819.13 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1859.24 1517.37 Q1855.63 1517.37 1853.8 1520.93 Q1852 1524.47 1852 1531.6 Q1852 1538.71 1853.8 1542.27 Q1855.63 1545.82 1859.24 1545.82 Q1862.88 1545.82 1864.68 1542.27 Q1866.51 1538.71 1866.51 1531.6 Q1866.51 1524.47 1864.68 1520.93 Q1862.88 1517.37 1859.24 1517.37 M1859.24 1513.66 Q1865.05 1513.66 1868.11 1518.27 Q1871.19 1522.85 1871.19 1531.6 Q1871.19 1540.33 1868.11 1544.94 Q1865.05 1549.52 1859.24 1549.52 Q1853.43 1549.52 1850.35 1544.94 Q1847.3 1540.33 1847.3 1531.6 Q1847.3 1522.85 1850.35 1518.27 Q1853.43 1513.66 1859.24 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2149.74 1529.7 Q2146.59 1529.7 2144.74 1531.86 Q2142.91 1534.01 2142.91 1537.76 Q2142.91 1541.49 2144.74 1543.66 Q2146.59 1545.82 2149.74 1545.82 Q2152.89 1545.82 2154.71 1543.66 Q2156.57 1541.49 2156.57 1537.76 Q2156.57 1534.01 2154.71 1531.86 Q2152.89 1529.7 2149.74 1529.7 M2159.02 1515.05 L2159.02 1519.31 Q2157.26 1518.48 2155.46 1518.04 Q2153.67 1517.6 2151.91 1517.6 Q2147.28 1517.6 2144.83 1520.72 Q2142.4 1523.85 2142.05 1530.17 Q2143.42 1528.15 2145.48 1527.09 Q2147.54 1526 2150.02 1526 Q2155.22 1526 2158.23 1529.17 Q2161.27 1532.32 2161.27 1537.76 Q2161.27 1543.08 2158.12 1546.3 Q2154.97 1549.52 2149.74 1549.52 Q2143.74 1549.52 2140.57 1544.94 Q2137.4 1540.33 2137.4 1531.6 Q2137.4 1523.41 2141.29 1518.55 Q2145.18 1513.66 2151.73 1513.66 Q2153.49 1513.66 2155.27 1514.01 Q2157.08 1514.36 2159.02 1515.05 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2179.32 1517.37 Q2175.71 1517.37 2173.88 1520.93 Q2172.08 1524.47 2172.08 1531.6 Q2172.08 1538.71 2173.88 1542.27 Q2175.71 1545.82 2179.32 1545.82 Q2182.95 1545.82 2184.76 1542.27 Q2186.59 1538.71 2186.59 1531.6 Q2186.59 1524.47 2184.76 1520.93 Q2182.95 1517.37 2179.32 1517.37 M2179.32 1513.66 Q2185.13 1513.66 2188.19 1518.27 Q2191.27 1522.85 2191.27 1531.6 Q2191.27 1540.33 2188.19 1544.94 Q2185.13 1549.52 2179.32 1549.52 Q2173.51 1549.52 2170.43 1544.94 Q2167.38 1540.33 2167.38 1531.6 Q2167.38 1522.85 2170.43 1518.27 Q2173.51 1513.66 2179.32 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1345.72 2352.76,1345.72 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1047.96 2352.76,1047.96 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,750.205 2352.76,750.205 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,452.448 2352.76,452.448 \n  \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,154.692 2352.76,154.692 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 216.436,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1345.72 235.334,1345.72 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1047.96 235.334,1047.96 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,750.205 235.334,750.205 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,452.448 235.334,452.448 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,154.692 235.334,154.692 \n  \"/>\n<path clip-path=\"url(#clip790)\" d=\"M63.9319 1331.52 Q60.3208 1331.52 58.4921 1335.08 Q56.6865 1338.62 56.6865 1345.75 Q56.6865 1352.86 58.4921 1356.42 Q60.3208 1359.97 63.9319 1359.97 Q67.5661 1359.97 69.3717 1356.42 Q71.2004 1352.86 71.2004 1345.75 Q71.2004 1338.62 69.3717 1335.08 Q67.5661 1331.52 63.9319 1331.52 M63.9319 1327.81 Q69.742 1327.81 72.7976 1332.42 Q75.8763 1337 75.8763 1345.75 Q75.8763 1354.48 72.7976 1359.09 Q69.742 1363.67 63.9319 1363.67 Q58.1217 1363.67 55.043 1359.09 Q51.9875 1354.48 51.9875 1345.75 Q51.9875 1337 55.043 1332.42 Q58.1217 1327.81 63.9319 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M84.0938 1357.12 L88.978 1357.12 L88.978 1363 L84.0938 1363 L84.0938 1357.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M109.163 1331.52 Q105.552 1331.52 103.723 1335.08 Q101.918 1338.62 101.918 1345.75 Q101.918 1352.86 103.723 1356.42 Q105.552 1359.97 109.163 1359.97 Q112.797 1359.97 114.603 1356.42 Q116.432 1352.86 116.432 1345.75 Q116.432 1338.62 114.603 1335.08 Q112.797 1331.52 109.163 1331.52 M109.163 1327.81 Q114.973 1327.81 118.029 1332.42 Q121.107 1337 121.107 1345.75 Q121.107 1354.48 118.029 1359.09 Q114.973 1363.67 109.163 1363.67 Q103.353 1363.67 100.274 1359.09 Q97.2187 1354.48 97.2187 1345.75 Q97.2187 1337 100.274 1332.42 Q103.353 1327.81 109.163 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M139.325 1331.52 Q135.714 1331.52 133.885 1335.08 Q132.08 1338.62 132.08 1345.75 Q132.08 1352.86 133.885 1356.42 Q135.714 1359.97 139.325 1359.97 Q142.959 1359.97 144.765 1356.42 Q146.593 1352.86 146.593 1345.75 Q146.593 1338.62 144.765 1335.08 Q142.959 1331.52 139.325 1331.52 M139.325 1327.81 Q145.135 1327.81 148.191 1332.42 Q151.269 1337 151.269 1345.75 Q151.269 1354.48 148.191 1359.09 Q145.135 1363.67 139.325 1363.67 Q133.515 1363.67 130.436 1359.09 Q127.381 1354.48 127.381 1345.75 Q127.381 1337 130.436 1332.42 Q133.515 1327.81 139.325 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M159.533 1328.44 L177.89 1328.44 L177.89 1332.37 L163.816 1332.37 L163.816 1340.85 Q164.834 1340.5 165.853 1340.34 Q166.871 1340.15 167.89 1340.15 Q173.677 1340.15 177.056 1343.32 Q180.436 1346.49 180.436 1351.91 Q180.436 1357.49 176.964 1360.59 Q173.491 1363.67 167.172 1363.67 Q164.996 1363.67 162.728 1363.3 Q160.482 1362.93 158.075 1362.19 L158.075 1357.49 Q160.158 1358.62 162.38 1359.18 Q164.603 1359.73 167.079 1359.73 Q171.084 1359.73 173.422 1357.63 Q175.76 1355.52 175.76 1351.91 Q175.76 1348.3 173.422 1346.19 Q171.084 1344.09 167.079 1344.09 Q165.204 1344.09 163.329 1344.5 Q161.478 1344.92 159.533 1345.8 L159.533 1328.44 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M62.9365 1033.76 Q59.3254 1033.76 57.4967 1037.33 Q55.6912 1040.87 55.6912 1048 Q55.6912 1055.1 57.4967 1058.67 Q59.3254 1062.21 62.9365 1062.21 Q66.5707 1062.21 68.3763 1058.67 Q70.205 1055.1 70.205 1048 Q70.205 1040.87 68.3763 1037.33 Q66.5707 1033.76 62.9365 1033.76 M62.9365 1030.06 Q68.7467 1030.06 71.8022 1034.66 Q74.8809 1039.25 74.8809 1048 Q74.8809 1056.72 71.8022 1061.33 Q68.7467 1065.91 62.9365 1065.91 Q57.1264 1065.91 54.0477 1061.33 Q50.9921 1056.72 50.9921 1048 Q50.9921 1039.25 54.0477 1034.66 Q57.1264 1030.06 62.9365 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M83.0984 1059.36 L87.9827 1059.36 L87.9827 1065.24 L83.0984 1065.24 L83.0984 1059.36 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M108.168 1033.76 Q104.557 1033.76 102.728 1037.33 Q100.922 1040.87 100.922 1048 Q100.922 1055.1 102.728 1058.67 Q104.557 1062.21 108.168 1062.21 Q111.802 1062.21 113.608 1058.67 Q115.436 1055.1 115.436 1048 Q115.436 1040.87 113.608 1037.33 Q111.802 1033.76 108.168 1033.76 M108.168 1030.06 Q113.978 1030.06 117.033 1034.66 Q120.112 1039.25 120.112 1048 Q120.112 1056.72 117.033 1061.33 Q113.978 1065.91 108.168 1065.91 Q102.358 1065.91 99.2789 1061.33 Q96.2234 1056.72 96.2234 1048 Q96.2234 1039.25 99.2789 1034.66 Q102.358 1030.06 108.168 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M129.14 1061.31 L136.779 1061.31 L136.779 1034.94 L128.469 1036.61 L128.469 1032.35 L136.732 1030.68 L141.408 1030.68 L141.408 1061.31 L149.047 1061.31 L149.047 1065.24 L129.14 1065.24 L129.14 1061.31 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M168.491 1033.76 Q164.88 1033.76 163.052 1037.33 Q161.246 1040.87 161.246 1048 Q161.246 1055.1 163.052 1058.67 Q164.88 1062.21 168.491 1062.21 Q172.126 1062.21 173.931 1058.67 Q175.76 1055.1 175.76 1048 Q175.76 1040.87 173.931 1037.33 Q172.126 1033.76 168.491 1033.76 M168.491 1030.06 Q174.302 1030.06 177.357 1034.66 Q180.436 1039.25 180.436 1048 Q180.436 1056.72 177.357 1061.33 Q174.302 1065.91 168.491 1065.91 Q162.681 1065.91 159.603 1061.33 Q156.547 1056.72 156.547 1048 Q156.547 1039.25 159.603 1034.66 Q162.681 1030.06 168.491 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M63.9319 736.004 Q60.3208 736.004 58.4921 739.569 Q56.6865 743.11 56.6865 750.24 Q56.6865 757.346 58.4921 760.911 Q60.3208 764.453 63.9319 764.453 Q67.5661 764.453 69.3717 760.911 Q71.2004 757.346 71.2004 750.24 Q71.2004 743.11 69.3717 739.569 Q67.5661 736.004 63.9319 736.004 M63.9319 732.3 Q69.742 732.3 72.7976 736.907 Q75.8763 741.49 75.8763 750.24 Q75.8763 758.967 72.7976 763.573 Q69.742 768.156 63.9319 768.156 Q58.1217 768.156 55.043 763.573 Q51.9875 758.967 51.9875 750.24 Q51.9875 741.49 55.043 736.907 Q58.1217 732.3 63.9319 732.3 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M84.0938 761.606 L88.978 761.606 L88.978 767.485 L84.0938 767.485 L84.0938 761.606 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M109.163 736.004 Q105.552 736.004 103.723 739.569 Q101.918 743.11 101.918 750.24 Q101.918 757.346 103.723 760.911 Q105.552 764.453 109.163 764.453 Q112.797 764.453 114.603 760.911 Q116.432 757.346 116.432 750.24 Q116.432 743.11 114.603 739.569 Q112.797 736.004 109.163 736.004 M109.163 732.3 Q114.973 732.3 118.029 736.907 Q121.107 741.49 121.107 750.24 Q121.107 758.967 118.029 763.573 Q114.973 768.156 109.163 768.156 Q103.353 768.156 100.274 763.573 Q97.2187 758.967 97.2187 750.24 Q97.2187 741.49 100.274 736.907 Q103.353 732.3 109.163 732.3 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M130.135 763.55 L137.774 763.55 L137.774 737.184 L129.464 738.851 L129.464 734.592 L137.728 732.925 L142.404 732.925 L142.404 763.55 L150.043 763.55 L150.043 767.485 L130.135 767.485 L130.135 763.55 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M159.533 732.925 L177.89 732.925 L177.89 736.86 L163.816 736.86 L163.816 745.332 Q164.834 744.985 165.853 744.823 Q166.871 744.638 167.89 744.638 Q173.677 744.638 177.056 747.809 Q180.436 750.981 180.436 756.397 Q180.436 761.976 176.964 765.078 Q173.491 768.156 167.172 768.156 Q164.996 768.156 162.728 767.786 Q160.482 767.416 158.075 766.675 L158.075 761.976 Q160.158 763.11 162.38 763.666 Q164.603 764.221 167.079 764.221 Q171.084 764.221 173.422 762.115 Q175.76 760.008 175.76 756.397 Q175.76 752.786 173.422 750.68 Q171.084 748.573 167.079 748.573 Q165.204 748.573 163.329 748.99 Q161.478 749.407 159.533 750.286 L159.533 732.925 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M62.9365 438.247 Q59.3254 438.247 57.4967 441.812 Q55.6912 445.354 55.6912 452.483 Q55.6912 459.59 57.4967 463.154 Q59.3254 466.696 62.9365 466.696 Q66.5707 466.696 68.3763 463.154 Q70.205 459.59 70.205 452.483 Q70.205 445.354 68.3763 441.812 Q66.5707 438.247 62.9365 438.247 M62.9365 434.543 Q68.7467 434.543 71.8022 439.15 Q74.8809 443.733 74.8809 452.483 Q74.8809 461.21 71.8022 465.816 Q68.7467 470.4 62.9365 470.4 Q57.1264 470.4 54.0477 465.816 Q50.9921 461.21 50.9921 452.483 Q50.9921 443.733 54.0477 439.15 Q57.1264 434.543 62.9365 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M83.0984 463.849 L87.9827 463.849 L87.9827 469.728 L83.0984 469.728 L83.0984 463.849 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M108.168 438.247 Q104.557 438.247 102.728 441.812 Q100.922 445.354 100.922 452.483 Q100.922 459.59 102.728 463.154 Q104.557 466.696 108.168 466.696 Q111.802 466.696 113.608 463.154 Q115.436 459.59 115.436 452.483 Q115.436 445.354 113.608 441.812 Q111.802 438.247 108.168 438.247 M108.168 434.543 Q113.978 434.543 117.033 439.15 Q120.112 443.733 120.112 452.483 Q120.112 461.21 117.033 465.816 Q113.978 470.4 108.168 470.4 Q102.358 470.4 99.2789 465.816 Q96.2234 461.21 96.2234 452.483 Q96.2234 443.733 99.2789 439.15 Q102.358 434.543 108.168 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M132.357 465.793 L148.677 465.793 L148.677 469.728 L126.732 469.728 L126.732 465.793 Q129.394 463.039 133.978 458.409 Q138.584 453.756 139.765 452.414 Q142.01 449.891 142.89 448.155 Q143.793 446.395 143.793 444.705 Q143.793 441.951 141.848 440.215 Q139.927 438.479 136.825 438.479 Q134.626 438.479 132.172 439.243 Q129.742 440.006 126.964 441.557 L126.964 436.835 Q129.788 435.701 132.242 435.122 Q134.695 434.543 136.732 434.543 Q142.103 434.543 145.297 437.229 Q148.492 439.914 148.492 444.405 Q148.492 446.534 147.681 448.455 Q146.894 450.354 144.788 452.946 Q144.209 453.617 141.107 456.835 Q138.006 460.029 132.357 465.793 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M168.491 438.247 Q164.88 438.247 163.052 441.812 Q161.246 445.354 161.246 452.483 Q161.246 459.59 163.052 463.154 Q164.88 466.696 168.491 466.696 Q172.126 466.696 173.931 463.154 Q175.76 459.59 175.76 452.483 Q175.76 445.354 173.931 441.812 Q172.126 438.247 168.491 438.247 M168.491 434.543 Q174.302 434.543 177.357 439.15 Q180.436 443.733 180.436 452.483 Q180.436 461.21 177.357 465.816 Q174.302 470.4 168.491 470.4 Q162.681 470.4 159.603 465.816 Q156.547 461.21 156.547 452.483 Q156.547 443.733 159.603 439.15 Q162.681 434.543 168.491 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M63.9319 140.49 Q60.3208 140.49 58.4921 144.055 Q56.6865 147.597 56.6865 154.727 Q56.6865 161.833 58.4921 165.398 Q60.3208 168.939 63.9319 168.939 Q67.5661 168.939 69.3717 165.398 Q71.2004 161.833 71.2004 154.727 Q71.2004 147.597 69.3717 144.055 Q67.5661 140.49 63.9319 140.49 M63.9319 136.787 Q69.742 136.787 72.7976 141.393 Q75.8763 145.977 75.8763 154.727 Q75.8763 163.453 72.7976 168.06 Q69.742 172.643 63.9319 172.643 Q58.1217 172.643 55.043 168.06 Q51.9875 163.453 51.9875 154.727 Q51.9875 145.977 55.043 141.393 Q58.1217 136.787 63.9319 136.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M84.0938 166.092 L88.978 166.092 L88.978 171.972 L84.0938 171.972 L84.0938 166.092 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M109.163 140.49 Q105.552 140.49 103.723 144.055 Q101.918 147.597 101.918 154.727 Q101.918 161.833 103.723 165.398 Q105.552 168.939 109.163 168.939 Q112.797 168.939 114.603 165.398 Q116.432 161.833 116.432 154.727 Q116.432 147.597 114.603 144.055 Q112.797 140.49 109.163 140.49 M109.163 136.787 Q114.973 136.787 118.029 141.393 Q121.107 145.977 121.107 154.727 Q121.107 163.453 118.029 168.06 Q114.973 172.643 109.163 172.643 Q103.353 172.643 100.274 168.06 Q97.2187 163.453 97.2187 154.727 Q97.2187 145.977 100.274 141.393 Q103.353 136.787 109.163 136.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M133.353 168.037 L149.672 168.037 L149.672 171.972 L127.728 171.972 L127.728 168.037 Q130.39 165.282 134.973 160.652 Q139.58 156 140.76 154.657 Q143.006 152.134 143.885 150.398 Q144.788 148.639 144.788 146.949 Q144.788 144.194 142.843 142.458 Q140.922 140.722 137.82 140.722 Q135.621 140.722 133.168 141.486 Q130.737 142.25 127.959 143.801 L127.959 139.078 Q130.783 137.944 133.237 137.366 Q135.691 136.787 137.728 136.787 Q143.098 136.787 146.293 139.472 Q149.487 142.157 149.487 146.648 Q149.487 148.777 148.677 150.699 Q147.89 152.597 145.783 155.189 Q145.205 155.861 142.103 159.078 Q139.001 162.273 133.353 168.037 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M159.533 137.412 L177.89 137.412 L177.89 141.347 L163.816 141.347 L163.816 149.819 Q164.834 149.472 165.853 149.31 Q166.871 149.125 167.89 149.125 Q173.677 149.125 177.056 152.296 Q180.436 155.467 180.436 160.884 Q180.436 166.463 176.964 169.564 Q173.491 172.643 167.172 172.643 Q164.996 172.643 162.728 172.273 Q160.482 171.902 158.075 171.162 L158.075 166.463 Q160.158 167.597 162.38 168.152 Q164.603 168.708 167.079 168.708 Q171.084 168.708 173.422 166.601 Q175.76 164.495 175.76 160.884 Q175.76 157.273 173.422 155.166 Q171.084 153.06 167.079 153.06 Q165.204 153.06 163.329 153.477 Q161.478 153.893 159.533 154.773 L159.533 137.412 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  276.898,1390.54 308.888,1359.09 340.879,1324.98 372.869,1288.17 404.859,1248.64 436.85,1206.44 468.84,1161.6 500.831,1114.24 532.821,1064.49 564.812,1012.54 \n  596.802,958.598 628.792,902.947 660.783,845.895 692.773,787.796 724.764,729.045 756.754,670.069 788.744,611.329 820.735,553.312 852.725,496.522 884.716,441.479 \n  916.706,388.705 948.697,338.72 980.687,292.034 1012.68,249.135 1044.67,210.482 1076.66,176.5 1108.65,147.567 1140.64,124.009 1172.63,106.098 1204.62,94.0406 \n  1236.61,87.9763 1268.6,87.9763 1300.59,94.0406 1332.58,106.098 1364.57,124.009 1396.56,147.567 1428.55,176.5 1460.54,210.482 1492.53,249.135 1524.52,292.034 \n  1556.51,338.72 1588.5,388.705 1620.5,441.479 1652.49,496.522 1684.48,553.312 1716.47,611.329 1748.46,670.069 1780.45,729.045 1812.44,787.796 1844.43,845.895 \n  1876.42,902.947 1908.41,958.598 1940.4,1012.54 1972.39,1064.49 2004.38,1114.24 2036.37,1161.6 2068.36,1206.44 2100.35,1248.64 2132.34,1288.17 2164.33,1324.98 \n  2196.32,1359.09 2228.31,1390.54 2260.3,1419.38 2292.29,1445.72 \n  \"/>\n<path clip-path=\"url(#clip790)\" d=\"\nM1991.75 198.898 L2281.55 198.898 L2281.55 95.2176 L1991.75 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1991.75,198.898 2281.55,198.898 2281.55,95.2176 1991.75,95.2176 1991.75,198.898 \n  \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2015.48,147.058 2157.9,147.058 \n  \"/>\n<path clip-path=\"url(#clip790)\" d=\"M2195.48 166.745 Q2193.68 171.375 2191.97 172.787 Q2190.25 174.199 2187.38 174.199 L2183.98 174.199 L2183.98 170.634 L2186.48 170.634 Q2188.24 170.634 2189.21 169.8 Q2190.18 168.967 2191.36 165.865 L2192.13 163.921 L2181.64 138.412 L2186.16 138.412 L2194.26 158.689 L2202.36 138.412 L2206.87 138.412 L2195.48 166.745 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2214.16 160.402 L2221.8 160.402 L2221.8 134.037 L2213.49 135.703 L2213.49 131.444 L2221.76 129.778 L2226.43 129.778 L2226.43 160.402 L2234.07 160.402 L2234.07 164.338 L2214.16 164.338 L2214.16 160.402 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Create-the-Circuit","page":"Quantum Circuit Born Machine","title":"Create the Circuit","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"A quantum circuit born machine looks like the following:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: differentiable ciruit)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"It is composited by two different layers: rotation layer and entangler layer.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Rotation-Layer","page":"Quantum Circuit Born Machine","title":"Rotation Layer","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Arbitrary rotation is built with Rotation Gate on Z, X, Z axis with parameters.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rz(theta) cdot Rx(theta) cdot Rz(theta)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Since our input will be a 0dots 0rangle state. The first layer of arbitrary rotation can just use Rx(theta) cdot Rz(theta) and the last layer of arbitrary rotation could just use Rz(theta)cdot Rx(theta)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In 幺, every Hilbert operator is a block type, this ncludes all quantum gates and quantum oracles. In general, operators appears in a quantum circuit can be divided into Composite Blocks and Primitive Blocks.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We follow the low abstraction principle and thus each block represents a certain approach of calculation. The simplest Composite Block is a Chain Block, which chains other blocks (oracles) with the same number of qubits together. It is just a simple mathematical composition of operators with same size. e.g.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"textchain(X Y Z) iff X cdot Y cdot Z","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can construct an arbitrary rotation block by chain Rz, Rx, Rz together.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"chain(Rz(0.0), Rx(0.0), Rz(0.0))","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 1\nchain\n├─ rot(Z, 0.0)\n├─ rot(X, 0.0)\n└─ rot(Z, 0.0)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rx, Rz will construct new rotation gate, which are just shorthands for rot(X, 0.0), etc.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Then let's chain them up","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, x::Symbol) = layer(nbit, Val(x))\nlayer(nbit::Int, ::Val{:first}) = chain(nbit, put(i=>chain(Rx(0), Rz(0))) for i = 1:nbit);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We do not need to feed the first n parameter into put here. All factory methods can be lazy evaluate the first arguements, which is the number of qubits. It will return a lambda function that requires a single interger input. The instance of desired block will only be constructed until all the information is filled. When you filled all the information in somewhere of the declaration, 幺 will be able to infer the others. We will now define the rest of rotation layers","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, ::Val{:last}) = chain(nbit, put(i=>chain(Rz(0), Rx(0))) for i = 1:nbit)\nlayer(nbit::Int, ::Val{:mid}) = chain(nbit, put(i=>chain(Rz(0), Rx(0), Rz(0))) for i = 1:nbit);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Entangler","page":"Quantum Circuit Born Machine","title":"Entangler","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Another component of quantum circuit born machine are several CNOT operators applied on different qubits.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"entangler(pairs) = chain(control(ctrl, target=>X) for (ctrl, target) in pairs);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can then define such a born machine","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function build_circuit(n, nlayers, pairs)\n    circuit = chain(n)\n    push!(circuit, layer(n, :first))\n    for i in 2:nlayers\n        push!(circuit, cache(entangler(pairs)))\n        push!(circuit, layer(n, :mid))\n    end\n    push!(circuit, cache(entangler(pairs)))\n    push!(circuit, layer(n, :last))\n    return circuit\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We use the method cache here to tag the entangler block that it should be cached after its first run, because it is actually a constant oracle. Let's see what will be constructed","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit(4, 1, [1=>2, 2=>3, 3=>4])","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (2)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (3)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  └─ put on (4)\n│     └─ chain\n│        ├─ rot(X, 0.0)\n│        └─ rot(Z, 0.0)\n├─ [cached] chain\n│     ├─ control(1)\n│     │  └─ (2,) X\n│     ├─ control(2)\n│     │  └─ (3,) X\n│     └─ control(3)\n│        └─ (4,) X\n└─ chain\n   ├─ put on (1)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (2)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (3)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   └─ put on (4)\n      └─ chain\n         ├─ rot(Z, 0.0)\n         └─ rot(X, 0.0)\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#MMD-Loss-and-Gradients","page":"Quantum Circuit Born Machine","title":"MMD Loss & Gradients","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The MMD loss is describe below:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nmathcalL = left sum_x p theta(x) phi(x) - sum_x pi(x) phi(x) right^2\n            = langle K(x y) rangle_x sim p_theta ysim p_theta - 2 langle K(x y) rangle_xsim p_theta ysim pi + langle K(x y) rangle_xsimpi ysimpi\nendaligned","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We will use a squared exponential kernel here.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"struct RBFKernel\n    σ::Float64\n    m::Matrix{Float64}\nend\n\nfunction RBFKernel(σ::Float64, space)\n    dx2 = (space .- space').^2\n    return RBFKernel(σ, exp.(-1/2σ * dx2))\nend\n\nkexpect(κ::RBFKernel, x, y) = x' * κ.m * y","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"kexpect (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"There are two different way to define the loss:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In simulation we can use the probability distribution of the state directly","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"get_prob(qcbm) = probs(zero_state(nqubits(qcbm)) |> qcbm)\n\nfunction loss(κ, c, target)\n    p = get_prob(c) - target\n    return kexpect(κ, p, p)\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"loss (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Or if you want to simulate the whole process with measurement (which is entirely physical), you should define the loss with measurement results, for convenience we directly use the simulated results as our loss","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Gradients","page":"Quantum Circuit Born Machine","title":"Gradients","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"the gradient of MMD loss is","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nfracpartial mathcalLpartial theta^i_l = langle K(x y) rangle_xsim p_theta^+ ysim p_theta - langle K(x y) rangle_xsim p_theta^- ysim p_theta\n- langle K(x y) rangle _xsim p_theta^+ ysimpi + langle K(x y) rangle_xsim p_theta^- ysimpi\nendaligned","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"which can be implemented as","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gradient(qcbm, κ, ptrain)\n    n = nqubits(qcbm)\n    prob = get_prob(qcbm)\n    grad = zeros(Float64, nparameters(qcbm))\n\n    count = 1\n    for k in 1:2:length(qcbm), each_line in qcbm[k], gate in content(each_line)\n        dispatch!(+, gate, π/2)\n        prob_pos = probs(zero_state(n) |> qcbm)\n\n        dispatch!(-, gate, π)\n        prob_neg = probs(zero_state(n) |> qcbm)\n\n        dispatch!(+, gate, π/2) # set back\n\n        grad_pos = kexpect(κ, prob, prob_pos) - kexpect(κ, prob, prob_neg)\n        grad_neg = kexpect(κ, ptrain, prob_pos) - kexpect(κ, ptrain, prob_neg)\n        grad[count] = grad_pos - grad_neg\n        count += 1\n    end\n    return grad\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"gradient (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Now let's setup the training","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"import Optimisers\nqcbm = build_circuit(6, 10, [1=>2, 3=>4, 5=>6, 2=>3, 4=>5, 6=>1])\ndispatch!(qcbm, :random) # initialize the parameters\n\nκ = RBFKernel(0.25, 0:2^6-1)\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);\nopt = Optimisers.setup(Optimisers.ADAM(0.01), parameters(qcbm));\n\nfunction train(qcbm, κ, opt, target)\n    history = Float64[]\n    for _ in 1:100\n        push!(history, loss(κ, qcbm, target))\n        ps = parameters(qcbm)\n        Optimisers.update!(opt, ps, gradient(qcbm, κ, target))\n        dispatch!(qcbm, ps)\n    end\n    return history\nend\n\nhistory = train(qcbm, κ, opt, pg)\ntrained_pg = probs(zero_state(nqubits(qcbm)) |> qcbm)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"64-element Vector{Float64}:\n 0.0042429940119650435\n 0.004831924995359841\n 0.005402874998750507\n 0.005970441761959446\n 0.006648944572817676\n 0.007349863633505516\n 0.008122890395652517\n 0.008955124410539108\n 0.00968448098173709\n 0.0107019546759775\n 0.011386113659068806\n 0.012487682984765464\n 0.01337689100121907\n 0.014272197230817494\n 0.01539356022693125\n 0.016317366750812537\n 0.01734973064219845\n 0.01820278602180856\n 0.01922356283692342\n 0.020175709377316713\n 0.02103314864777754\n 0.02186480611459267\n 0.022820437431868665\n 0.023327556834359702\n 0.02407006476459682\n 0.02457342806529433\n 0.02507723847508086\n 0.025514484356849026\n 0.025943502309152853\n 0.026008153660188535\n 0.0261273993655205\n 0.026142142554840063\n 0.02597123803807072\n 0.025830113277524505\n 0.025447574501421967\n 0.025180620254501962\n 0.02458739084088264\n 0.024106290654519316\n 0.023377148971618446\n 0.022794050058899545\n 0.021838810101588686\n 0.02123953882029673\n 0.020162731112870043\n 0.01915440934882744\n 0.01838582485007677\n 0.017212494564035778\n 0.016345956577467142\n 0.015404422590391579\n 0.014167107133463286\n 0.013249879103175677\n 0.012490900930660971\n 0.011594352145514915\n 0.010634419481320854\n 0.00980995667610423\n 0.008779908357653857\n 0.008231795498114796\n 0.007323008744681972\n 0.00662909524336586\n 0.005988586381211492\n 0.005314099756996922\n 0.00489555894965312\n 0.004149290709693776\n 0.003754103891927712\n 0.0033498646832213364","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The history of training looks like below","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"title!(\"training history\")\nxlabel!(\"steps\"); ylabel!(\"loss\")\nplot(history)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip820\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip821\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"\nM216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip822\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  256.54,1486.45 256.54,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  765.479,1486.45 765.479,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1274.42,1486.45 1274.42,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1783.36,1486.45 1783.36,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2292.29,1486.45 2292.29,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  256.54,1486.45 256.54,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  765.479,1486.45 765.479,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.42,1486.45 1274.42,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1783.36,1486.45 1783.36,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2292.29,1486.45 2292.29,1467.55 \n  \"/>\n<path clip-path=\"url(#clip820)\" d=\"M256.54 1517.37 Q252.929 1517.37 251.1 1520.93 Q249.295 1524.47 249.295 1531.6 Q249.295 1538.71 251.1 1542.27 Q252.929 1545.82 256.54 1545.82 Q260.174 1545.82 261.98 1542.27 Q263.809 1538.71 263.809 1531.6 Q263.809 1524.47 261.98 1520.93 Q260.174 1517.37 256.54 1517.37 M256.54 1513.66 Q262.35 1513.66 265.406 1518.27 Q268.485 1522.85 268.485 1531.6 Q268.485 1540.33 265.406 1544.94 Q262.35 1549.52 256.54 1549.52 Q250.73 1549.52 247.651 1544.94 Q244.596 1540.33 244.596 1531.6 Q244.596 1522.85 247.651 1518.27 Q250.73 1513.66 256.54 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M744.75 1544.91 L761.069 1544.91 L761.069 1548.85 L739.125 1548.85 L739.125 1544.91 Q741.787 1542.16 746.37 1537.53 Q750.976 1532.88 752.157 1531.53 Q754.402 1529.01 755.282 1527.27 Q756.185 1525.51 756.185 1523.82 Q756.185 1521.07 754.24 1519.33 Q752.319 1517.6 749.217 1517.6 Q747.018 1517.6 744.564 1518.36 Q742.134 1519.13 739.356 1520.68 L739.356 1515.95 Q742.18 1514.82 744.634 1514.24 Q747.088 1513.66 749.125 1513.66 Q754.495 1513.66 757.689 1516.35 Q760.884 1519.03 760.884 1523.52 Q760.884 1525.65 760.074 1527.57 Q759.287 1529.47 757.18 1532.07 Q756.601 1532.74 753.5 1535.95 Q750.398 1539.15 744.75 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M770.93 1514.29 L789.286 1514.29 L789.286 1518.22 L775.212 1518.22 L775.212 1526.7 Q776.231 1526.35 777.249 1526.19 Q778.268 1526 779.286 1526 Q785.073 1526 788.453 1529.17 Q791.833 1532.34 791.833 1537.76 Q791.833 1543.34 788.36 1546.44 Q784.888 1549.52 778.569 1549.52 Q776.393 1549.52 774.124 1549.15 Q771.879 1548.78 769.472 1548.04 L769.472 1543.34 Q771.555 1544.47 773.777 1545.03 Q775.999 1545.58 778.476 1545.58 Q782.481 1545.58 784.819 1543.48 Q787.157 1541.37 787.157 1537.76 Q787.157 1534.15 784.819 1532.04 Q782.481 1529.94 778.476 1529.94 Q776.601 1529.94 774.726 1530.35 Q772.874 1530.77 770.93 1531.65 L770.93 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1249.12 1514.29 L1267.47 1514.29 L1267.47 1518.22 L1253.4 1518.22 L1253.4 1526.7 Q1254.42 1526.35 1255.44 1526.19 Q1256.45 1526 1257.47 1526 Q1263.26 1526 1266.64 1529.17 Q1270.02 1532.34 1270.02 1537.76 Q1270.02 1543.34 1266.55 1546.44 Q1263.07 1549.52 1256.76 1549.52 Q1254.58 1549.52 1252.31 1549.15 Q1250.07 1548.78 1247.66 1548.04 L1247.66 1543.34 Q1249.74 1544.47 1251.96 1545.03 Q1254.19 1545.58 1256.66 1545.58 Q1260.67 1545.58 1263.01 1543.48 Q1265.34 1541.37 1265.34 1537.76 Q1265.34 1534.15 1263.01 1532.04 Q1260.67 1529.94 1256.66 1529.94 Q1254.79 1529.94 1252.91 1530.35 Q1251.06 1530.77 1249.12 1531.65 L1249.12 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1289.23 1517.37 Q1285.62 1517.37 1283.79 1520.93 Q1281.99 1524.47 1281.99 1531.6 Q1281.99 1538.71 1283.79 1542.27 Q1285.62 1545.82 1289.23 1545.82 Q1292.87 1545.82 1294.67 1542.27 Q1296.5 1538.71 1296.5 1531.6 Q1296.5 1524.47 1294.67 1520.93 Q1292.87 1517.37 1289.23 1517.37 M1289.23 1513.66 Q1295.04 1513.66 1298.1 1518.27 Q1301.18 1522.85 1301.18 1531.6 Q1301.18 1540.33 1298.1 1544.94 Q1295.04 1549.52 1289.23 1549.52 Q1283.42 1549.52 1280.34 1544.94 Q1277.29 1540.33 1277.29 1531.6 Q1277.29 1522.85 1280.34 1518.27 Q1283.42 1513.66 1289.23 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1757.21 1514.29 L1779.43 1514.29 L1779.43 1516.28 L1766.89 1548.85 L1762 1548.85 L1773.81 1518.22 L1757.21 1518.22 L1757.21 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1788.6 1514.29 L1806.95 1514.29 L1806.95 1518.22 L1792.88 1518.22 L1792.88 1526.7 Q1793.9 1526.35 1794.92 1526.19 Q1795.94 1526 1796.96 1526 Q1802.74 1526 1806.12 1529.17 Q1809.5 1532.34 1809.5 1537.76 Q1809.5 1543.34 1806.03 1546.44 Q1802.56 1549.52 1796.24 1549.52 Q1794.06 1549.52 1791.79 1549.15 Q1789.55 1548.78 1787.14 1548.04 L1787.14 1543.34 Q1789.22 1544.47 1791.45 1545.03 Q1793.67 1545.58 1796.14 1545.58 Q1800.15 1545.58 1802.49 1543.48 Q1804.83 1541.37 1804.83 1537.76 Q1804.83 1534.15 1802.49 1532.04 Q1800.15 1529.94 1796.14 1529.94 Q1794.27 1529.94 1792.39 1530.35 Q1790.54 1530.77 1788.6 1531.65 L1788.6 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2251.9 1544.91 L2259.54 1544.91 L2259.54 1518.55 L2251.23 1520.21 L2251.23 1515.95 L2259.49 1514.29 L2264.17 1514.29 L2264.17 1544.91 L2271.81 1544.91 L2271.81 1548.85 L2251.9 1548.85 L2251.9 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2291.25 1517.37 Q2287.64 1517.37 2285.81 1520.93 Q2284.01 1524.47 2284.01 1531.6 Q2284.01 1538.71 2285.81 1542.27 Q2287.64 1545.82 2291.25 1545.82 Q2294.89 1545.82 2296.69 1542.27 Q2298.52 1538.71 2298.52 1531.6 Q2298.52 1524.47 2296.69 1520.93 Q2294.89 1517.37 2291.25 1517.37 M2291.25 1513.66 Q2297.06 1513.66 2300.12 1518.27 Q2303.2 1522.85 2303.2 1531.6 Q2303.2 1540.33 2300.12 1544.94 Q2297.06 1549.52 2291.25 1549.52 Q2285.44 1549.52 2282.36 1544.94 Q2279.31 1540.33 2279.31 1531.6 Q2279.31 1522.85 2282.36 1518.27 Q2285.44 1513.66 2291.25 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2321.41 1517.37 Q2317.8 1517.37 2315.97 1520.93 Q2314.17 1524.47 2314.17 1531.6 Q2314.17 1538.71 2315.97 1542.27 Q2317.8 1545.82 2321.41 1545.82 Q2325.05 1545.82 2326.85 1542.27 Q2328.68 1538.71 2328.68 1531.6 Q2328.68 1524.47 2326.85 1520.93 Q2325.05 1517.37 2321.41 1517.37 M2321.41 1513.66 Q2327.22 1513.66 2330.28 1518.27 Q2333.36 1522.85 2333.36 1531.6 Q2333.36 1540.33 2330.28 1544.94 Q2327.22 1549.52 2321.41 1549.52 Q2315.6 1549.52 2312.53 1544.94 Q2309.47 1540.33 2309.47 1531.6 Q2309.47 1522.85 2312.53 1518.27 Q2315.6 1513.66 2321.41 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1445.74 2352.76,1445.74 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1103.62 2352.76,1103.62 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,761.505 2352.76,761.505 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,419.388 2352.76,419.388 \n  \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,77.2709 2352.76,77.2709 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 216.436,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1445.74 235.334,1445.74 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1103.62 235.334,1103.62 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,761.505 235.334,761.505 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,419.388 235.334,419.388 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,77.2709 235.334,77.2709 \n  \"/>\n<path clip-path=\"url(#clip820)\" d=\"M62.9365 1431.54 Q59.3254 1431.54 57.4967 1435.1 Q55.6912 1438.64 55.6912 1445.77 Q55.6912 1452.88 57.4967 1456.45 Q59.3254 1459.99 62.9365 1459.99 Q66.5707 1459.99 68.3763 1456.45 Q70.205 1452.88 70.205 1445.77 Q70.205 1438.64 68.3763 1435.1 Q66.5707 1431.54 62.9365 1431.54 M62.9365 1427.83 Q68.7467 1427.83 71.8022 1432.44 Q74.8809 1437.02 74.8809 1445.77 Q74.8809 1454.5 71.8022 1459.11 Q68.7467 1463.69 62.9365 1463.69 Q57.1264 1463.69 54.0477 1459.11 Q50.9921 1454.5 50.9921 1445.77 Q50.9921 1437.02 54.0477 1432.44 Q57.1264 1427.83 62.9365 1427.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M83.0984 1457.14 L87.9827 1457.14 L87.9827 1463.02 L83.0984 1463.02 L83.0984 1457.14 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M108.168 1431.54 Q104.557 1431.54 102.728 1435.1 Q100.922 1438.64 100.922 1445.77 Q100.922 1452.88 102.728 1456.45 Q104.557 1459.99 108.168 1459.99 Q111.802 1459.99 113.608 1456.45 Q115.436 1452.88 115.436 1445.77 Q115.436 1438.64 113.608 1435.1 Q111.802 1431.54 108.168 1431.54 M108.168 1427.83 Q113.978 1427.83 117.033 1432.44 Q120.112 1437.02 120.112 1445.77 Q120.112 1454.5 117.033 1459.11 Q113.978 1463.69 108.168 1463.69 Q102.358 1463.69 99.2789 1459.11 Q96.2234 1454.5 96.2234 1445.77 Q96.2234 1437.02 99.2789 1432.44 Q102.358 1427.83 108.168 1427.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M138.33 1431.54 Q134.719 1431.54 132.89 1435.1 Q131.084 1438.64 131.084 1445.77 Q131.084 1452.88 132.89 1456.45 Q134.719 1459.99 138.33 1459.99 Q141.964 1459.99 143.769 1456.45 Q145.598 1452.88 145.598 1445.77 Q145.598 1438.64 143.769 1435.1 Q141.964 1431.54 138.33 1431.54 M138.33 1427.83 Q144.14 1427.83 147.195 1432.44 Q150.274 1437.02 150.274 1445.77 Q150.274 1454.5 147.195 1459.11 Q144.14 1463.69 138.33 1463.69 Q132.519 1463.69 129.441 1459.11 Q126.385 1454.5 126.385 1445.77 Q126.385 1437.02 129.441 1432.44 Q132.519 1427.83 138.33 1427.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M168.491 1431.54 Q164.88 1431.54 163.052 1435.1 Q161.246 1438.64 161.246 1445.77 Q161.246 1452.88 163.052 1456.45 Q164.88 1459.99 168.491 1459.99 Q172.126 1459.99 173.931 1456.45 Q175.76 1452.88 175.76 1445.77 Q175.76 1438.64 173.931 1435.1 Q172.126 1431.54 168.491 1431.54 M168.491 1427.83 Q174.302 1427.83 177.357 1432.44 Q180.436 1437.02 180.436 1445.77 Q180.436 1454.5 177.357 1459.11 Q174.302 1463.69 168.491 1463.69 Q162.681 1463.69 159.603 1459.11 Q156.547 1454.5 156.547 1445.77 Q156.547 1437.02 159.603 1432.44 Q162.681 1427.83 168.491 1427.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M63.9319 1089.42 Q60.3208 1089.42 58.4921 1092.99 Q56.6865 1096.53 56.6865 1103.66 Q56.6865 1110.76 58.4921 1114.33 Q60.3208 1117.87 63.9319 1117.87 Q67.5661 1117.87 69.3717 1114.33 Q71.2004 1110.76 71.2004 1103.66 Q71.2004 1096.53 69.3717 1092.99 Q67.5661 1089.42 63.9319 1089.42 M63.9319 1085.72 Q69.742 1085.72 72.7976 1090.32 Q75.8763 1094.91 75.8763 1103.66 Q75.8763 1112.38 72.7976 1116.99 Q69.742 1121.57 63.9319 1121.57 Q58.1217 1121.57 55.043 1116.99 Q51.9875 1112.38 51.9875 1103.66 Q51.9875 1094.91 55.043 1090.32 Q58.1217 1085.72 63.9319 1085.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M84.0938 1115.02 L88.978 1115.02 L88.978 1120.9 L84.0938 1120.9 L84.0938 1115.02 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M109.163 1089.42 Q105.552 1089.42 103.723 1092.99 Q101.918 1096.53 101.918 1103.66 Q101.918 1110.76 103.723 1114.33 Q105.552 1117.87 109.163 1117.87 Q112.797 1117.87 114.603 1114.33 Q116.432 1110.76 116.432 1103.66 Q116.432 1096.53 114.603 1092.99 Q112.797 1089.42 109.163 1089.42 M109.163 1085.72 Q114.973 1085.72 118.029 1090.32 Q121.107 1094.91 121.107 1103.66 Q121.107 1112.38 118.029 1116.99 Q114.973 1121.57 109.163 1121.57 Q103.353 1121.57 100.274 1116.99 Q97.2187 1112.38 97.2187 1103.66 Q97.2187 1094.91 100.274 1090.32 Q103.353 1085.72 109.163 1085.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M139.325 1089.42 Q135.714 1089.42 133.885 1092.99 Q132.08 1096.53 132.08 1103.66 Q132.08 1110.76 133.885 1114.33 Q135.714 1117.87 139.325 1117.87 Q142.959 1117.87 144.765 1114.33 Q146.593 1110.76 146.593 1103.66 Q146.593 1096.53 144.765 1092.99 Q142.959 1089.42 139.325 1089.42 M139.325 1085.72 Q145.135 1085.72 148.191 1090.32 Q151.269 1094.91 151.269 1103.66 Q151.269 1112.38 148.191 1116.99 Q145.135 1121.57 139.325 1121.57 Q133.515 1121.57 130.436 1116.99 Q127.381 1112.38 127.381 1103.66 Q127.381 1094.91 130.436 1090.32 Q133.515 1085.72 139.325 1085.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M159.533 1086.34 L177.89 1086.34 L177.89 1090.28 L163.816 1090.28 L163.816 1098.75 Q164.834 1098.4 165.853 1098.24 Q166.871 1098.06 167.89 1098.06 Q173.677 1098.06 177.056 1101.23 Q180.436 1104.4 180.436 1109.81 Q180.436 1115.39 176.964 1118.49 Q173.491 1121.57 167.172 1121.57 Q164.996 1121.57 162.728 1121.2 Q160.482 1120.83 158.075 1120.09 L158.075 1115.39 Q160.158 1116.53 162.38 1117.08 Q164.603 1117.64 167.079 1117.64 Q171.084 1117.64 173.422 1115.53 Q175.76 1113.43 175.76 1109.81 Q175.76 1106.2 173.422 1104.1 Q171.084 1101.99 167.079 1101.99 Q165.204 1101.99 163.329 1102.41 Q161.478 1102.82 159.533 1103.7 L159.533 1086.34 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M62.9365 747.304 Q59.3254 747.304 57.4967 750.869 Q55.6912 754.41 55.6912 761.54 Q55.6912 768.646 57.4967 772.211 Q59.3254 775.753 62.9365 775.753 Q66.5707 775.753 68.3763 772.211 Q70.205 768.646 70.205 761.54 Q70.205 754.41 68.3763 750.869 Q66.5707 747.304 62.9365 747.304 M62.9365 743.6 Q68.7467 743.6 71.8022 748.207 Q74.8809 752.79 74.8809 761.54 Q74.8809 770.267 71.8022 774.873 Q68.7467 779.456 62.9365 779.456 Q57.1264 779.456 54.0477 774.873 Q50.9921 770.267 50.9921 761.54 Q50.9921 752.79 54.0477 748.207 Q57.1264 743.6 62.9365 743.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M83.0984 772.906 L87.9827 772.906 L87.9827 778.785 L83.0984 778.785 L83.0984 772.906 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M108.168 747.304 Q104.557 747.304 102.728 750.869 Q100.922 754.41 100.922 761.54 Q100.922 768.646 102.728 772.211 Q104.557 775.753 108.168 775.753 Q111.802 775.753 113.608 772.211 Q115.436 768.646 115.436 761.54 Q115.436 754.41 113.608 750.869 Q111.802 747.304 108.168 747.304 M108.168 743.6 Q113.978 743.6 117.033 748.207 Q120.112 752.79 120.112 761.54 Q120.112 770.267 117.033 774.873 Q113.978 779.456 108.168 779.456 Q102.358 779.456 99.2789 774.873 Q96.2234 770.267 96.2234 761.54 Q96.2234 752.79 99.2789 748.207 Q102.358 743.6 108.168 743.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M129.14 774.85 L136.779 774.85 L136.779 748.484 L128.469 750.151 L128.469 745.892 L136.732 744.225 L141.408 744.225 L141.408 774.85 L149.047 774.85 L149.047 778.785 L129.14 778.785 L129.14 774.85 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M168.491 747.304 Q164.88 747.304 163.052 750.869 Q161.246 754.41 161.246 761.54 Q161.246 768.646 163.052 772.211 Q164.88 775.753 168.491 775.753 Q172.126 775.753 173.931 772.211 Q175.76 768.646 175.76 761.54 Q175.76 754.41 173.931 750.869 Q172.126 747.304 168.491 747.304 M168.491 743.6 Q174.302 743.6 177.357 748.207 Q180.436 752.79 180.436 761.54 Q180.436 770.267 177.357 774.873 Q174.302 779.456 168.491 779.456 Q162.681 779.456 159.603 774.873 Q156.547 770.267 156.547 761.54 Q156.547 752.79 159.603 748.207 Q162.681 743.6 168.491 743.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M63.9319 405.187 Q60.3208 405.187 58.4921 408.752 Q56.6865 412.293 56.6865 419.423 Q56.6865 426.529 58.4921 430.094 Q60.3208 433.636 63.9319 433.636 Q67.5661 433.636 69.3717 430.094 Q71.2004 426.529 71.2004 419.423 Q71.2004 412.293 69.3717 408.752 Q67.5661 405.187 63.9319 405.187 M63.9319 401.483 Q69.742 401.483 72.7976 406.089 Q75.8763 410.673 75.8763 419.423 Q75.8763 428.15 72.7976 432.756 Q69.742 437.339 63.9319 437.339 Q58.1217 437.339 55.043 432.756 Q51.9875 428.15 51.9875 419.423 Q51.9875 410.673 55.043 406.089 Q58.1217 401.483 63.9319 401.483 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M84.0938 430.788 L88.978 430.788 L88.978 436.668 L84.0938 436.668 L84.0938 430.788 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M109.163 405.187 Q105.552 405.187 103.723 408.752 Q101.918 412.293 101.918 419.423 Q101.918 426.529 103.723 430.094 Q105.552 433.636 109.163 433.636 Q112.797 433.636 114.603 430.094 Q116.432 426.529 116.432 419.423 Q116.432 412.293 114.603 408.752 Q112.797 405.187 109.163 405.187 M109.163 401.483 Q114.973 401.483 118.029 406.089 Q121.107 410.673 121.107 419.423 Q121.107 428.15 118.029 432.756 Q114.973 437.339 109.163 437.339 Q103.353 437.339 100.274 432.756 Q97.2187 428.15 97.2187 419.423 Q97.2187 410.673 100.274 406.089 Q103.353 401.483 109.163 401.483 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M130.135 432.733 L137.774 432.733 L137.774 406.367 L129.464 408.034 L129.464 403.775 L137.728 402.108 L142.404 402.108 L142.404 432.733 L150.043 432.733 L150.043 436.668 L130.135 436.668 L130.135 432.733 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M159.533 402.108 L177.89 402.108 L177.89 406.043 L163.816 406.043 L163.816 414.515 Q164.834 414.168 165.853 414.006 Q166.871 413.821 167.89 413.821 Q173.677 413.821 177.056 416.992 Q180.436 420.163 180.436 425.58 Q180.436 431.159 176.964 434.261 Q173.491 437.339 167.172 437.339 Q164.996 437.339 162.728 436.969 Q160.482 436.599 158.075 435.858 L158.075 431.159 Q160.158 432.293 162.38 432.849 Q164.603 433.404 167.079 433.404 Q171.084 433.404 173.422 431.298 Q175.76 429.191 175.76 425.58 Q175.76 421.969 173.422 419.863 Q171.084 417.756 167.079 417.756 Q165.204 417.756 163.329 418.173 Q161.478 418.589 159.533 419.469 L159.533 402.108 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M62.9365 63.0695 Q59.3254 63.0695 57.4967 66.6343 Q55.6912 70.176 55.6912 77.3056 Q55.6912 84.412 57.4967 87.9768 Q59.3254 91.5185 62.9365 91.5185 Q66.5707 91.5185 68.3763 87.9768 Q70.205 84.412 70.205 77.3056 Q70.205 70.176 68.3763 66.6343 Q66.5707 63.0695 62.9365 63.0695 M62.9365 59.3659 Q68.7467 59.3659 71.8022 63.9723 Q74.8809 68.5556 74.8809 77.3056 Q74.8809 86.0324 71.8022 90.6388 Q68.7467 95.2221 62.9365 95.2221 Q57.1264 95.2221 54.0477 90.6388 Q50.9921 86.0324 50.9921 77.3056 Q50.9921 68.5556 54.0477 63.9723 Q57.1264 59.3659 62.9365 59.3659 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M83.0984 88.6713 L87.9827 88.6713 L87.9827 94.5509 L83.0984 94.5509 L83.0984 88.6713 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M108.168 63.0695 Q104.557 63.0695 102.728 66.6343 Q100.922 70.176 100.922 77.3056 Q100.922 84.412 102.728 87.9768 Q104.557 91.5185 108.168 91.5185 Q111.802 91.5185 113.608 87.9768 Q115.436 84.412 115.436 77.3056 Q115.436 70.176 113.608 66.6343 Q111.802 63.0695 108.168 63.0695 M108.168 59.3659 Q113.978 59.3659 117.033 63.9723 Q120.112 68.5556 120.112 77.3056 Q120.112 86.0324 117.033 90.6388 Q113.978 95.2221 108.168 95.2221 Q102.358 95.2221 99.2789 90.6388 Q96.2234 86.0324 96.2234 77.3056 Q96.2234 68.5556 99.2789 63.9723 Q102.358 59.3659 108.168 59.3659 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M132.357 90.6157 L148.677 90.6157 L148.677 94.5509 L126.732 94.5509 L126.732 90.6157 Q129.394 87.8611 133.978 83.2315 Q138.584 78.5787 139.765 77.2361 Q142.01 74.713 142.89 72.9769 Q143.793 71.2176 143.793 69.5278 Q143.793 66.7732 141.848 65.0371 Q139.927 63.301 136.825 63.301 Q134.626 63.301 132.172 64.0649 Q129.742 64.8288 126.964 66.3797 L126.964 61.6575 Q129.788 60.5233 132.242 59.9446 Q134.695 59.3659 136.732 59.3659 Q142.103 59.3659 145.297 62.051 Q148.492 64.7362 148.492 69.2269 Q148.492 71.3565 147.681 73.2778 Q146.894 75.176 144.788 77.7685 Q144.209 78.4398 141.107 81.6574 Q138.006 84.8518 132.357 90.6157 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M168.491 63.0695 Q164.88 63.0695 163.052 66.6343 Q161.246 70.176 161.246 77.3056 Q161.246 84.412 163.052 87.9768 Q164.88 91.5185 168.491 91.5185 Q172.126 91.5185 173.931 87.9768 Q175.76 84.412 175.76 77.3056 Q175.76 70.176 173.931 66.6343 Q172.126 63.0695 168.491 63.0695 M168.491 59.3659 Q174.302 59.3659 177.357 63.9723 Q180.436 68.5556 180.436 77.3056 Q180.436 86.0324 177.357 90.6388 Q174.302 95.2221 168.491 95.2221 Q162.681 95.2221 159.603 90.6388 Q156.547 86.0324 156.547 77.3056 Q156.547 68.5556 159.603 63.9723 Q162.681 59.3659 168.491 59.3659 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip822)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  276.898,87.9763 297.255,400.399 317.613,631.875 337.97,773.908 358.328,860.34 378.685,932.071 399.043,1002.94 419.401,1067.81 439.758,1126.78 460.116,1182.98 \n  480.473,1232.23 500.831,1268.33 521.188,1289.01 541.546,1296.71 561.903,1296.62 582.261,1294.49 602.618,1296.05 622.976,1305.78 643.333,1323.95 663.691,1345.81 \n  684.049,1365.36 704.406,1380.22 724.764,1391.44 745.121,1399.77 765.479,1404.39 785.836,1405.38 806.194,1405.03 826.551,1406.03 846.909,1409.27 867.266,1413.44 \n  887.624,1416.68 907.981,1418.4 928.339,1419.46 948.697,1420.95 969.054,1423.11 989.412,1425.59 1009.77,1428.14 1030.13,1430.76 1050.48,1433.41 1070.84,1435.95 \n  1091.2,1438.09 1111.56,1439.63 1131.91,1440.48 1152.27,1440.78 1172.63,1440.78 1192.99,1440.75 1213.34,1440.84 1233.7,1441.12 1254.06,1441.55 1274.42,1442.02 \n  1294.77,1442.43 1315.13,1442.75 1335.49,1443.01 1355.85,1443.22 1376.2,1443.39 1396.56,1443.53 1416.92,1443.68 1437.28,1443.89 1457.63,1444.16 1477.99,1444.42 \n  1498.35,1444.63 1518.71,1444.76 1539.07,1444.84 1559.42,1444.91 1579.78,1444.98 1600.14,1445.04 1620.5,1445.07 1640.85,1445.09 1661.21,1445.13 1681.57,1445.19 \n  1701.93,1445.28 1722.28,1445.35 1742.64,1445.41 1763,1445.45 1783.36,1445.48 1803.71,1445.51 1824.07,1445.53 1844.43,1445.54 1864.79,1445.55 1885.14,1445.56 \n  1905.5,1445.58 1925.86,1445.6 1946.22,1445.62 1966.57,1445.64 1986.93,1445.65 2007.29,1445.66 2027.65,1445.67 2048,1445.68 2068.36,1445.68 2088.72,1445.69 \n  2109.08,1445.7 2129.43,1445.7 2149.79,1445.7 2170.15,1445.71 2190.51,1445.71 2210.86,1445.71 2231.22,1445.71 2251.58,1445.71 2271.94,1445.71 2292.29,1445.72 \n  \n  \"/>\n<path clip-path=\"url(#clip820)\" d=\"\nM1991.75 198.898 L2281.55 198.898 L2281.55 95.2176 L1991.75 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1991.75,198.898 2281.55,198.898 2281.55,95.2176 1991.75,95.2176 1991.75,198.898 \n  \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2015.48,147.058 2157.9,147.058 \n  \"/>\n<path clip-path=\"url(#clip820)\" d=\"M2195.48 166.745 Q2193.68 171.375 2191.97 172.787 Q2190.25 174.199 2187.38 174.199 L2183.98 174.199 L2183.98 170.634 L2186.48 170.634 Q2188.24 170.634 2189.21 169.8 Q2190.18 168.967 2191.36 165.865 L2192.13 163.921 L2181.64 138.412 L2186.16 138.412 L2194.26 158.689 L2202.36 138.412 L2206.87 138.412 L2195.48 166.745 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2214.16 160.402 L2221.8 160.402 L2221.8 134.037 L2213.49 135.703 L2213.49 131.444 L2221.76 129.778 L2226.43 129.778 L2226.43 160.402 L2234.07 160.402 L2234.07 164.338 L2214.16 164.338 L2214.16 160.402 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"And let's check what we got","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"fig2 = plot(1:1<<6, trained_pg; label=\"trained\")\nplot!(fig2, 1:1<<6, pg; label=\"target\")\ntitle!(\"distribution\")\nxlabel!(\"x\"); ylabel!(\"p\")","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip850\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip851\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"\nM279.704 1423.18 L2352.76 1423.18 L2352.76 123.472 L279.704 123.472  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip852\">\n    <rect x=\"279\" y=\"123\" width=\"2074\" height=\"1301\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  307.332,1423.18 307.332,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  617.762,1423.18 617.762,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  928.192,1423.18 928.192,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1238.62,1423.18 1238.62,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1549.05,1423.18 1549.05,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1859.48,1423.18 1859.48,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2169.91,1423.18 2169.91,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  307.332,1423.18 307.332,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  617.762,1423.18 617.762,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  928.192,1423.18 928.192,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1238.62,1423.18 1238.62,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1549.05,1423.18 1549.05,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1859.48,1423.18 1859.48,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2169.91,1423.18 2169.91,1404.28 \n  \"/>\n<path clip-path=\"url(#clip850)\" d=\"M307.332 1454.1 Q303.721 1454.1 301.892 1457.66 Q300.087 1461.2 300.087 1468.33 Q300.087 1475.44 301.892 1479.01 Q303.721 1482.55 307.332 1482.55 Q310.966 1482.55 312.772 1479.01 Q314.601 1475.44 314.601 1468.33 Q314.601 1461.2 312.772 1457.66 Q310.966 1454.1 307.332 1454.1 M307.332 1450.39 Q313.142 1450.39 316.198 1455 Q319.277 1459.58 319.277 1468.33 Q319.277 1477.06 316.198 1481.67 Q313.142 1486.25 307.332 1486.25 Q301.522 1486.25 298.443 1481.67 Q295.388 1477.06 295.388 1468.33 Q295.388 1459.58 298.443 1455 Q301.522 1450.39 307.332 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M592.45 1481.64 L600.089 1481.64 L600.089 1455.28 L591.779 1456.95 L591.779 1452.69 L600.042 1451.02 L604.718 1451.02 L604.718 1481.64 L612.357 1481.64 L612.357 1485.58 L592.45 1485.58 L592.45 1481.64 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M631.802 1454.1 Q628.19 1454.1 626.362 1457.66 Q624.556 1461.2 624.556 1468.33 Q624.556 1475.44 626.362 1479.01 Q628.19 1482.55 631.802 1482.55 Q635.436 1482.55 637.241 1479.01 Q639.07 1475.44 639.07 1468.33 Q639.07 1461.2 637.241 1457.66 Q635.436 1454.1 631.802 1454.1 M631.802 1450.39 Q637.612 1450.39 640.667 1455 Q643.746 1459.58 643.746 1468.33 Q643.746 1477.06 640.667 1481.67 Q637.612 1486.25 631.802 1486.25 Q625.991 1486.25 622.913 1481.67 Q619.857 1477.06 619.857 1468.33 Q619.857 1459.58 622.913 1455 Q625.991 1450.39 631.802 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M906.966 1481.64 L923.285 1481.64 L923.285 1485.58 L901.341 1485.58 L901.341 1481.64 Q904.003 1478.89 908.586 1474.26 Q913.192 1469.61 914.373 1468.27 Q916.618 1465.74 917.498 1464.01 Q918.401 1462.25 918.401 1460.56 Q918.401 1457.8 916.456 1456.07 Q914.535 1454.33 911.433 1454.33 Q909.234 1454.33 906.78 1455.09 Q904.35 1455.86 901.572 1457.41 L901.572 1452.69 Q904.396 1451.55 906.85 1450.97 Q909.304 1450.39 911.341 1450.39 Q916.711 1450.39 919.905 1453.08 Q923.1 1455.77 923.1 1460.26 Q923.1 1462.39 922.29 1464.31 Q921.503 1466.2 919.396 1468.8 Q918.817 1469.47 915.716 1472.69 Q912.614 1475.88 906.966 1481.64 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M943.1 1454.1 Q939.489 1454.1 937.66 1457.66 Q935.854 1461.2 935.854 1468.33 Q935.854 1475.44 937.66 1479.01 Q939.489 1482.55 943.1 1482.55 Q946.734 1482.55 948.539 1479.01 Q950.368 1475.44 950.368 1468.33 Q950.368 1461.2 948.539 1457.66 Q946.734 1454.1 943.1 1454.1 M943.1 1450.39 Q948.91 1450.39 951.965 1455 Q955.044 1459.58 955.044 1468.33 Q955.044 1477.06 951.965 1481.67 Q948.91 1486.25 943.1 1486.25 Q937.289 1486.25 934.211 1481.67 Q931.155 1477.06 931.155 1468.33 Q931.155 1459.58 934.211 1455 Q937.289 1450.39 943.1 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1227.47 1466.95 Q1230.82 1467.66 1232.7 1469.93 Q1234.59 1472.2 1234.59 1475.53 Q1234.59 1480.65 1231.08 1483.45 Q1227.56 1486.25 1221.08 1486.25 Q1218.9 1486.25 1216.59 1485.81 Q1214.29 1485.39 1211.84 1484.54 L1211.84 1480.02 Q1213.78 1481.16 1216.1 1481.74 Q1218.41 1482.32 1220.94 1482.32 Q1225.34 1482.32 1227.63 1480.58 Q1229.94 1478.84 1229.94 1475.53 Q1229.94 1472.48 1227.79 1470.77 Q1225.66 1469.03 1221.84 1469.03 L1217.81 1469.03 L1217.81 1465.19 L1222.03 1465.19 Q1225.47 1465.19 1227.3 1463.82 Q1229.13 1462.43 1229.13 1459.84 Q1229.13 1457.18 1227.23 1455.77 Q1225.36 1454.33 1221.84 1454.33 Q1219.92 1454.33 1217.72 1454.75 Q1215.52 1455.16 1212.88 1456.04 L1212.88 1451.88 Q1215.54 1451.14 1217.86 1450.77 Q1220.2 1450.39 1222.26 1450.39 Q1227.58 1450.39 1230.68 1452.83 Q1233.78 1455.23 1233.78 1459.35 Q1233.78 1462.22 1232.14 1464.21 Q1230.5 1466.18 1227.47 1466.95 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1253.46 1454.1 Q1249.85 1454.1 1248.02 1457.66 Q1246.21 1461.2 1246.21 1468.33 Q1246.21 1475.44 1248.02 1479.01 Q1249.85 1482.55 1253.46 1482.55 Q1257.09 1482.55 1258.9 1479.01 Q1260.73 1475.44 1260.73 1468.33 Q1260.73 1461.2 1258.9 1457.66 Q1257.09 1454.1 1253.46 1454.1 M1253.46 1450.39 Q1259.27 1450.39 1262.33 1455 Q1265.4 1459.58 1265.4 1468.33 Q1265.4 1477.06 1262.33 1481.67 Q1259.27 1486.25 1253.46 1486.25 Q1247.65 1486.25 1244.57 1481.67 Q1241.52 1477.06 1241.52 1468.33 Q1241.52 1459.58 1244.57 1455 Q1247.65 1450.39 1253.46 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1537.22 1455.09 L1525.42 1473.54 L1537.22 1473.54 L1537.22 1455.09 M1536 1451.02 L1541.88 1451.02 L1541.88 1473.54 L1546.81 1473.54 L1546.81 1477.43 L1541.88 1477.43 L1541.88 1485.58 L1537.22 1485.58 L1537.22 1477.43 L1521.62 1477.43 L1521.62 1472.92 L1536 1451.02 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1564.54 1454.1 Q1560.93 1454.1 1559.1 1457.66 Q1557.29 1461.2 1557.29 1468.33 Q1557.29 1475.44 1559.1 1479.01 Q1560.93 1482.55 1564.54 1482.55 Q1568.17 1482.55 1569.98 1479.01 Q1571.81 1475.44 1571.81 1468.33 Q1571.81 1461.2 1569.98 1457.66 Q1568.17 1454.1 1564.54 1454.1 M1564.54 1450.39 Q1570.35 1450.39 1573.4 1455 Q1576.48 1459.58 1576.48 1468.33 Q1576.48 1477.06 1573.4 1481.67 Q1570.35 1486.25 1564.54 1486.25 Q1558.73 1486.25 1555.65 1481.67 Q1552.59 1477.06 1552.59 1468.33 Q1552.59 1459.58 1555.65 1455 Q1558.73 1450.39 1564.54 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1834.18 1451.02 L1852.54 1451.02 L1852.54 1454.96 L1838.46 1454.96 L1838.46 1463.43 Q1839.48 1463.08 1840.5 1462.92 Q1841.52 1462.73 1842.54 1462.73 Q1848.33 1462.73 1851.7 1465.9 Q1855.08 1469.08 1855.08 1474.49 Q1855.08 1480.07 1851.61 1483.17 Q1848.14 1486.25 1841.82 1486.25 Q1839.64 1486.25 1837.38 1485.88 Q1835.13 1485.51 1832.72 1484.77 L1832.72 1480.07 Q1834.81 1481.2 1837.03 1481.76 Q1839.25 1482.32 1841.73 1482.32 Q1845.73 1482.32 1848.07 1480.21 Q1850.41 1478.1 1850.41 1474.49 Q1850.41 1470.88 1848.07 1468.77 Q1845.73 1466.67 1841.73 1466.67 Q1839.85 1466.67 1837.98 1467.08 Q1836.13 1467.5 1834.18 1468.38 L1834.18 1451.02 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1874.3 1454.1 Q1870.69 1454.1 1868.86 1457.66 Q1867.05 1461.2 1867.05 1468.33 Q1867.05 1475.44 1868.86 1479.01 Q1870.69 1482.55 1874.3 1482.55 Q1877.93 1482.55 1879.74 1479.01 Q1881.57 1475.44 1881.57 1468.33 Q1881.57 1461.2 1879.74 1457.66 Q1877.93 1454.1 1874.3 1454.1 M1874.3 1450.39 Q1880.11 1450.39 1883.16 1455 Q1886.24 1459.58 1886.24 1468.33 Q1886.24 1477.06 1883.16 1481.67 Q1880.11 1486.25 1874.3 1486.25 Q1868.49 1486.25 1865.41 1481.67 Q1862.35 1477.06 1862.35 1468.33 Q1862.35 1459.58 1865.41 1455 Q1868.49 1450.39 1874.3 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2155.32 1466.44 Q2152.17 1466.44 2150.32 1468.59 Q2148.49 1470.74 2148.49 1474.49 Q2148.49 1478.22 2150.32 1480.39 Q2152.17 1482.55 2155.32 1482.55 Q2158.47 1482.55 2160.29 1480.39 Q2162.15 1478.22 2162.15 1474.49 Q2162.15 1470.74 2160.29 1468.59 Q2158.47 1466.44 2155.32 1466.44 M2164.6 1451.78 L2164.6 1456.04 Q2162.84 1455.21 2161.04 1454.77 Q2159.25 1454.33 2157.49 1454.33 Q2152.86 1454.33 2150.41 1457.45 Q2147.98 1460.58 2147.63 1466.9 Q2149 1464.89 2151.06 1463.82 Q2153.12 1462.73 2155.6 1462.73 Q2160.8 1462.73 2163.81 1465.9 Q2166.85 1469.05 2166.85 1474.49 Q2166.85 1479.82 2163.7 1483.03 Q2160.55 1486.25 2155.32 1486.25 Q2149.32 1486.25 2146.15 1481.67 Q2142.98 1477.06 2142.98 1468.33 Q2142.98 1460.14 2146.87 1455.28 Q2150.76 1450.39 2157.31 1450.39 Q2159.07 1450.39 2160.85 1450.74 Q2162.66 1451.09 2164.6 1451.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2184.9 1454.1 Q2181.29 1454.1 2179.46 1457.66 Q2177.66 1461.2 2177.66 1468.33 Q2177.66 1475.44 2179.46 1479.01 Q2181.29 1482.55 2184.9 1482.55 Q2188.54 1482.55 2190.34 1479.01 Q2192.17 1475.44 2192.17 1468.33 Q2192.17 1461.2 2190.34 1457.66 Q2188.54 1454.1 2184.9 1454.1 M2184.9 1450.39 Q2190.71 1450.39 2193.77 1455 Q2196.85 1459.58 2196.85 1468.33 Q2196.85 1477.06 2193.77 1481.67 Q2190.71 1486.25 2184.9 1486.25 Q2179.09 1486.25 2176.01 1481.67 Q2172.96 1477.06 2172.96 1468.33 Q2172.96 1459.58 2176.01 1455 Q2179.09 1450.39 2184.9 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1332.84 1532.4 L1319.95 1549.74 L1333.51 1568.04 L1326.61 1568.04 L1316.23 1554.04 L1305.85 1568.04 L1298.95 1568.04 L1312.79 1549.39 L1300.12 1532.4 L1307.03 1532.4 L1316.48 1545.1 L1325.94 1532.4 L1332.84 1532.4 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,1296.18 2352.76,1296.18 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,1027.54 2352.76,1027.54 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,758.899 2352.76,758.899 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,490.26 2352.76,490.26 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,221.621 2352.76,221.621 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1423.18 279.704,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1296.18 298.602,1296.18 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1027.54 298.602,1027.54 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,758.899 298.602,758.899 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,490.26 298.602,490.26 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,221.621 298.602,221.621 \n  \"/>\n<path clip-path=\"url(#clip850)\" d=\"M127.2 1281.98 Q123.589 1281.98 121.76 1285.54 Q119.955 1289.08 119.955 1296.21 Q119.955 1303.32 121.76 1306.88 Q123.589 1310.42 127.2 1310.42 Q130.834 1310.42 132.64 1306.88 Q134.468 1303.32 134.468 1296.21 Q134.468 1289.08 132.64 1285.54 Q130.834 1281.98 127.2 1281.98 M127.2 1278.27 Q133.01 1278.27 136.066 1282.88 Q139.144 1287.46 139.144 1296.21 Q139.144 1304.94 136.066 1309.55 Q133.01 1314.13 127.2 1314.13 Q121.39 1314.13 118.311 1309.55 Q115.256 1304.94 115.256 1296.21 Q115.256 1287.46 118.311 1282.88 Q121.39 1278.27 127.2 1278.27 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M147.362 1307.58 L152.246 1307.58 L152.246 1313.46 L147.362 1313.46 L147.362 1307.58 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M172.431 1281.98 Q168.82 1281.98 166.991 1285.54 Q165.186 1289.08 165.186 1296.21 Q165.186 1303.32 166.991 1306.88 Q168.82 1310.42 172.431 1310.42 Q176.065 1310.42 177.871 1306.88 Q179.7 1303.32 179.7 1296.21 Q179.7 1289.08 177.871 1285.54 Q176.065 1281.98 172.431 1281.98 M172.431 1278.27 Q178.241 1278.27 181.297 1282.88 Q184.376 1287.46 184.376 1296.21 Q184.376 1304.94 181.297 1309.55 Q178.241 1314.13 172.431 1314.13 Q166.621 1314.13 163.542 1309.55 Q160.487 1304.94 160.487 1296.21 Q160.487 1287.46 163.542 1282.88 Q166.621 1278.27 172.431 1278.27 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M202.593 1281.98 Q198.982 1281.98 197.153 1285.54 Q195.348 1289.08 195.348 1296.21 Q195.348 1303.32 197.153 1306.88 Q198.982 1310.42 202.593 1310.42 Q206.227 1310.42 208.033 1306.88 Q209.861 1303.32 209.861 1296.21 Q209.861 1289.08 208.033 1285.54 Q206.227 1281.98 202.593 1281.98 M202.593 1278.27 Q208.403 1278.27 211.459 1282.88 Q214.537 1287.46 214.537 1296.21 Q214.537 1304.94 211.459 1309.55 Q208.403 1314.13 202.593 1314.13 Q196.783 1314.13 193.704 1309.55 Q190.649 1304.94 190.649 1296.21 Q190.649 1287.46 193.704 1282.88 Q196.783 1278.27 202.593 1278.27 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M222.801 1278.9 L241.158 1278.9 L241.158 1282.83 L227.084 1282.83 L227.084 1291.3 Q228.102 1290.96 229.121 1290.8 Q230.139 1290.61 231.158 1290.61 Q236.945 1290.61 240.324 1293.78 Q243.704 1296.95 243.704 1302.37 Q243.704 1307.95 240.232 1311.05 Q236.76 1314.13 230.44 1314.13 Q228.264 1314.13 225.996 1313.76 Q223.75 1313.39 221.343 1312.65 L221.343 1307.95 Q223.426 1309.08 225.648 1309.64 Q227.871 1310.19 230.347 1310.19 Q234.352 1310.19 236.69 1308.09 Q239.028 1305.98 239.028 1302.37 Q239.028 1298.76 236.69 1296.65 Q234.352 1294.55 230.347 1294.55 Q228.473 1294.55 226.598 1294.96 Q224.746 1295.38 222.801 1296.26 L222.801 1278.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M126.205 1013.34 Q122.593 1013.34 120.765 1016.9 Q118.959 1020.44 118.959 1027.57 Q118.959 1034.68 120.765 1038.24 Q122.593 1041.79 126.205 1041.79 Q129.839 1041.79 131.644 1038.24 Q133.473 1034.68 133.473 1027.57 Q133.473 1020.44 131.644 1016.9 Q129.839 1013.34 126.205 1013.34 M126.205 1009.63 Q132.015 1009.63 135.07 1014.24 Q138.149 1018.82 138.149 1027.57 Q138.149 1036.3 135.07 1040.91 Q132.015 1045.49 126.205 1045.49 Q120.394 1045.49 117.316 1040.91 Q114.26 1036.3 114.26 1027.57 Q114.26 1018.82 117.316 1014.24 Q120.394 1009.63 126.205 1009.63 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M146.366 1038.94 L151.251 1038.94 L151.251 1044.82 L146.366 1044.82 L146.366 1038.94 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M171.436 1013.34 Q167.825 1013.34 165.996 1016.9 Q164.19 1020.44 164.19 1027.57 Q164.19 1034.68 165.996 1038.24 Q167.825 1041.79 171.436 1041.79 Q175.07 1041.79 176.876 1038.24 Q178.704 1034.68 178.704 1027.57 Q178.704 1020.44 176.876 1016.9 Q175.07 1013.34 171.436 1013.34 M171.436 1009.63 Q177.246 1009.63 180.301 1014.24 Q183.38 1018.82 183.38 1027.57 Q183.38 1036.3 180.301 1040.91 Q177.246 1045.49 171.436 1045.49 Q165.626 1045.49 162.547 1040.91 Q159.491 1036.3 159.491 1027.57 Q159.491 1018.82 162.547 1014.24 Q165.626 1009.63 171.436 1009.63 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M192.408 1040.88 L200.047 1040.88 L200.047 1014.52 L191.737 1016.18 L191.737 1011.92 L200 1010.26 L204.676 1010.26 L204.676 1040.88 L212.315 1040.88 L212.315 1044.82 L192.408 1044.82 L192.408 1040.88 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M231.76 1013.34 Q228.148 1013.34 226.32 1016.9 Q224.514 1020.44 224.514 1027.57 Q224.514 1034.68 226.32 1038.24 Q228.148 1041.79 231.76 1041.79 Q235.394 1041.79 237.199 1038.24 Q239.028 1034.68 239.028 1027.57 Q239.028 1020.44 237.199 1016.9 Q235.394 1013.34 231.76 1013.34 M231.76 1009.63 Q237.57 1009.63 240.625 1014.24 Q243.704 1018.82 243.704 1027.57 Q243.704 1036.3 240.625 1040.91 Q237.57 1045.49 231.76 1045.49 Q225.949 1045.49 222.871 1040.91 Q219.815 1036.3 219.815 1027.57 Q219.815 1018.82 222.871 1014.24 Q225.949 1009.63 231.76 1009.63 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M127.2 744.698 Q123.589 744.698 121.76 748.263 Q119.955 751.804 119.955 758.934 Q119.955 766.04 121.76 769.605 Q123.589 773.147 127.2 773.147 Q130.834 773.147 132.64 769.605 Q134.468 766.04 134.468 758.934 Q134.468 751.804 132.64 748.263 Q130.834 744.698 127.2 744.698 M127.2 740.994 Q133.01 740.994 136.066 745.601 Q139.144 750.184 139.144 758.934 Q139.144 767.661 136.066 772.267 Q133.01 776.85 127.2 776.85 Q121.39 776.85 118.311 772.267 Q115.256 767.661 115.256 758.934 Q115.256 750.184 118.311 745.601 Q121.39 740.994 127.2 740.994 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M147.362 770.3 L152.246 770.3 L152.246 776.179 L147.362 776.179 L147.362 770.3 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M172.431 744.698 Q168.82 744.698 166.991 748.263 Q165.186 751.804 165.186 758.934 Q165.186 766.04 166.991 769.605 Q168.82 773.147 172.431 773.147 Q176.065 773.147 177.871 769.605 Q179.7 766.04 179.7 758.934 Q179.7 751.804 177.871 748.263 Q176.065 744.698 172.431 744.698 M172.431 740.994 Q178.241 740.994 181.297 745.601 Q184.376 750.184 184.376 758.934 Q184.376 767.661 181.297 772.267 Q178.241 776.85 172.431 776.85 Q166.621 776.85 163.542 772.267 Q160.487 767.661 160.487 758.934 Q160.487 750.184 163.542 745.601 Q166.621 740.994 172.431 740.994 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M193.403 772.244 L201.042 772.244 L201.042 745.878 L192.732 747.545 L192.732 743.286 L200.996 741.619 L205.672 741.619 L205.672 772.244 L213.311 772.244 L213.311 776.179 L193.403 776.179 L193.403 772.244 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M222.801 741.619 L241.158 741.619 L241.158 745.554 L227.084 745.554 L227.084 754.027 Q228.102 753.679 229.121 753.517 Q230.139 753.332 231.158 753.332 Q236.945 753.332 240.324 756.503 Q243.704 759.675 243.704 765.091 Q243.704 770.67 240.232 773.772 Q236.76 776.85 230.44 776.85 Q228.264 776.85 225.996 776.48 Q223.75 776.11 221.343 775.369 L221.343 770.67 Q223.426 771.804 225.648 772.36 Q227.871 772.915 230.347 772.915 Q234.352 772.915 236.69 770.809 Q239.028 768.702 239.028 765.091 Q239.028 761.48 236.69 759.374 Q234.352 757.267 230.347 757.267 Q228.473 757.267 226.598 757.684 Q224.746 758.101 222.801 758.98 L222.801 741.619 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M126.205 476.059 Q122.593 476.059 120.765 479.624 Q118.959 483.165 118.959 490.295 Q118.959 497.401 120.765 500.966 Q122.593 504.508 126.205 504.508 Q129.839 504.508 131.644 500.966 Q133.473 497.401 133.473 490.295 Q133.473 483.165 131.644 479.624 Q129.839 476.059 126.205 476.059 M126.205 472.355 Q132.015 472.355 135.07 476.962 Q138.149 481.545 138.149 490.295 Q138.149 499.022 135.07 503.628 Q132.015 508.211 126.205 508.211 Q120.394 508.211 117.316 503.628 Q114.26 499.022 114.26 490.295 Q114.26 481.545 117.316 476.962 Q120.394 472.355 126.205 472.355 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M146.366 501.661 L151.251 501.661 L151.251 507.54 L146.366 507.54 L146.366 501.661 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M171.436 476.059 Q167.825 476.059 165.996 479.624 Q164.19 483.165 164.19 490.295 Q164.19 497.401 165.996 500.966 Q167.825 504.508 171.436 504.508 Q175.07 504.508 176.876 500.966 Q178.704 497.401 178.704 490.295 Q178.704 483.165 176.876 479.624 Q175.07 476.059 171.436 476.059 M171.436 472.355 Q177.246 472.355 180.301 476.962 Q183.38 481.545 183.38 490.295 Q183.38 499.022 180.301 503.628 Q177.246 508.211 171.436 508.211 Q165.626 508.211 162.547 503.628 Q159.491 499.022 159.491 490.295 Q159.491 481.545 162.547 476.962 Q165.626 472.355 171.436 472.355 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M195.625 503.605 L211.945 503.605 L211.945 507.54 L190 507.54 L190 503.605 Q192.663 500.85 197.246 496.221 Q201.852 491.568 203.033 490.225 Q205.278 487.702 206.158 485.966 Q207.061 484.207 207.061 482.517 Q207.061 479.763 205.116 478.026 Q203.195 476.29 200.093 476.29 Q197.894 476.29 195.44 477.054 Q193.01 477.818 190.232 479.369 L190.232 474.647 Q193.056 473.513 195.51 472.934 Q197.963 472.355 200 472.355 Q205.371 472.355 208.565 475.04 Q211.76 477.725 211.76 482.216 Q211.76 484.346 210.949 486.267 Q210.162 488.165 208.056 490.758 Q207.477 491.429 204.375 494.647 Q201.274 497.841 195.625 503.605 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M231.76 476.059 Q228.148 476.059 226.32 479.624 Q224.514 483.165 224.514 490.295 Q224.514 497.401 226.32 500.966 Q228.148 504.508 231.76 504.508 Q235.394 504.508 237.199 500.966 Q239.028 497.401 239.028 490.295 Q239.028 483.165 237.199 479.624 Q235.394 476.059 231.76 476.059 M231.76 472.355 Q237.57 472.355 240.625 476.962 Q243.704 481.545 243.704 490.295 Q243.704 499.022 240.625 503.628 Q237.57 508.211 231.76 508.211 Q225.949 508.211 222.871 503.628 Q219.815 499.022 219.815 490.295 Q219.815 481.545 222.871 476.962 Q225.949 472.355 231.76 472.355 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M127.2 207.42 Q123.589 207.42 121.76 210.985 Q119.955 214.526 119.955 221.656 Q119.955 228.762 121.76 232.327 Q123.589 235.869 127.2 235.869 Q130.834 235.869 132.64 232.327 Q134.468 228.762 134.468 221.656 Q134.468 214.526 132.64 210.985 Q130.834 207.42 127.2 207.42 M127.2 203.716 Q133.01 203.716 136.066 208.323 Q139.144 212.906 139.144 221.656 Q139.144 230.383 136.066 234.989 Q133.01 239.572 127.2 239.572 Q121.39 239.572 118.311 234.989 Q115.256 230.383 115.256 221.656 Q115.256 212.906 118.311 208.323 Q121.39 203.716 127.2 203.716 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M147.362 233.022 L152.246 233.022 L152.246 238.901 L147.362 238.901 L147.362 233.022 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M172.431 207.42 Q168.82 207.42 166.991 210.985 Q165.186 214.526 165.186 221.656 Q165.186 228.762 166.991 232.327 Q168.82 235.869 172.431 235.869 Q176.065 235.869 177.871 232.327 Q179.7 228.762 179.7 221.656 Q179.7 214.526 177.871 210.985 Q176.065 207.42 172.431 207.42 M172.431 203.716 Q178.241 203.716 181.297 208.323 Q184.376 212.906 184.376 221.656 Q184.376 230.383 181.297 234.989 Q178.241 239.572 172.431 239.572 Q166.621 239.572 163.542 234.989 Q160.487 230.383 160.487 221.656 Q160.487 212.906 163.542 208.323 Q166.621 203.716 172.431 203.716 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M196.621 234.966 L212.94 234.966 L212.94 238.901 L190.996 238.901 L190.996 234.966 Q193.658 232.211 198.241 227.582 Q202.848 222.929 204.028 221.586 Q206.274 219.063 207.153 217.327 Q208.056 215.568 208.056 213.878 Q208.056 211.123 206.112 209.387 Q204.19 207.651 201.088 207.651 Q198.889 207.651 196.436 208.415 Q194.005 209.179 191.227 210.73 L191.227 206.008 Q194.051 204.874 196.505 204.295 Q198.959 203.716 200.996 203.716 Q206.366 203.716 209.561 206.401 Q212.755 209.086 212.755 213.577 Q212.755 215.707 211.945 217.628 Q211.158 219.526 209.051 222.119 Q208.473 222.79 205.371 226.008 Q202.269 229.202 196.621 234.966 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M222.801 204.341 L241.158 204.341 L241.158 208.276 L227.084 208.276 L227.084 216.748 Q228.102 216.401 229.121 216.239 Q230.139 216.054 231.158 216.054 Q236.945 216.054 240.324 219.225 Q243.704 222.397 243.704 227.813 Q243.704 233.392 240.232 236.494 Q236.76 239.572 230.44 239.572 Q228.264 239.572 225.996 239.202 Q223.75 238.832 221.343 238.091 L221.343 233.392 Q223.426 234.526 225.648 235.082 Q227.871 235.637 230.347 235.637 Q234.352 235.637 236.69 233.531 Q239.028 231.424 239.028 227.813 Q239.028 224.202 236.69 222.096 Q234.352 219.989 230.347 219.989 Q228.473 219.989 226.598 220.406 Q224.746 220.823 222.801 221.702 L222.801 204.341 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M58.657 783.384 L77.5631 783.384 L77.5631 789.272 L28.3562 789.272 L28.3562 783.384 L33.7671 783.384 Q30.5842 781.538 29.0564 778.737 Q27.4968 775.904 27.4968 771.989 Q27.4968 765.496 32.6531 761.454 Q37.8093 757.38 46.212 757.38 Q54.6147 757.38 59.771 761.454 Q64.9272 765.496 64.9272 771.989 Q64.9272 775.904 63.3994 778.737 Q61.8398 781.538 58.657 783.384 M46.212 763.459 Q39.7508 763.459 36.0905 766.133 Q32.3984 768.775 32.3984 773.421 Q32.3984 778.068 36.0905 780.742 Q39.7508 783.384 46.212 783.384 Q52.6732 783.384 56.3653 780.742 Q60.0256 778.068 60.0256 773.421 Q60.0256 768.775 56.3653 766.133 Q52.6732 763.459 46.212 763.459 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1118.75 34.0924 L1118.75 9.54393 L1126.2 9.54393 L1126.2 72.576 L1118.75 72.576 L1118.75 65.7705 Q1116.4 69.8214 1112.79 71.8063 Q1109.23 73.7508 1104.21 73.7508 Q1095.98 73.7508 1090.8 67.1883 Q1085.65 60.6258 1085.65 49.9314 Q1085.65 39.2371 1090.8 32.6746 Q1095.98 26.1121 1104.21 26.1121 Q1109.23 26.1121 1112.79 28.0971 Q1116.4 30.0415 1118.75 34.0924 M1093.35 49.9314 Q1093.35 58.1548 1096.71 62.8538 Q1100.11 67.5124 1106.03 67.5124 Q1111.94 67.5124 1115.35 62.8538 Q1118.75 58.1548 1118.75 49.9314 Q1118.75 41.7081 1115.35 37.0496 Q1111.94 32.3505 1106.03 32.3505 Q1100.11 32.3505 1096.71 37.0496 Q1093.35 41.7081 1093.35 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1141.55 27.2059 L1149.01 27.2059 L1149.01 72.576 L1141.55 72.576 L1141.55 27.2059 M1141.55 9.54393 L1149.01 9.54393 L1149.01 18.9825 L1141.55 18.9825 L1141.55 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1193.53 28.5427 L1193.53 35.5912 Q1190.37 33.9709 1186.97 33.1607 Q1183.56 32.3505 1179.92 32.3505 Q1174.37 32.3505 1171.57 34.0519 Q1168.82 35.7533 1168.82 39.156 Q1168.82 41.7486 1170.8 43.2475 Q1172.79 44.7058 1178.78 46.0426 L1181.33 46.6097 Q1189.27 48.3111 1192.6 51.4303 Q1195.96 54.509 1195.96 60.0587 Q1195.96 66.3781 1190.94 70.0644 Q1185.95 73.7508 1177.2 73.7508 Q1173.56 73.7508 1169.59 73.0216 Q1165.66 72.3329 1161.28 70.9151 L1161.28 63.2184 Q1165.41 65.3654 1169.43 66.4591 Q1173.44 67.5124 1177.36 67.5124 Q1182.63 67.5124 1185.47 65.73 Q1188.3 63.9071 1188.3 60.6258 Q1188.3 57.5877 1186.24 55.9673 Q1184.21 54.3469 1177.28 52.8481 L1174.69 52.2405 Q1167.76 50.7821 1164.69 47.7845 Q1161.61 44.7463 1161.61 39.4801 Q1161.61 33.0797 1166.14 29.5959 Q1170.68 26.1121 1179.03 26.1121 Q1183.16 26.1121 1186.8 26.7198 Q1190.45 27.3274 1193.53 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1215.2 14.324 L1215.2 27.2059 L1230.55 27.2059 L1230.55 32.9987 L1215.2 32.9987 L1215.2 57.6282 Q1215.2 63.1779 1216.7 64.7578 Q1218.24 66.3376 1222.9 66.3376 L1230.55 66.3376 L1230.55 72.576 L1222.9 72.576 Q1214.27 72.576 1210.99 69.3758 Q1207.71 66.1351 1207.71 57.6282 L1207.71 32.9987 L1202.24 32.9987 L1202.24 27.2059 L1207.71 27.2059 L1207.71 14.324 L1215.2 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1266.65 34.1734 Q1265.39 33.4443 1263.89 33.1202 Q1262.43 32.7556 1260.65 32.7556 Q1254.33 32.7556 1250.93 36.8875 Q1247.57 40.9789 1247.57 48.6757 L1247.57 72.576 L1240.07 72.576 L1240.07 27.2059 L1247.57 27.2059 L1247.57 34.2544 Q1249.92 30.1225 1253.68 28.1376 Q1257.45 26.1121 1262.84 26.1121 Q1263.61 26.1121 1264.54 26.2337 Q1265.47 26.3147 1266.61 26.5172 L1266.65 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1274.47 27.2059 L1281.92 27.2059 L1281.92 72.576 L1274.47 72.576 L1274.47 27.2059 M1274.47 9.54393 L1281.92 9.54393 L1281.92 18.9825 L1274.47 18.9825 L1274.47 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1330.08 49.9314 Q1330.08 41.7081 1326.68 37.0496 Q1323.32 32.3505 1317.4 32.3505 Q1311.49 32.3505 1308.09 37.0496 Q1304.73 41.7081 1304.73 49.9314 Q1304.73 58.1548 1308.09 62.8538 Q1311.49 67.5124 1317.4 67.5124 Q1323.32 67.5124 1326.68 62.8538 Q1330.08 58.1548 1330.08 49.9314 M1304.73 34.0924 Q1307.07 30.0415 1310.64 28.0971 Q1314.24 26.1121 1319.23 26.1121 Q1327.49 26.1121 1332.64 32.6746 Q1337.82 39.2371 1337.82 49.9314 Q1337.82 60.6258 1332.64 67.1883 Q1327.49 73.7508 1319.23 73.7508 Q1314.24 73.7508 1310.64 71.8063 Q1307.07 69.8214 1304.73 65.7705 L1304.73 72.576 L1297.23 72.576 L1297.23 9.54393 L1304.73 9.54393 L1304.73 34.0924 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1349.41 54.671 L1349.41 27.2059 L1356.86 27.2059 L1356.86 54.3874 Q1356.86 60.8284 1359.37 64.0691 Q1361.88 67.2693 1366.91 67.2693 Q1372.94 67.2693 1376.43 63.421 Q1379.95 59.5726 1379.95 52.9291 L1379.95 27.2059 L1387.4 27.2059 L1387.4 72.576 L1379.95 72.576 L1379.95 65.6084 Q1377.24 69.7404 1373.63 71.7658 Q1370.07 73.7508 1365.33 73.7508 Q1357.51 73.7508 1353.46 68.8897 Q1349.41 64.0286 1349.41 54.671 M1368.16 26.1121 L1368.16 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1410.13 14.324 L1410.13 27.2059 L1425.48 27.2059 L1425.48 32.9987 L1410.13 32.9987 L1410.13 57.6282 Q1410.13 63.1779 1411.63 64.7578 Q1413.17 66.3376 1417.83 66.3376 L1425.48 66.3376 L1425.48 72.576 L1417.83 72.576 Q1409.2 72.576 1405.92 69.3758 Q1402.64 66.1351 1402.64 57.6282 L1402.64 32.9987 L1397.17 32.9987 L1397.17 27.2059 L1402.64 27.2059 L1402.64 14.324 L1410.13 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1435.29 27.2059 L1442.74 27.2059 L1442.74 72.576 L1435.29 72.576 L1435.29 27.2059 M1435.29 9.54393 L1442.74 9.54393 L1442.74 18.9825 L1435.29 18.9825 L1435.29 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1475.92 32.4315 Q1469.92 32.4315 1466.44 37.1306 Q1462.95 41.7891 1462.95 49.9314 Q1462.95 58.0738 1466.4 62.7728 Q1469.88 67.4314 1475.92 67.4314 Q1481.87 67.4314 1485.36 62.7323 Q1488.84 58.0333 1488.84 49.9314 Q1488.84 41.8701 1485.36 37.1711 Q1481.87 32.4315 1475.92 32.4315 M1475.92 26.1121 Q1485.64 26.1121 1491.19 32.4315 Q1496.74 38.7509 1496.74 49.9314 Q1496.74 61.0714 1491.19 67.4314 Q1485.64 73.7508 1475.92 73.7508 Q1466.15 73.7508 1460.6 67.4314 Q1455.09 61.0714 1455.09 49.9314 Q1455.09 38.7509 1460.6 32.4315 Q1466.15 26.1121 1475.92 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1546.81 45.1919 L1546.81 72.576 L1539.35 72.576 L1539.35 45.4349 Q1539.35 38.994 1536.84 35.7938 Q1534.33 32.5936 1529.31 32.5936 Q1523.27 32.5936 1519.79 36.4419 Q1516.3 40.2903 1516.3 46.9338 L1516.3 72.576 L1508.81 72.576 L1508.81 27.2059 L1516.3 27.2059 L1516.3 34.2544 Q1518.98 30.163 1522.58 28.1376 Q1526.23 26.1121 1530.97 26.1121 Q1538.79 26.1121 1542.8 30.9732 Q1546.81 35.7938 1546.81 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip852)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  338.375,1336.85 369.418,1305.21 400.461,1274.53 431.504,1244.04 462.547,1207.58 493.59,1169.92 524.633,1128.39 555.676,1083.68 586.719,1044.49 617.762,989.824 \n  648.805,953.065 679.848,893.88 710.891,846.105 741.934,798.002 772.977,737.754 804.02,688.12 835.063,632.653 866.106,586.821 897.149,531.976 928.192,480.82 \n  959.235,434.751 990.278,390.068 1021.32,338.724 1052.36,311.478 1083.41,271.584 1114.45,244.54 1145.49,217.471 1176.54,193.979 1207.58,170.929 1238.62,167.455 \n  1269.67,161.048 1300.71,160.256 1331.75,169.439 1362.79,177.021 1393.84,197.574 1424.88,211.917 1455.92,243.79 1486.97,269.638 1518.01,308.813 1549.05,340.142 \n  1580.1,391.465 1611.14,423.662 1642.18,481.517 1673.22,535.692 1704.27,576.986 1735.31,640.027 1766.35,686.584 1797.4,737.17 1828.44,803.649 1859.48,852.929 \n  1890.53,893.708 1921.57,941.877 1952.61,993.452 1983.65,1037.75 2014.7,1093.09 2045.74,1122.54 2076.78,1171.37 2107.83,1208.65 2138.87,1243.06 2169.91,1279.3 \n  2200.96,1301.79 2232,1341.88 2263.04,1363.12 2294.08,1384.84 \n  \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  338.375,1336.61 369.418,1308.24 400.461,1277.46 431.504,1244.25 462.547,1208.6 493.59,1170.52 524.633,1130.07 555.676,1087.34 586.719,1042.45 617.762,995.578 \n  648.805,946.914 679.848,896.704 710.891,845.231 741.934,792.814 772.977,739.808 804.02,686.599 835.063,633.604 866.106,581.26 897.149,530.024 928.192,480.363 \n  959.235,432.75 990.278,387.654 1021.32,345.533 1052.36,306.829 1083.41,271.956 1114.45,241.297 1145.49,215.193 1176.54,193.939 1207.58,177.78 1238.62,166.901 \n  1269.67,161.43 1300.71,161.43 1331.75,166.901 1362.79,177.78 1393.84,193.939 1424.88,215.193 1455.92,241.297 1486.97,271.956 1518.01,306.829 1549.05,345.533 \n  1580.1,387.654 1611.14,432.75 1642.18,480.363 1673.22,530.024 1704.27,581.26 1735.31,633.604 1766.35,686.599 1797.4,739.808 1828.44,792.814 1859.48,845.231 \n  1890.53,896.704 1921.57,946.914 1952.61,995.578 1983.65,1042.45 2014.7,1087.34 2045.74,1130.07 2076.78,1170.52 2107.83,1208.6 2138.87,1244.25 2169.91,1277.46 \n  2200.96,1308.24 2232,1336.61 2263.04,1362.64 2294.08,1386.4 \n  \"/>\n<path clip-path=\"url(#clip850)\" d=\"\nM1889.29 322.316 L2283.65 322.316 L2283.65 166.796 L1889.29 166.796  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1889.29,322.316 2283.65,322.316 2283.65,166.796 1889.29,166.796 1889.29,322.316 \n  \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1912.32,218.636 2050.53,218.636 \n  \"/>\n<path clip-path=\"url(#clip850)\" d=\"M2080.97 202.629 L2080.97 209.99 L2089.74 209.99 L2089.74 213.3 L2080.97 213.3 L2080.97 227.374 Q2080.97 230.545 2081.82 231.448 Q2082.7 232.351 2085.36 232.351 L2089.74 232.351 L2089.74 235.916 L2085.36 235.916 Q2080.43 235.916 2078.56 234.087 Q2076.68 232.235 2076.68 227.374 L2076.68 213.3 L2073.56 213.3 L2073.56 209.99 L2076.68 209.99 L2076.68 202.629 L2080.97 202.629 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2110.36 213.971 Q2109.65 213.555 2108.79 213.37 Q2107.96 213.161 2106.94 213.161 Q2103.33 213.161 2101.38 215.522 Q2099.46 217.86 2099.46 222.258 L2099.46 235.916 L2095.18 235.916 L2095.18 209.99 L2099.46 209.99 L2099.46 214.018 Q2100.8 211.657 2102.96 210.522 Q2105.11 209.365 2108.19 209.365 Q2108.63 209.365 2109.16 209.434 Q2109.69 209.481 2110.34 209.596 L2110.36 213.971 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2126.61 222.883 Q2121.45 222.883 2119.46 224.064 Q2117.47 225.244 2117.47 228.092 Q2117.47 230.36 2118.95 231.703 Q2120.46 233.022 2123.03 233.022 Q2126.57 233.022 2128.7 230.522 Q2130.85 227.999 2130.85 223.832 L2130.85 222.883 L2126.61 222.883 M2135.11 221.124 L2135.11 235.916 L2130.85 235.916 L2130.85 231.981 Q2129.39 234.342 2127.22 235.476 Q2125.04 236.587 2121.89 236.587 Q2117.91 236.587 2115.55 234.365 Q2113.21 232.119 2113.21 228.369 Q2113.21 223.994 2116.13 221.772 Q2119.07 219.55 2124.88 219.55 L2130.85 219.55 L2130.85 219.133 Q2130.85 216.194 2128.91 214.596 Q2126.99 212.976 2123.49 212.976 Q2121.27 212.976 2119.16 213.508 Q2117.05 214.041 2115.11 215.106 L2115.11 211.17 Q2117.45 210.268 2119.65 209.828 Q2121.85 209.365 2123.93 209.365 Q2129.55 209.365 2132.33 212.282 Q2135.11 215.198 2135.11 221.124 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2143.88 209.99 L2148.14 209.99 L2148.14 235.916 L2143.88 235.916 L2143.88 209.99 M2143.88 199.897 L2148.14 199.897 L2148.14 205.291 L2143.88 205.291 L2143.88 199.897 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2178.61 220.268 L2178.61 235.916 L2174.35 235.916 L2174.35 220.407 Q2174.35 216.726 2172.91 214.897 Q2171.48 213.069 2168.61 213.069 Q2165.16 213.069 2163.17 215.268 Q2161.17 217.467 2161.17 221.263 L2161.17 235.916 L2156.89 235.916 L2156.89 209.99 L2161.17 209.99 L2161.17 214.018 Q2162.7 211.68 2164.76 210.522 Q2166.85 209.365 2169.55 209.365 Q2174.02 209.365 2176.31 212.143 Q2178.61 214.897 2178.61 220.268 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2209.28 221.888 L2209.28 223.971 L2189.69 223.971 Q2189.97 228.369 2192.33 230.684 Q2194.72 232.976 2198.95 232.976 Q2201.41 232.976 2203.7 232.374 Q2206.01 231.772 2208.28 230.569 L2208.28 234.596 Q2205.99 235.568 2203.58 236.078 Q2201.17 236.587 2198.7 236.587 Q2192.49 236.587 2188.86 232.976 Q2185.25 229.365 2185.25 223.207 Q2185.25 216.842 2188.67 213.115 Q2192.12 209.365 2197.96 209.365 Q2203.19 209.365 2206.22 212.745 Q2209.28 216.101 2209.28 221.888 M2205.02 220.638 Q2204.97 217.143 2203.05 215.059 Q2201.15 212.976 2198 212.976 Q2194.44 212.976 2192.29 214.99 Q2190.16 217.004 2189.83 220.661 L2205.02 220.638 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2233.33 213.925 L2233.33 199.897 L2237.59 199.897 L2237.59 235.916 L2233.33 235.916 L2233.33 232.027 Q2231.98 234.342 2229.92 235.476 Q2227.89 236.587 2225.02 236.587 Q2220.32 236.587 2217.35 232.837 Q2214.42 229.087 2214.42 222.976 Q2214.42 216.865 2217.35 213.115 Q2220.32 209.365 2225.02 209.365 Q2227.89 209.365 2229.92 210.499 Q2231.98 211.61 2233.33 213.925 M2218.81 222.976 Q2218.81 227.675 2220.73 230.36 Q2222.68 233.022 2226.06 233.022 Q2229.44 233.022 2231.38 230.36 Q2233.33 227.675 2233.33 222.976 Q2233.33 218.277 2231.38 215.615 Q2229.44 212.93 2226.06 212.93 Q2222.68 212.93 2220.73 215.615 Q2218.81 218.277 2218.81 222.976 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1912.32,270.476 2050.53,270.476 \n  \"/>\n<path clip-path=\"url(#clip850)\" d=\"M2080.97 254.469 L2080.97 261.83 L2089.74 261.83 L2089.74 265.14 L2080.97 265.14 L2080.97 279.214 Q2080.97 282.385 2081.82 283.288 Q2082.7 284.191 2085.36 284.191 L2089.74 284.191 L2089.74 287.756 L2085.36 287.756 Q2080.43 287.756 2078.56 285.927 Q2076.68 284.075 2076.68 279.214 L2076.68 265.14 L2073.56 265.14 L2073.56 261.83 L2076.68 261.83 L2076.68 254.469 L2080.97 254.469 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2107.12 274.723 Q2101.96 274.723 2099.97 275.904 Q2097.98 277.084 2097.98 279.932 Q2097.98 282.2 2099.46 283.543 Q2100.97 284.862 2103.54 284.862 Q2107.08 284.862 2109.21 282.362 Q2111.36 279.839 2111.36 275.672 L2111.36 274.723 L2107.12 274.723 M2115.62 272.964 L2115.62 287.756 L2111.36 287.756 L2111.36 283.821 Q2109.9 286.182 2107.73 287.316 Q2105.55 288.427 2102.4 288.427 Q2098.42 288.427 2096.06 286.205 Q2093.72 283.959 2093.72 280.209 Q2093.72 275.834 2096.64 273.612 Q2099.58 271.39 2105.39 271.39 L2111.36 271.39 L2111.36 270.973 Q2111.36 268.034 2109.42 266.436 Q2107.49 264.816 2104 264.816 Q2101.78 264.816 2099.67 265.348 Q2097.56 265.881 2095.62 266.946 L2095.62 263.01 Q2097.96 262.108 2100.16 261.668 Q2102.36 261.205 2104.44 261.205 Q2110.06 261.205 2112.84 264.122 Q2115.62 267.038 2115.62 272.964 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2139.42 265.811 Q2138.7 265.395 2137.84 265.21 Q2137.01 265.001 2135.99 265.001 Q2132.38 265.001 2130.43 267.362 Q2128.51 269.7 2128.51 274.098 L2128.51 287.756 L2124.23 287.756 L2124.23 261.83 L2128.51 261.83 L2128.51 265.858 Q2129.86 263.497 2132.01 262.362 Q2134.16 261.205 2137.24 261.205 Q2137.68 261.205 2138.21 261.274 Q2138.74 261.321 2139.39 261.436 L2139.42 265.811 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2160.11 274.492 Q2160.11 269.862 2158.19 267.316 Q2156.29 264.77 2152.84 264.77 Q2149.42 264.77 2147.49 267.316 Q2145.6 269.862 2145.6 274.492 Q2145.6 279.098 2147.49 281.645 Q2149.42 284.191 2152.84 284.191 Q2156.29 284.191 2158.19 281.645 Q2160.11 279.098 2160.11 274.492 M2164.37 284.538 Q2164.37 291.158 2161.43 294.376 Q2158.49 297.617 2152.42 297.617 Q2150.18 297.617 2148.19 297.27 Q2146.2 296.945 2144.32 296.251 L2144.32 292.108 Q2146.2 293.126 2148.03 293.612 Q2149.86 294.098 2151.75 294.098 Q2155.94 294.098 2158.03 291.899 Q2160.11 289.723 2160.11 285.302 L2160.11 283.196 Q2158.79 285.487 2156.73 286.621 Q2154.67 287.756 2151.8 287.756 Q2147.03 287.756 2144.11 284.121 Q2141.2 280.487 2141.2 274.492 Q2141.2 268.473 2144.11 264.839 Q2147.03 261.205 2151.8 261.205 Q2154.67 261.205 2156.73 262.339 Q2158.79 263.473 2160.11 265.765 L2160.11 261.83 L2164.37 261.83 L2164.37 284.538 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2195.32 273.728 L2195.32 275.811 L2175.73 275.811 Q2176.01 280.209 2178.37 282.524 Q2180.76 284.816 2184.99 284.816 Q2187.45 284.816 2189.74 284.214 Q2192.05 283.612 2194.32 282.409 L2194.32 286.436 Q2192.03 287.408 2189.62 287.918 Q2187.22 288.427 2184.74 288.427 Q2178.54 288.427 2174.9 284.816 Q2171.29 281.205 2171.29 275.047 Q2171.29 268.682 2174.72 264.955 Q2178.17 261.205 2184 261.205 Q2189.23 261.205 2192.26 264.585 Q2195.32 267.941 2195.32 273.728 M2191.06 272.478 Q2191.01 268.983 2189.09 266.899 Q2187.19 264.816 2184.04 264.816 Q2180.48 264.816 2178.33 266.83 Q2176.2 268.844 2175.87 272.501 L2191.06 272.478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2206.52 254.469 L2206.52 261.83 L2215.29 261.83 L2215.29 265.14 L2206.52 265.14 L2206.52 279.214 Q2206.52 282.385 2207.38 283.288 Q2208.26 284.191 2210.92 284.191 L2215.29 284.191 L2215.29 287.756 L2210.92 287.756 Q2205.99 287.756 2204.11 285.927 Q2202.24 284.075 2202.24 279.214 L2202.24 265.14 L2199.11 265.14 L2199.11 261.83 L2202.24 261.83 L2202.24 254.469 L2206.52 254.469 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"So within 50 steps, we got a pretty close estimation of our target distribution!","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"This page was generated using Literate.jl.","category":"page"},{"location":"quick-start.html#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"In this quick start, we list several common use cases for Yao before you go deeper into the manual.","category":"page"},{"location":"quick-start.html#Create-a-quantum-register/state","page":"Quick Start","title":"Create a quantum register/state","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"A register is an object that describes a device with an internal state. See Registers for more details. Yao use registers to represent quantum states. The most common register is the ArrayReg, you can create it by feeding a state vector to it, e.g","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"using Yao\nArrayReg(rand(ComplexF64, 2^3))\nzero_state(5)\nrand_state(5)\nproduct_state(bit\"10100\")\nghz_state(5)","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"the internal quantum state can be accessed via statevec method","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"statevec(ghz_state(2))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"for more functionalities about registers please refer to the manual of registers.","category":"page"},{"location":"quick-start.html#Create-quantum-circuit-with-Yao-blocks","page":"Quick Start","title":"Create quantum circuit with Yao blocks","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"Yao uses the quantum \"block\"s to describe quantum circuits, e.g the following code creates a 2-qubit circuit","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"chain(2, put(1=>H), put(2=>X))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"where H gate is at 1st qubit, X gate is at 2nd qubit. A more advanced example is the quantum Fourier transform circuit","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))))\nB(n, k) = chain(n, j==k ? put(k=>H) : A(j, k) for j in k:n)\nqft(n) = chain(B(n, k) for k in 1:n)\nqft(3)","category":"page"},{"location":"quick-start.html#Create-Hamiltonian-with-Yao-blocks","page":"Quick Start","title":"Create Hamiltonian with Yao blocks","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"the quantum \"block\"s are expressions on quantum operators, thus, it can also be used to represent a Hamiltonian, e.g we can create a simple Ising Hamiltonian on 1D chain as following","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"sum(kron(5, i=>Z, mod1(i+1, 5)=>Z) for i in 1:5)","category":"page"},{"location":"quick-start.html#Automatic-differentiate-a-Yao-block","page":"Quick Start","title":"Automatic differentiate a Yao block","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"Yao has its own automatic differentiation rule implemented, this allows one obtain gradients of a loss function by simply putting a ' mark behind expect or fidelity, e.g","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"expect'(X, zero_state(1)=>Rx(0.2))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"or for fiedlity","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"fidelity'(zero_state(1)=>Rx(0.1), zero_state(1)=>Rx(0.2))","category":"page"},{"location":"quick-start.html#Combine-Yao-with-ChainRules/Zygote","page":"Quick Start","title":"Combine Yao with ChainRules/Zygote","text":"","category":"section"},{"location":"quick-start.html#Symbolic-calculation-with-Yao-block","page":"Quick Start","title":"Symbolic calculation with Yao block","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"Yao supports symbolic calculation of quantum circuit via SymEngine. We can show","category":"page"},{"location":"quick-start.html#Plot-quantum-circuits","page":"Quick Start","title":"Plot quantum circuits","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"The YaoPlots in Yao's ecosystem provides plotting for quantum circuits and ZX diagrams.","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"using Yao.EasyBuild, YaoPlots\nusing Compose\n\n# show a qft circuit\nCompose.SVG(plot(qft_circuit(5)))","category":"page"},{"location":"quick-start.html#Convert-quantum-circuits-to-tensor-network","page":"Quick Start","title":"Convert quantum circuits to tensor network","text":"","category":"section"},{"location":"quick-start.html#Simplify-quantum-circuit-with-ZX-calculus","page":"Quick Start","title":"Simplify quantum circuit with ZX calculus","text":"","category":"section"},{"location":"notes.html#How-to-overload-exist-method-for-a-block","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"","category":"section"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"every block has two method: mat & apply!, overload mat to define how to gather this block's matrix form, overload apply! to define how to apply this block to a register.","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"Prototypes:","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"apply!(reg, block)\nmat(block)","category":"page"},{"location":"performancetips.html#Performance-Tips","page":"Performance Tips","title":"Performance Tips","text":"","category":"section"},{"location":"performancetips.html#Use-the-correct-block-types","page":"Performance Tips","title":"Use the correct block types","text":"","category":"section"},{"location":"performancetips.html#put-v.s.-subroutine","page":"Performance Tips","title":"put v.s. subroutine","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"While both blocks maps a subblock to a subset of qudits, their implementations are purposes are quite different. The put block applies the gate in a in-place manner, which requires the static matrix representation of its subblock. It works the best when the subblock is small.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"The subroutine block is for running a sub-program in a subset of qubits. It first sets target qubits as active qubits using the focus! function, then apply the gates on active qubits. Finally, it unsets the active qubits with the relax! function.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> using Yao\n\njulia> reg = rand_state(20);\n\njulia> @time apply(reg, put(20, 1:6=>EasyBuild.qft_circuit(6)));  # second run\n  0.070245 seconds (1.32 k allocations: 16.525 MiB)\n\njulia> @time apply(reg, subroutine(20, EasyBuild.qft_circuit(6), 1:6));  # second run\n  0.036840 seconds (1.07 k allocations: 16.072 MiB)","category":"page"},{"location":"performancetips.html#repeat-v.s.-put","page":"Performance Tips","title":"repeat v.s. put","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"repeat block is not only an alias of a chain of put, sometimes it can provide speed ups due to the different implementations.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> reg = rand_state(20);\n\njulia> @time apply!(reg, repeat(20, X));\n  0.002252 seconds (5 allocations: 656 bytes)\n\njulia> @time apply!(reg, chain([put(20, i=>X) for i=1:20]));\n  0.049362 seconds (82.48 k allocations: 4.694 MiB, 47.11% compilation time)","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Other gates accelerated by repeat include: X, Y, Z, S, T, Sdag, and Tdag.","category":"page"},{"location":"performancetips.html#Diagonal-matrix-in-time_evole","page":"Performance Tips","title":"Diagonal matrix in time_evole","text":"","category":"section"},{"location":"performancetips.html#Register-storage","page":"Performance Tips","title":"Register storage","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"One can use transposed storage and normal storage for computing batched registers. The transposed storage is used by default because it is often faster in practice. One can use transpose_storage to convert the storage.","category":"page"},{"location":"performancetips.html#Multithreading","page":"Performance Tips","title":"Multithreading","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Multithreading can be switched on by starting Julia in with a global environment variable JULIA_NUM_THREAD","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"$ JULIA_NUM_THREAD=4 julia xxx.jl","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Check the Julia Multi-Treading manual for details.","category":"page"},{"location":"performancetips.html#GPU-backend","page":"Performance Tips","title":"GPU backend","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"The GPU backend is supported in CuYao.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> using Yao, CuYao\n\njulia> reg = CuYao.cu(rand_state(20));\n\njulia> circ = Yao.EasyBuild.qft_circuit(20);\n\njulia> apply!(reg, circ)\nArrayReg{2, ComplexF64, CuArray...}\n    active qubits: 20/20\n    nlevel: 2","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"EditURL = \"<unknown>/docs/src/quick-start/1.prepare-ghz-state/main.jl\"","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#example-ghz","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, you have to use this package in Julia.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"using Yao","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Now, we just define the circuit according to the circuit image below: (Image: ghz)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Let me explain what happens here.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Put-single-qubit-gate-X-to-location-1","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Put single qubit gate X to location 1","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"we have an X gate applied to the first qubit. We need to tell Yao to put this gate on the first qubit by","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, 1=>X)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We use Julia's Pair to denote the gate and its location in the circuit, for two-qubit gate, you could also use a tuple of locations:","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, (1, 2)=>swap(2, 1, 2))","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1, 2)\n└─ put on (1, 2)\n   └─ SWAP\n","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"But, wait, why there's no 4 in the definition above? This is because all the functions in Yao that requires to input the number of qubits as its first arguement could be lazy (curried), and let other constructors to infer the total number of qubits later, e.g","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> put(n, 1 => X))","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"which will return a lambda that ask for a single arguement n.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)(4)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Apply-the-same-gate-on-different-locations","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Apply the same gate on different locations","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"next we should put Hadmard gates on all locations except the 1st qubits.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We provide repeat to apply the same block repeatly, repeat can take an iterator of desired locations, and like put, we can also leave the total number of qubits there.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"repeat(H, 2:4)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> repeat(n, H, 2:4...))","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Define-control-gates","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Define control gates","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"In Yao, we could define controlled gates by feeding a gate to control","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(4, 2, 1=>X)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\ncontrol(2)\n└─ (1,) X","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Like many others, you could leave the number of total qubits there, and infer it later.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(2, 1=>X)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> control(n, 2, 1 => X))","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Composite-each-part-together","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Composite each part together","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This will create a ControlBlock, the concept of block in Yao basically just means quantum operators, since the quantum circuit itself is a quantum operator, we could create a quantum circuit by composite each part of.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Here, we use chain to chain each part together, a chain of quantum operators means to apply each operators one by one in the chain. This will create a ChainBlock.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"You can check the type of it with typeof","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"typeof(circuit)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ChainBlock{4}","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Construct-GHZ-state-from-00...00","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Construct GHZ state from 00...00","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"For simulation, we provide a builtin register type called ArrayReg, we will use the simulated register in this example.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, let's create 0000, you can create it with zero_state","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"zero_state(4)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Or we also provide bit string literals to create arbitrary eigen state","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg(bit\"0000\")","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"They will both create a register with Julia's builtin Array as storage.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html#Feed-Registers-to-Circuits","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Feed Registers to Circuits","text":"","category":"section"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Circuits can be applied to registers with apply!","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"apply!(zero_state(4), circuit)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"or you can use pipe operator |>, when you want to chain several operations together, here we measure the state right after the circuit for 1000 times","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"results = zero_state(4) |> circuit |> r->measure(r, nshots=1000)\n\nusing StatsBase, Plots\n\nhist = fit(Histogram, Int.(results), 0:16)\nbar(hist.edges[1] .- 0.5, hist.weights, legend=:none)","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM172.015 1486.45 L2352.76 1486.45 L2352.76 47.2441 L172.015 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"172\" y=\"47\" width=\"2182\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  341.095,1486.45 341.095,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  955.289,1486.45 955.289,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  341.095,1486.45 341.095,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  955.289,1486.45 955.289,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,1467.55 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M341.095 1517.37 Q337.484 1517.37 335.655 1520.93 Q333.85 1524.47 333.85 1531.6 Q333.85 1538.71 335.655 1542.27 Q337.484 1545.82 341.095 1545.82 Q344.729 1545.82 346.535 1542.27 Q348.363 1538.71 348.363 1531.6 Q348.363 1524.47 346.535 1520.93 Q344.729 1517.37 341.095 1517.37 M341.095 1513.66 Q346.905 1513.66 349.961 1518.27 Q353.039 1522.85 353.039 1531.6 Q353.039 1540.33 349.961 1544.94 Q346.905 1549.52 341.095 1549.52 Q335.285 1549.52 332.206 1544.94 Q329.151 1540.33 329.151 1531.6 Q329.151 1522.85 332.206 1518.27 Q335.285 1513.66 341.095 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M945.566 1514.29 L963.923 1514.29 L963.923 1518.22 L949.849 1518.22 L949.849 1526.7 Q950.867 1526.35 951.886 1526.19 Q952.904 1526 953.923 1526 Q959.71 1526 963.089 1529.17 Q966.469 1532.34 966.469 1537.76 Q966.469 1543.34 962.997 1546.44 Q959.525 1549.52 953.205 1549.52 Q951.029 1549.52 948.761 1549.15 Q946.515 1548.78 944.108 1548.04 L944.108 1543.34 Q946.191 1544.47 948.414 1545.03 Q950.636 1545.58 953.113 1545.58 Q957.117 1545.58 959.455 1543.48 Q961.793 1541.37 961.793 1537.76 Q961.793 1534.15 959.455 1532.04 Q957.117 1529.94 953.113 1529.94 Q951.238 1529.94 949.363 1530.35 Q947.511 1530.77 945.566 1531.65 L945.566 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1544.17 1544.91 L1551.81 1544.91 L1551.81 1518.55 L1543.5 1520.21 L1543.5 1515.95 L1551.76 1514.29 L1556.44 1514.29 L1556.44 1544.91 L1564.08 1544.91 L1564.08 1548.85 L1544.17 1548.85 L1544.17 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1583.52 1517.37 Q1579.91 1517.37 1578.08 1520.93 Q1576.28 1524.47 1576.28 1531.6 Q1576.28 1538.71 1578.08 1542.27 Q1579.91 1545.82 1583.52 1545.82 Q1587.16 1545.82 1588.96 1542.27 Q1590.79 1538.71 1590.79 1531.6 Q1590.79 1524.47 1588.96 1520.93 Q1587.16 1517.37 1583.52 1517.37 M1583.52 1513.66 Q1589.33 1513.66 1592.39 1518.27 Q1595.47 1522.85 1595.47 1531.6 Q1595.47 1540.33 1592.39 1544.94 Q1589.33 1549.52 1583.52 1549.52 Q1577.71 1549.52 1574.63 1544.94 Q1571.58 1540.33 1571.58 1531.6 Q1571.58 1522.85 1574.63 1518.27 Q1577.71 1513.66 1583.52 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2158.86 1544.91 L2166.5 1544.91 L2166.5 1518.55 L2158.19 1520.21 L2158.19 1515.95 L2166.45 1514.29 L2171.13 1514.29 L2171.13 1544.91 L2178.77 1544.91 L2178.77 1548.85 L2158.86 1548.85 L2158.86 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2188.26 1514.29 L2206.62 1514.29 L2206.62 1518.22 L2192.54 1518.22 L2192.54 1526.7 Q2193.56 1526.35 2194.58 1526.19 Q2195.6 1526 2196.62 1526 Q2202.4 1526 2205.78 1529.17 Q2209.16 1532.34 2209.16 1537.76 Q2209.16 1543.34 2205.69 1546.44 Q2202.22 1549.52 2195.9 1549.52 Q2193.72 1549.52 2191.45 1549.15 Q2189.21 1548.78 2186.8 1548.04 L2186.8 1543.34 Q2188.88 1544.47 2191.11 1545.03 Q2193.33 1545.58 2195.81 1545.58 Q2199.81 1545.58 2202.15 1543.48 Q2204.49 1541.37 2204.49 1537.76 Q2204.49 1534.15 2202.15 1532.04 Q2199.81 1529.94 2195.81 1529.94 Q2193.93 1529.94 2192.06 1530.35 Q2190.2 1530.77 2188.26 1531.65 L2188.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1445.72 2352.76,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1176.32 2352.76,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,906.93 2352.76,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,637.537 2352.76,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,368.145 2352.76,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,98.752 2352.76,98.752 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 172.015,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1445.72 190.912,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1176.32 190.912,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,906.93 190.912,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,637.537 190.912,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,368.145 190.912,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,98.752 190.912,98.752 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M124.07 1431.51 Q120.459 1431.51 118.631 1435.08 Q116.825 1438.62 116.825 1445.75 Q116.825 1452.86 118.631 1456.42 Q120.459 1459.96 124.07 1459.96 Q127.705 1459.96 129.51 1456.42 Q131.339 1452.86 131.339 1445.75 Q131.339 1438.62 129.51 1435.08 Q127.705 1431.51 124.07 1431.51 M124.07 1427.81 Q129.881 1427.81 132.936 1432.42 Q136.015 1437 136.015 1445.75 Q136.015 1454.48 132.936 1459.08 Q129.881 1463.67 124.07 1463.67 Q118.26 1463.67 115.182 1459.08 Q112.126 1454.48 112.126 1445.75 Q112.126 1437 115.182 1432.42 Q118.26 1427.81 124.07 1427.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M54.5569 1189.67 L62.1958 1189.67 L62.1958 1163.3 L53.8856 1164.97 L53.8856 1160.71 L62.1495 1159.04 L66.8254 1159.04 L66.8254 1189.67 L74.4642 1189.67 L74.4642 1193.6 L54.5569 1193.6 L54.5569 1189.67 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 1162.12 Q90.2975 1162.12 88.4688 1165.69 Q86.6632 1169.23 86.6632 1176.36 Q86.6632 1183.46 88.4688 1187.03 Q90.2975 1190.57 93.9086 1190.57 Q97.5428 1190.57 99.3483 1187.03 Q101.177 1183.46 101.177 1176.36 Q101.177 1169.23 99.3483 1165.69 Q97.5428 1162.12 93.9086 1162.12 M93.9086 1158.42 Q99.7187 1158.42 102.774 1163.02 Q105.853 1167.61 105.853 1176.36 Q105.853 1185.08 102.774 1189.69 Q99.7187 1194.27 93.9086 1194.27 Q88.0984 1194.27 85.0197 1189.69 Q81.9642 1185.08 81.9642 1176.36 Q81.9642 1167.61 85.0197 1163.02 Q88.0984 1158.42 93.9086 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 1162.12 Q120.459 1162.12 118.631 1165.69 Q116.825 1169.23 116.825 1176.36 Q116.825 1183.46 118.631 1187.03 Q120.459 1190.57 124.07 1190.57 Q127.705 1190.57 129.51 1187.03 Q131.339 1183.46 131.339 1176.36 Q131.339 1169.23 129.51 1165.69 Q127.705 1162.12 124.07 1162.12 M124.07 1158.42 Q129.881 1158.42 132.936 1163.02 Q136.015 1167.61 136.015 1176.36 Q136.015 1185.08 132.936 1189.69 Q129.881 1194.27 124.07 1194.27 Q118.26 1194.27 115.182 1189.69 Q112.126 1185.08 112.126 1176.36 Q112.126 1167.61 115.182 1163.02 Q118.26 1158.42 124.07 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M57.7745 920.275 L74.0939 920.275 L74.0939 924.21 L52.1495 924.21 L52.1495 920.275 Q54.8115 917.52 59.3949 912.891 Q64.0013 908.238 65.1819 906.895 Q67.4272 904.372 68.3068 902.636 Q69.2096 900.877 69.2096 899.187 Q69.2096 896.433 67.2652 894.696 Q65.3439 892.96 62.2421 892.96 Q60.043 892.96 57.5893 893.724 Q55.1588 894.488 52.381 896.039 L52.381 891.317 Q55.2051 890.183 57.6588 889.604 Q60.1124 889.025 62.1495 889.025 Q67.5198 889.025 70.7142 891.71 Q73.9087 894.396 73.9087 898.886 Q73.9087 901.016 73.0985 902.937 Q72.3115 904.835 70.205 907.428 Q69.6263 908.099 66.5245 911.317 Q63.4226 914.511 57.7745 920.275 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 892.729 Q90.2975 892.729 88.4688 896.294 Q86.6632 899.835 86.6632 906.965 Q86.6632 914.071 88.4688 917.636 Q90.2975 921.178 93.9086 921.178 Q97.5428 921.178 99.3483 917.636 Q101.177 914.071 101.177 906.965 Q101.177 899.835 99.3483 896.294 Q97.5428 892.729 93.9086 892.729 M93.9086 889.025 Q99.7187 889.025 102.774 893.632 Q105.853 898.215 105.853 906.965 Q105.853 915.692 102.774 920.298 Q99.7187 924.882 93.9086 924.882 Q88.0984 924.882 85.0197 920.298 Q81.9642 915.692 81.9642 906.965 Q81.9642 898.215 85.0197 893.632 Q88.0984 889.025 93.9086 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 892.729 Q120.459 892.729 118.631 896.294 Q116.825 899.835 116.825 906.965 Q116.825 914.071 118.631 917.636 Q120.459 921.178 124.07 921.178 Q127.705 921.178 129.51 917.636 Q131.339 914.071 131.339 906.965 Q131.339 899.835 129.51 896.294 Q127.705 892.729 124.07 892.729 M124.07 889.025 Q129.881 889.025 132.936 893.632 Q136.015 898.215 136.015 906.965 Q136.015 915.692 132.936 920.298 Q129.881 924.882 124.07 924.882 Q118.26 924.882 115.182 920.298 Q112.126 915.692 112.126 906.965 Q112.126 898.215 115.182 893.632 Q118.26 889.025 124.07 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M67.9133 636.183 Q71.2698 636.901 73.1448 639.169 Q75.0429 641.438 75.0429 644.771 Q75.0429 649.887 71.5244 652.688 Q68.0059 655.489 61.5245 655.489 Q59.3486 655.489 57.0338 655.049 Q54.7421 654.632 52.2884 653.776 L52.2884 649.262 Q54.2328 650.396 56.5477 650.975 Q58.8625 651.554 61.3856 651.554 Q65.7837 651.554 68.0754 649.817 Q70.3902 648.081 70.3902 644.771 Q70.3902 641.716 68.2374 640.003 Q66.1078 638.267 62.2884 638.267 L58.2606 638.267 L58.2606 634.424 L62.4735 634.424 Q65.9226 634.424 67.7513 633.058 Q69.58 631.669 69.58 629.077 Q69.58 626.415 67.6819 625.003 Q65.8069 623.568 62.2884 623.568 Q60.3671 623.568 58.168 623.984 Q55.969 624.401 53.3301 625.281 L53.3301 621.114 Q55.9921 620.373 58.3069 620.003 Q60.6449 619.632 62.705 619.632 Q68.0291 619.632 71.1309 622.063 Q74.2327 624.47 74.2327 628.591 Q74.2327 631.461 72.5892 633.452 Q70.9457 635.419 67.9133 636.183 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 623.336 Q90.2975 623.336 88.4688 626.901 Q86.6632 630.443 86.6632 637.572 Q86.6632 644.679 88.4688 648.243 Q90.2975 651.785 93.9086 651.785 Q97.5428 651.785 99.3483 648.243 Q101.177 644.679 101.177 637.572 Q101.177 630.443 99.3483 626.901 Q97.5428 623.336 93.9086 623.336 M93.9086 619.632 Q99.7187 619.632 102.774 624.239 Q105.853 628.822 105.853 637.572 Q105.853 646.299 102.774 650.905 Q99.7187 655.489 93.9086 655.489 Q88.0984 655.489 85.0197 650.905 Q81.9642 646.299 81.9642 637.572 Q81.9642 628.822 85.0197 624.239 Q88.0984 619.632 93.9086 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 623.336 Q120.459 623.336 118.631 626.901 Q116.825 630.443 116.825 637.572 Q116.825 644.679 118.631 648.243 Q120.459 651.785 124.07 651.785 Q127.705 651.785 129.51 648.243 Q131.339 644.679 131.339 637.572 Q131.339 630.443 129.51 626.901 Q127.705 623.336 124.07 623.336 M124.07 619.632 Q129.881 619.632 132.936 624.239 Q136.015 628.822 136.015 637.572 Q136.015 646.299 132.936 650.905 Q129.881 655.489 124.07 655.489 Q118.26 655.489 115.182 650.905 Q112.126 646.299 112.126 637.572 Q112.126 628.822 115.182 624.239 Q118.26 619.632 124.07 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M66.5939 354.939 L54.7884 373.388 L66.5939 373.388 L66.5939 354.939 M65.367 350.865 L71.2466 350.865 L71.2466 373.388 L76.1772 373.388 L76.1772 377.277 L71.2466 377.277 L71.2466 385.425 L66.5939 385.425 L66.5939 377.277 L50.9921 377.277 L50.9921 372.763 L65.367 350.865 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 353.943 Q90.2975 353.943 88.4688 357.508 Q86.6632 361.05 86.6632 368.179 Q86.6632 375.286 88.4688 378.851 Q90.2975 382.392 93.9086 382.392 Q97.5428 382.392 99.3483 378.851 Q101.177 375.286 101.177 368.179 Q101.177 361.05 99.3483 357.508 Q97.5428 353.943 93.9086 353.943 M93.9086 350.24 Q99.7187 350.24 102.774 354.846 Q105.853 359.429 105.853 368.179 Q105.853 376.906 102.774 381.513 Q99.7187 386.096 93.9086 386.096 Q88.0984 386.096 85.0197 381.513 Q81.9642 376.906 81.9642 368.179 Q81.9642 359.429 85.0197 354.846 Q88.0984 350.24 93.9086 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 353.943 Q120.459 353.943 118.631 357.508 Q116.825 361.05 116.825 368.179 Q116.825 375.286 118.631 378.851 Q120.459 382.392 124.07 382.392 Q127.705 382.392 129.51 378.851 Q131.339 375.286 131.339 368.179 Q131.339 361.05 129.51 357.508 Q127.705 353.943 124.07 353.943 M124.07 350.24 Q129.881 350.24 132.936 354.846 Q136.015 359.429 136.015 368.179 Q136.015 376.906 132.936 381.513 Q129.881 386.096 124.07 386.096 Q118.26 386.096 115.182 381.513 Q112.126 376.906 112.126 368.179 Q112.126 359.429 115.182 354.846 Q118.26 350.24 124.07 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M53.793 81.472 L72.1494 81.472 L72.1494 85.4072 L58.0754 85.4072 L58.0754 93.8793 Q59.0939 93.5321 60.1124 93.3701 Q61.131 93.1849 62.1495 93.1849 Q67.9365 93.1849 71.3161 96.3562 Q74.6957 99.5274 74.6957 104.944 Q74.6957 110.523 71.2235 113.625 Q67.7513 116.703 61.4319 116.703 Q59.256 116.703 56.9875 116.333 Q54.7421 115.963 52.3347 115.222 L52.3347 110.523 Q54.418 111.657 56.6402 112.213 Q58.8625 112.768 61.3393 112.768 Q65.3439 112.768 67.6819 110.662 Q70.0198 108.555 70.0198 104.944 Q70.0198 101.333 67.6819 99.2265 Q65.3439 97.1201 61.3393 97.1201 Q59.4643 97.1201 57.5893 97.5367 Q55.7375 97.9534 53.793 98.833 L53.793 81.472 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 84.5507 Q90.2975 84.5507 88.4688 88.1155 Q86.6632 91.6571 86.6632 98.7867 Q86.6632 105.893 88.4688 109.458 Q90.2975 113 93.9086 113 Q97.5428 113 99.3483 109.458 Q101.177 105.893 101.177 98.7867 Q101.177 91.6571 99.3483 88.1155 Q97.5428 84.5507 93.9086 84.5507 M93.9086 80.847 Q99.7187 80.847 102.774 85.4534 Q105.853 90.0368 105.853 98.7867 Q105.853 107.514 102.774 112.12 Q99.7187 116.703 93.9086 116.703 Q88.0984 116.703 85.0197 112.12 Q81.9642 107.514 81.9642 98.7867 Q81.9642 90.0368 85.0197 85.4534 Q88.0984 80.847 93.9086 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 84.5507 Q120.459 84.5507 118.631 88.1155 Q116.825 91.6571 116.825 98.7867 Q116.825 105.893 118.631 109.458 Q120.459 113 124.07 113 Q127.705 113 129.51 109.458 Q131.339 105.893 131.339 98.7867 Q131.339 91.6571 129.51 88.1155 Q127.705 84.5507 124.07 84.5507 M124.07 80.847 Q129.881 80.847 132.936 85.4534 Q136.015 90.0368 136.015 98.7867 Q136.015 107.514 132.936 112.12 Q129.881 116.703 124.07 116.703 Q118.26 116.703 115.182 112.12 Q112.126 107.514 112.126 98.7867 Q112.126 90.0368 115.182 85.4534 Q118.26 80.847 124.07 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip752)\" d=\"\nM291.959 109.528 L291.959 1445.72 L390.23 1445.72 L390.23 109.528 L291.959 109.528 L291.959 109.528  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  291.959,109.528 291.959,1445.72 390.23,1445.72 390.23,109.528 291.959,109.528 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM414.798 1445.72 L414.798 1445.72 L513.069 1445.72 L513.069 1445.72 L414.798 1445.72 L414.798 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  414.798,1445.72 414.798,1445.72 513.069,1445.72 414.798,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM537.637 1445.72 L537.637 1445.72 L635.908 1445.72 L635.908 1445.72 L537.637 1445.72 L537.637 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  537.637,1445.72 537.637,1445.72 635.908,1445.72 537.637,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM660.476 1445.72 L660.476 1445.72 L758.747 1445.72 L758.747 1445.72 L660.476 1445.72 L660.476 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  660.476,1445.72 660.476,1445.72 758.747,1445.72 660.476,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM783.314 1445.72 L783.314 1445.72 L881.585 1445.72 L881.585 1445.72 L783.314 1445.72 L783.314 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  783.314,1445.72 783.314,1445.72 881.585,1445.72 783.314,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM906.153 1445.72 L906.153 1445.72 L1004.42 1445.72 L1004.42 1445.72 L906.153 1445.72 L906.153 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  906.153,1445.72 906.153,1445.72 1004.42,1445.72 906.153,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1028.99 1445.72 L1028.99 1445.72 L1127.26 1445.72 L1127.26 1445.72 L1028.99 1445.72 L1028.99 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1028.99,1445.72 1028.99,1445.72 1127.26,1445.72 1028.99,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1151.83 1445.72 L1151.83 1445.72 L1250.1 1445.72 L1250.1 1445.72 L1151.83 1445.72 L1151.83 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1151.83,1445.72 1151.83,1445.72 1250.1,1445.72 1151.83,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1274.67 1445.72 L1274.67 1445.72 L1372.94 1445.72 L1372.94 1445.72 L1274.67 1445.72 L1274.67 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.67,1445.72 1274.67,1445.72 1372.94,1445.72 1274.67,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1397.51 1445.72 L1397.51 1445.72 L1495.78 1445.72 L1495.78 1445.72 L1397.51 1445.72 L1397.51 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1397.51,1445.72 1397.51,1445.72 1495.78,1445.72 1397.51,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1520.35 1445.72 L1520.35 1445.72 L1618.62 1445.72 L1618.62 1445.72 L1520.35 1445.72 L1520.35 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1520.35,1445.72 1520.35,1445.72 1618.62,1445.72 1520.35,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1643.19 1445.72 L1643.19 1445.72 L1741.46 1445.72 L1741.46 1445.72 L1643.19 1445.72 L1643.19 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1643.19,1445.72 1643.19,1445.72 1741.46,1445.72 1643.19,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1766.02 1445.72 L1766.02 1445.72 L1864.3 1445.72 L1864.3 1445.72 L1766.02 1445.72 L1766.02 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1766.02,1445.72 1766.02,1445.72 1864.3,1445.72 1766.02,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1888.86 1445.72 L1888.86 1445.72 L1987.13 1445.72 L1987.13 1445.72 L1888.86 1445.72 L1888.86 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1888.86,1445.72 1888.86,1445.72 1987.13,1445.72 1888.86,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2011.7 1445.72 L2011.7 1445.72 L2109.97 1445.72 L2109.97 1445.72 L2011.7 1445.72 L2011.7 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2011.7,1445.72 2011.7,1445.72 2109.97,1445.72 2011.7,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2134.54 87.9763 L2134.54 1445.72 L2232.81 1445.72 L2232.81 87.9763 L2134.54 87.9763 L2134.54 87.9763  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2134.54,87.9763 2134.54,1445.72 2232.81,1445.72 2232.81,87.9763 2134.54,87.9763 \n  \"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"279.676\" cy=\"109.528\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"402.514\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"525.353\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"648.192\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"771.03\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"893.869\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1016.71\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1139.55\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1262.39\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1385.22\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1508.06\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1630.9\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1753.74\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1876.58\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1999.42\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2122.26\" cy=\"87.9763\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2245.1\" cy=\"109.528\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"GHZ state will collapse to 0000 or 1111.","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"page"},{"location":"examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/registers.html#registers","page":"Quantum Registers","title":"Quantum Registers","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"A quantum register is a quantum state or a batch of quantum states. Yao provides two types of quantum registers ArrayReg and BatchedArrayReg.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"AbstractRegister\nAbstractArrayReg\nArrayReg\nBatchedArrayReg","category":"page"},{"location":"man/registers.html#YaoAPI.AbstractRegister","page":"Quantum Registers","title":"YaoAPI.AbstractRegister","text":"AbstractRegister{D}\n\nAbstract type for quantum registers. Type parameter D is the number of levels in each qudit. For qubits, D = 2.\n\nRequired methods\n\ninstruct!\nnqudits\nnactive\ninsert_qubits!\nappend_qubits!\nfocus!\nrelax!\nreorder!\ninvorder!\n\nOptional methods\n\nnlevel\nnremain\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoArrayRegister.ArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.ArrayReg","text":"ArrayReg{D,T,MT<:AbstractMatrix{T}} <: AbstractArrayRegister{D}\nArrayReg{D}(raw)\nArrayReg(raw::AbstractVecOrMat; nlevel=2)\nArrayReg(r::ArrayReg)\n\nSimulated full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. T is the numerical type for each amplitude, it is ComplexF64 by default.\n\nwarning: Warning\nArrayReg constructor will not normalize the quantum state. If you need a normalized quantum state remember to use normalize!(register) on the register or normalize the input raw array with normalize or batched_normalize!.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoArrayRegister.BatchedArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.BatchedArrayReg","text":"BatchedArrayReg{D,T,MT<:AbstractMatrix{T}} <: AbstractArrayReg{D}\nBatchedArrayReg(raw, nbatch; nlevel=2)\nBatchedArrayReg{D}(raw, nbatch)\n\nSimulated batched full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. T is the numerical type for each amplitude, it is ComplexF64 by default.\n\nwarning: Warning\nBatchedArrayReg constructor will not normalize the quantum state. If you need a normalized quantum state remember to use normalize!(register) on the register or normalize the input raw array with normalize or batched_normalize!.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We define some shortcuts to create simulated quantum states easier:","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"arrayreg\nproduct_state\nzero_state\nzero_state_like\nrand_state\nuniform_state\nghz_state\nclone","category":"page"},{"location":"man/registers.html#YaoArrayRegister.arrayreg","page":"Quantum Registers","title":"YaoArrayRegister.arrayreg","text":"arrayreg(state; nbatch::Union{Integer,NoBatch}=NoBatch(), nlevel::Integer=2)\n\nCreate an array register, if nbatch is a integer, it will return a BatchedArrayReg.\n\n\n\n\n\narrayreg([T=ComplexF64], bit_str; nbatch=NoBatch())\n\nConstruct an array register from bit string literal. For bit string literal please read @bit_str.\n\nExamples\n\njulia> arrayreg(bit\"1010\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> arrayreg(ComplexF32, bit\"1010\")\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.product_state","page":"Quantum Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], dit_str; nbatch=NoBatch(), no_transpose_storage=false)\nproduct_state([T=ComplexF64], nbits::Int, val::Int; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\nproduct_state([T=ComplexF64], vector; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\n\nCreate an ArrayReg of product state. The configuration can be specified with a dit string, which can be defined with @bit_str or @dit_str. Or equivalently, it can be specified explicitly with nbits, val and nlevel. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> reg = product_state(dit\"120;3\"; nbatch=2)\nBatchedArrayReg{3, ComplexF64, Transpose...}\n    active qudits: 3/3\n    nlevel: 3\n    nbatch: 2\n\njulia> measure(reg)\n1×2 Matrix{BitBasis.DitStr64{3, 3}}:\n 120 ₍₃₎  120 ₍₃₎\n\njulia> product_state(bit\"100\"; nbatch=2);\n\njulia> r1 = product_state(ComplexF32, bit\"001\"; nbatch=2);\n\njulia> r2 = product_state(ComplexF32, [1, 0, 0]; nbatch=2);\n\njulia> r3 = product_state(ComplexF32, 3, 0b001; nbatch=2);\n\njulia> r1 ≈ r2   # because we read bit strings from right to left, vectors from left to right.\ntrue\n\njulia> r1 ≈ r3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.zero_state","page":"Quantum Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=NoBatch())\n\nCreate an AbstractArrayReg that initialized to state 0rangle^otimes n. See also product_state, rand_state, uniform_state and ghz_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nBatchedArrayReg{2, ComplexF32, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 3\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.zero_state_like","page":"Quantum Registers","title":"YaoArrayRegister.zero_state_like","text":"zero_state_like(register, n) -> AbstractRegister\n\nCreate a register initialized to zero from an existing one.\n\nExamples\n\njulia> reg = rand_state(3; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 3/3\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.rand_state","page":"Quantum Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=NoBatch(), no_transpose_storage=false)\n\nCreate a random AbstractArrayReg with total number of qudits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.uniform_state","page":"Quantum Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=NoBatch(), no_transpose_storage=false)\n\nCreate a uniform state:\n\nfrac1sqrt2^n sum_k=0^2^n-1 krangle\n\nThis state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nBatchedArrayReg{2, ComplexF32, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.ghz_state","page":"Quantum Registers","title":"YaoArrayRegister.ghz_state","text":"ghz_state([T=ComplexF64], n::Int; nbatch::Int=NoBatch())\n\nCreate a GHZ state (or a cat state) that defined as\n\nfrac0rangle^otimes n + 1rangle^otimes nsqrt2\n\nExamples\n\njulia> ghz_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.clone","page":"Quantum Registers","title":"YaoAPI.clone","text":"clone(register, n)\n\nCreate an ArrayReg by cloning the original register for n times on batch dimension. This function is only for emulation.\n\nExample\n\njulia> clone(arrayreg(bit\"101\"; nbatch=3), 4)\nBatchedArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n    nbatch: 12\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"In a register, qubits are distinguished as active and inactive (or remaining). The total number of qubits is the number of active qubits plus the number of remaining qubits.  Only active qubits are visible to quantum operators and the number of these qubits are the size of a register. Making this distinction of qubits allows writing reusable quantum circuits. For example, Suppose we want to run a quantum Fourier transformation circuit of size 4 on qubits (1, 3, 5, 7), we first set the target qubits to active qubits the reset to inactive, then we apply the circuit on it, finally we unset the inactive qubits.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"nqudits\nnqubits\nnactive\nnremain\nnbatch,\nnlevel,\nfocus!\nfocus\nrelax!\nzero_state\nexchange_sysenv","category":"page"},{"location":"man/registers.html#YaoAPI.nqudits","page":"Quantum Registers","title":"YaoAPI.nqudits","text":"nqudits(register) -> Int\n\nReturns the total number of qudits in register.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nqubits","page":"Quantum Registers","title":"YaoAPI.nqubits","text":"nqubits(register) -> Int\n\nReturns the (total) number of qubits. See nactive, nremain for more details.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nactive","page":"Quantum Registers","title":"YaoAPI.nactive","text":"nactive(register) -> Int\n\nReturns the number of active qudits in register. Here, active qudits means the system qubits that operators can be applied on.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nremain","page":"Quantum Registers","title":"YaoAPI.nremain","text":"nremain(register) -> Int\n\nReturns the number of inactive qudits in register. It equals to subtracting nqudits and nactive.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.focus","page":"Quantum Registers","title":"YaoAPI.focus","text":"focus(f, register, locs)\n\nCall a callable f under the context of focus. See also focus!.\n\nExamples\n\nTo print the focused register\n\njulia> r = arrayreg(bit\"101100\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 6/6\n    nlevel: 2\n\njulia> focus(x->(println(x);x), r, (1, 2));\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/6\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.relax!","page":"Quantum Registers","title":"YaoAPI.relax!","text":"relax!(register[, locs]; to_nactive=nqudits(register)) -> register\nrelax!(locs::Int...; to_nactive=nqudits(register)) -> f(register) -> register\n\nInverse transformation of focus!, where to_nactive is the number  of active bits for target register. If the register is not provided, returns a lambda function that takes a register as input.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> focus!(reg, (1,3,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/5\n    nlevel: 2\n\njulia> relax!(reg, (1,3,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.exchange_sysenv","page":"Quantum Registers","title":"YaoArrayRegister.exchange_sysenv","text":"exchange_sysenv(reg::AbstractArrayReg) -> AbstractRegister\n\nExchange system (focused qubits) and environment (remaining qubits).\n\njulia> reg = rand_state(5)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> focus!(reg, (2,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/5\n    nlevel: 2\n\njulia> exchange_sysenv(reg)\nArrayReg{2, ComplexF64, Adjoint...}\n    active qubits: 3/5\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Storage","page":"Quantum Registers","title":"Storage","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Both ArayReg and BatchedArrayReg use matrices as the storage. For example, for a quantum register with a active qubits, r remaining qubits and batch size b, the storage is as follows","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"(Image: )","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The first dimension of size 2^a is for active qubits, only this subset of qubits are allowed to interact with blocks. Since we reshaped the state vector into a matrix, applying a quantum operator can always be represented as a matrix-matrix multiplication . In practice, most gates have in-place implementation that does not require constructing the operator matrix explicitly.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"You can access different views of the storage of an ArrayReg with the following functions:","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"state\nbasis\nstatevec\nrelaxedvec\nhypercubic\nrank3\nviewbatch\ntranspose_storage","category":"page"},{"location":"man/registers.html#YaoArrayRegister.state","page":"Quantum Registers","title":"YaoArrayRegister.state","text":"state(register::AbstractArrayReg) -> Matrix\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\nstate(ρ::DensityMatrix) -> Matrix\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#BitBasis.basis","page":"Quantum Registers","title":"BitBasis.basis","text":"basis(ditstr) -> UnitRange{DitStr{D,N,T}}\nbasis(DitStr{D,N,T}) -> UnitRange{DitStr{D,N,T}}\n\nReturns the UnitRange for basis in Hilbert Space of qudits.\n\n\n\n\n\nbasis(register) -> UnitRange\n\nReturns an UnitRange of the all the bits in the Hilbert space of given register.\n\njulia> collect(basis(rand_state(3)))\n8-element Vector{DitStr{2, 3, Int64}}:\n 000 ₍₂₎\n 001 ₍₂₎\n 010 ₍₂₎\n 011 ₍₂₎\n 100 ₍₂₎\n 101 ₍₂₎\n 110 ₍₂₎\n 111 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.statevec","page":"Quantum Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1 (i.e. nactive(r) = nqudits(r)). See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.relaxedvec","page":"Quantum Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::AbstractArrayReg) -> AbstractArray\n\nReturn a vector representation of state, with all qudits activated. See also state, statevec.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#BitBasis.hypercubic","page":"Quantum Registers","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\nhypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic representation (high dimensional tensor) of this register, only active qudits are considered. See also rank3 and state.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.rank3","page":"Quantum Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also hypercubic and state.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.viewbatch","page":"Quantum Registers","title":"YaoAPI.viewbatch","text":"viewbatch(register, i::Int) -> AbstractRegister\n\nReturns the i-th single register of a batched register. The returned instance is a view of the original register, i.e. inplace operation changes the original register directly.\n\nExamples\n\njulia> reg = zero_state(5; nbatch=2);\n\njulia> apply!(viewbatch(reg, 2), put(5, 2=>X));\n\njulia> measure(reg; nshots=3)\n3×2 Matrix{DitStr{2, 5, Int64}}:\n 00000 ₍₂₎  00010 ₍₂₎\n 00000 ₍₂₎  00010 ₍₂₎\n 00000 ₍₂₎  00010 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.transpose_storage","page":"Quantum Registers","title":"YaoArrayRegister.transpose_storage","text":"transpose_storage(register) -> register\n\nTranspose the register storage. Sometimes transposed storage provides better performance for batched simulation.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Operations","page":"Quantum Registers","title":"Operations","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The list of arithmetic operations for ArrayReg include ","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"+\n-\n*\n/ (scalar)\nadjoint","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Then the inner product can be computed as follows.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"julia> reg = rand_state(3);\n\njulia> reg' * reg\n0.9999999999999998 + 0.0im","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"AdjointArrayReg","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We also have some faster inplace versions of arithematic operations","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"regadd!,\nregsub!,\nregscale!,","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We also define the following functions for state normalization, and distance measurement.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"normalize!\nisnormalized\nfidelity\ntracedist","category":"page"},{"location":"man/registers.html#LinearAlgebra.normalize!","page":"Quantum Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::AbstractArrayReg)\n\nNormalize the register r by its 2-norm. It changes the register directly.\n\nExamples\n\nThe following code creates a normalized GHZ state.\n\njulia> reg = product_state(bit\"000\") + product_state(bit\"111\");\n\njulia> norm(reg)\n1.4142135623730951\n\njulia> isnormalized(reg)\nfalse\n\njulia> normalize!(reg);\n\njulia> isnormalized(reg)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.isnormalized","page":"Quantum Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nReturns true if the register r is normalized.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.fidelity","page":"Quantum Registers","title":"YaoAPI.fidelity","text":"fidelity(register1, register2) -> Real/Vector{<:Real}\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nReturn the fidelity between two states. Calcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqudits(r)), the fidelity is calcuated by purification. See also pure_state_fidelity, purification_fidelity.\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nDefinition\n\nThe fidelity of two quantum state for qudits is defined as:\n\nF(ρ σ) = tr(sqrtsqrtρσsqrtρ)\n\nOr its equivalent form (which we use in numerical calculation):\n\nF(ρ σ) = sqrt(tr(ρσ) + 2 sqrtdet(ρ)det(σ))\n\nExamples\n\njulia> reg1 = uniform_state(3);\n\njulia> reg2 = zero_state(3);\n\njulia> fidelity(reg1, reg2)\n0.35355339059327373\n\nReferences\n\nJozsa R. Fidelity for mixed quantum states[J]. Journal of modern optics, 1994, 41(12): 2315-2323.\nNielsen M A, Chuang I. Quantum computation and quantum information[J]. 2002.\n\nnote: Note\nThe original definition of fidelity F was from \"transition probability\", defined by Jozsa in 1994, it is the square of what we use here.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.tracedist","page":"Quantum Registers","title":"YaoAPI.tracedist","text":"tracedist(register1, register2)\n\nReturn the trace distance of register1 and register2.\n\nDefinition\n\nTrace distance is defined as following:\n\nfrac12  A - B _rm tr\n\nExamples\n\njulia> reg1 = uniform_state(3);\n\njulia> reg2 = zero_state(3);\n\njulia> tracedist(reg1, reg2)\n1.8708286933869704\n\nReferences\n\nhttps://en.wikipedia.org/wiki/Trace_distance\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Resource-management-and-addressing","page":"Quantum Registers","title":"Resource management and addressing","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"add_qudits!\nadd_qubits!\nappend_qudits!\nappend_qubits!\nreorder!\ninvorder!","category":"page"},{"location":"man/registers.html#YaoAPI.append_qudits!","page":"Quantum Registers","title":"YaoAPI.append_qudits!","text":"append_qudits!(register, n::Int) -> register\nappend_qudits!(n::Int) -> λ(register)\n\nAdd n qudits to given register in state |0>. i.e. |psi> -> |000> ⊗ |psi>, increased bits have higher indices.\n\nIf only an integer is provided, then returns a lambda function.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> append_qudits!(reg, 2)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 7/7\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 7, Int64}}:\n 0001101 ₍₂₎\n 0001101 ₍₂₎\n 0001101 ₍₂₎\n\nNote here, we read the bit string from right to left.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.append_qubits!","page":"Quantum Registers","title":"YaoAPI.append_qubits!","text":"append_qubits!(register, n::Int) -> register\nappend_qubits!(n::Int) -> λ(register)\n\nAdd n qudits to given register in state |0>. It is an alias of append_qudits! function.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.reorder!","page":"Quantum Registers","title":"YaoAPI.reorder!","text":"reorder!(reigster, orders)\n\nReorder the locations of register by input orders. For a 3-qubit register, an order (i, j, k) specifies the following reordering of qubits\n\nmove the first qubit go to i,\nmove the second qubit go to j,\nmove the third qubit go to k.\n\nnote: Note\nThe convention of reorder! is different from the permutedims function, one can use the sortperm function to relate the permutation order and the order in this function.\n\nExamples\n\njulia> reg = product_state(bit\"010101\");\n\njulia> reorder!(reg, (1,4,2,5,3,6));\n\njulia> measure(reg)\n1-element Vector{DitStr{2, 6, Int64}}:\n 000111 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.invorder!","page":"Quantum Registers","title":"YaoAPI.invorder!","text":"invorder!(register)\n\nInverse the locations of the register.\n\nExamples\n\njulia> reg = product_state(bit\"010101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 6/6\n    nlevel: 2\n\njulia> measure(invorder!(reg); nshots=3)\n3-element Vector{DitStr{2, 6, Int64}}:\n 101010 ₍₂₎\n 101010 ₍₂₎\n 101010 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Only a subset of qubits that does not interact with other qubits can be removed, the best approach is first measuring it in computational basis first. It can be done with the measure! function by setting the first argument to RemoveMeasured().","category":"page"},{"location":"man/registers.html#Instruction-set","page":"Quantum Registers","title":"Instruction set","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Although we have matrix representation for Yao blocks, specialized instructions are much faster and memory efficient than using the matrix-matrix product. These instructions are specified with the instruct! function listed bellow.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"YaoArrayRegister.instruct!","category":"page"},{"location":"man/registers.html#YaoAPI.instruct!","page":"Quantum Registers","title":"YaoAPI.instruct!","text":"instruct!([nlevel=Val(2), ]state, operator, locs[, control_locs, control_configs, theta])\n\nUnified interface for applying an operator to a quantum state. It modifies the state directly.\n\nArguments\n\nnlevel is the number of levels in each qudit,\nstate is a vector or matrix representing the quantum state, where the first dimension is the active qubit dimension, the second is the batch dimension.\noperator is a quantum operator, which can be Val(GATE_SYMBOL) or a matrix.\nlocs::Tuple is a tuple for specifying the locations this gate applied.\ncontrol_locs::Tuple and control_configs are tuples for specifying the control locations and control values.\ntheta::Real is the parameter for the gate, e.g. Val(:Rx) gate takes a real number of its parameter.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Measurement","page":"Quantum Registers","title":"Measurement","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We have a true measure function measure! that collapses the state after the measurement. We also have some \"cheating\" functions to facilitate classical simulation.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"measure!\nmeasure\nselect!\nselect\ncollapseto!\nprobs\nmost_probable,","category":"page"},{"location":"man/registers.html#YaoAPI.measure!","page":"Quantum Registers","title":"YaoAPI.measure!","text":"measure!([postprocess,] [operator, ]register[, locs]; rng=Random.GLOBAL_RNG)\n\nMeasure current active qudits or qudits at locs. If the operator is not provided, it will measure on the computational basis and collapse to a product state. Otherwise, the quantum state collapse to the subspace corresponds to the resulting eigenvalue of the observable.\n\nArguments\n\npostprocess is the postprocessing method, it can be\nNoPostProcess() (default).\nResetTo(config), reset to result state to config. It can not be used if operator is provided, because measuring an operator in general does not return a product state.\nRemoveMeasured(), remove the measured qudits from the register. It is also incompatible with the operator argument.\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nrng is the random number generator.\n\nExamples\n\nThe following example measures a random state on the computational basis and reset it to a certain bitstring value.\n\njulia> reg = rand_state(3);\n\njulia> measure!(ResetTo(bit\"011\"), reg)\n110 ₍₂₎\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 011 ₍₂₎\n 011 ₍₂₎\n 011 ₍₂₎\n\njulia> measure!(RemoveMeasured(), reg, (1,2))\n11 ₍₂₎\n\njulia> reg  # removed qubits are not usable anymore\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 1/1\n    nlevel: 2\n\nMeasuring an operator will project the state to the subspace associated with the returned eigenvalue.\n\njulia> reg = uniform_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> print_table(reg)\n000 ₍₂₎   0.35355 + 0.0im\n001 ₍₂₎   0.35355 + 0.0im\n010 ₍₂₎   0.35355 + 0.0im\n011 ₍₂₎   0.35355 + 0.0im\n100 ₍₂₎   0.35355 + 0.0im\n101 ₍₂₎   0.35355 + 0.0im\n110 ₍₂₎   0.35355 + 0.0im\n111 ₍₂₎   0.35355 + 0.0im\n\njulia> measure!(repeat(3, Z, 1:3), reg)\n-1.0 + 0.0im\n\njulia> print_table(reg)\n000 ₍₂₎   0.0 + 0.0im\n001 ₍₂₎   0.5 + 0.0im\n010 ₍₂₎   0.5 + 0.0im\n011 ₍₂₎   0.0 + 0.0im\n100 ₍₂₎   0.5 + 0.0im\n101 ₍₂₎   0.0 + 0.0im\n110 ₍₂₎   0.0 + 0.0im\n111 ₍₂₎   0.5 + 0.0im\n\nHere, we measured the parity operator, as a result,  the resulting state collapsed to the subspace with either even or odd parity.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.measure","page":"Quantum Registers","title":"YaoAPI.measure","text":"measure([, operator], register[, locs]; nshots=1, rng=Random.GLOBAL_RNG) -> Vector{Int}\n\nMeasure a quantum state and return measurement results of qudits. This measurement function a cheating version of measure! that does not collapse the input state. It also does not need to recompute the quantum state for performing multiple shots measurement.\n\nArguments\n\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nnshots::Int is the number of shots.\nrng is the random number generator.\n\nExamples\n\njulia> reg = product_state(bit\"110\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 110 ₍₂₎\n 110 ₍₂₎\n 110 ₍₂₎\n\njulia> measure(reg, (2,3); nshots=3)\n3-element Vector{DitStr{2, 2, Int64}}:\n 11 ₍₂₎\n 11 ₍₂₎\n 11 ₍₂₎\n\nThe following example switches to the X basis for measurement.\n\njulia> reg = apply!(product_state(bit\"100\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n -1.0 + 0.0im\n -1.0 + 0.0im\n -1.0 + 0.0im\n\njulia> reg = apply!(product_state(bit\"101\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n 1.0 - 0.0im\n 1.0 - 0.0im\n 1.0 - 0.0im\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.select!","page":"Quantum Registers","title":"YaoAPI.select!","text":"select!(dest::AbstractRegister, src::AbstractRegister, bits::Integer...) -> AbstractRegister\nselect!(register::AbstractRegister, bits::Integer...) -> register\nselect!(b::Integer) -> f(register)\n\nselect a subspace of given quantum state based on input eigen state bits. See also select for the non-inplace version. If the register is not provided, it returns a lambda expression that takes a register as the input.\n\nExamples\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> select!(reg, bit\"111\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 0/0\n    nlevel: 2\n\njulia> norm(reg)\n0.7071067811865476\n\nThe selection only works on the activated qubits, for example\n\njulia> reg = focus!(ghz_state(3), (1, 2))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/3\n    nlevel: 2\n\njulia> select!(reg, bit\"11\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 0/1\n    nlevel: 2\n\njulia> statevec(reg)\n1×2 Matrix{ComplexF64}:\n 0.0+0.0im  0.707107+0.0im\n\ntip: Tip\nDevelopers should overload select!(r::RegisterType, bits::NTuple{N, <:Integer}) and do not assume bits has specific number of bits (e.g Int64), or it will restrict the its maximum available number of qudits.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.select","page":"Quantum Registers","title":"YaoAPI.select","text":"select(register, bits) -> AbstractRegister\n\nThe non-inplace version of select!.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.collapseto!","page":"Quantum Registers","title":"YaoAPI.collapseto!","text":"collapseto!(register, config)\n\nSet the register to bit string literal bit_str (or an equivalent integer). About bit string literal, see more in @bit_str. This interface is only for emulation.\n\nExamples\n\nThe following code collapse a random state to a certain state.\n\njulia> measure(collapseto!(rand_state(3), bit\"001\"); nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 001 ₍₂₎\n 001 ₍₂₎\n 001 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.probs","page":"Quantum Registers","title":"YaoAPI.probs","text":"probs(register) -> Vector\n\nReturns the probability distribution of computation basis, aka xψ^2.\n\nExamples\n\njulia> reg = product_state(bit\"101\");\n\njulia> reg |> probs\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n 0.0\n 0.0\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Density-matrices","page":"Quantum Registers","title":"Density matrices","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"DensityMatrix\ndensity_matrix\npartial_tr\npurify\nvon_neumann_entropy,\nmutual_information,","category":"page"},{"location":"man/registers.html#YaoAPI.DensityMatrix","page":"Quantum Registers","title":"YaoAPI.DensityMatrix","text":"DensityMatrix{D,T,MT<:AbstractMatrix{T}} <: AbstractRegister{D}\nDensityMatrix{D}(state::AbstractMatrix)\nDensityMatrix(state::AbstractMatrix; nlevel=2)\n\nDensity matrix type, where state is a matrix. Type parameter D is the number of levels, it can also be specified by a keyword argument nlevel.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoAPI.density_matrix","page":"Quantum Registers","title":"YaoAPI.density_matrix","text":"density_matrix(register, locations)\n\nReturns the density matrix for qubits on locations.\n\nExamples\n\nThe following code gets the single site reduce density matrix for the GHZ state.\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> density_matrix(reg, (2,)).state\n2×2 Matrix{ComplexF64}:\n 0.5+0.0im  0.0+0.0im\n 0.0-0.0im  0.5+0.0im\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.partial_tr","page":"Quantum Registers","title":"YaoAPI.partial_tr","text":"partial_tr(ρ, locs) ->\n\nReturn a density matrix which is the partial traced on locs.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.purify","page":"Quantum Registers","title":"YaoAPI.purify","text":"purify(r::DensityMatrix; nbit_env::Int=nactive(r)) -> ArrayReg\n\nGet a purification of target density matrix.\n\nExamples\n\nThe following example shows how to measure a local operator on the register, reduced density matrix and the purified register. Their results should be consistent.\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> r = density_matrix(reg, (2,));\n\njulia> preg = purify(r)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 1/2\n    nlevel: 2\n\njulia> isapprox(expect(Z + Y, preg), 0.0; atol=1e-10)\ntrue\n\njulia> isapprox(expect(Z + Y, r), 0.0; atol=1e-10)\ntrue\n\njulia> isapprox(expect(put(3, 2=>(Z + Y)), reg), 0.0; atol=1e-10)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/examples/2.qft-phase-estimation/main.jl\"","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#example-qft","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's use Yao first","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using Yao","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Quantum-Fourier-Transformation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The Quantum Fourier Transformation (QFT) circuit is to repeat two kinds of blocks repeatly:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: qft-circuit)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The basic building block control phase shift gate is defined as","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R(k)=beginbmatrix\n1  0\n0  expleft(frac2pi i2^kright)\nendbmatrix","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's define block A and block B, block A is actually a control block.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Once you construct the blockl you can inspect its matrix using mat function. Let's construct the circuit in dash box A, and see the matrix of R_4 gate.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4 = A(4, 1)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(n -> control(n, 4, 1 => shift(0.39269908169872414)))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"If you have read about preparing GHZ state, you probably know that in Yao, we could just leave the number of qubits, and it will be evaluated when possible.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 5\ncontrol(4)\n└─ (1,) shift(0.39269908169872414)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"its matrix will be","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"mat(R4(5))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 Diagonal{ComplexF64, Vector{ComplexF64}}:\n 1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then we repeat this control block over and over on different qubits, and put a Hadamard gate to ith qubit to construct i-th B block.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B(n, k) = chain(n, j==k ? put(k=>H) : A(j, k) for j in k:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We need to input the total number of qubits n here because we have to iterate through from k-th location to the last.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's construct the circuit by chaining all the B blocks together","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"qft(n) = chain(B(n, k) for k in 1:n)\nqft(4)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ H\n│  ├─ control(2)\n│  │  └─ (1,) shift(1.5707963267948966)\n│  ├─ control(3)\n│  │  └─ (1,) shift(0.7853981633974483)\n│  └─ control(4)\n│     └─ (1,) shift(0.39269908169872414)\n├─ chain\n│  ├─ put on (2)\n│  │  └─ H\n│  ├─ control(3)\n│  │  └─ (2,) shift(1.5707963267948966)\n│  └─ control(4)\n│     └─ (2,) shift(0.7853981633974483)\n├─ chain\n│  ├─ put on (3)\n│  │  └─ H\n│  └─ control(4)\n│     └─ (3,) shift(1.5707963267948966)\n└─ chain\n   └─ put on (4)\n      └─ H\n","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Wrap-QFT-to-an-external-block","page":"Quantum Fourier Transformation and Phase Estimation","title":"Wrap QFT to an external block","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In most cases, functions are enough to wrap quantum circuits, like A and B we defined above, but sometimes, we need to dispatch specialized methods on certain kinds of quantum circuit, or we want to define an external block to export, thus, it's useful to be able to wrap circuit to custom blocks.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First, we define a new type as subtype of PrimitiveBlock since we are not going to use the subblocks of QFT, if you need to use its subblocks, it'd be better to define it under CompositeBlock.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"struct QFT <: PrimitiveBlock{2}\n    n::Int\nend\n\nYaoBlocks.nqudits(q::QFT) = q.n","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's define its circuit","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit(q::QFT) = qft(q.n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"And forward mat to its circuit's matrix","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.mat(::Type{T}, x::QFT) where T = mat(T, circuit(x))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"You may notice, it is a little ugly to print QFT at the moment, this is because we print the type summary by default, you can define your own printing by overloading print_block","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.print_block(io::IO, x::QFT) = print(io, \"QFT($(x.n))\")","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since it is possible to use FFT to simulate the results of QFT (like cheating), we could define our custom apply! method:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using FFTW, LinearAlgebra\n\nfunction YaoBlocks.apply!(r::ArrayReg, x::QFT)\n    α = sqrt(length(statevec(r)))\n    invorder!(r)\n    lmul!(α, ifft!(statevec(r)))\n    return r\nend","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check if our apply! method is correct:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)\nr1 = r |> copy |> QFT(5)\nr2 = r |> copy |> circuit(QFT(5))\nr1 ≈ r2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"true","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We can get iQFT (inverse QFT) directly by calling adjoint","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT(5)'","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":" [†]QFT(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT and iQFT are different from FFT and IFFT in three ways,","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"they are different by a factor of sqrt2^n with n the number of qubits.\nthe bit numbering will exchange after applying QFT or iQFT.\ndue to the convention, QFT is more related to IFFT rather than FFT.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Phase-Estimation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Phase Estimation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we have QFT and iQFT blocks we can then use them to realize phase estimation circuit, what we want to realize is the following circuit:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: phase estimation)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we call Hadamard gates repeatly on first n qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards(n) = repeat(H, 1:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then in dashed box B, we have controlled unitaries:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU(n, m, U) = chain(n+m, control(k, n+1:n+m=>matblock(U^(2^(k-1)))) for k in 1:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"each of them is a U of power 2^(k-1).","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we will only apply the qft and Hadamard on first n qubits, we could use Subroutine, which creates a context of a sub-scope of the qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE(n, m, U) =\n    chain(n+m, # total number of the qubits\n        subroutine(Hadamards(n), 1:n), # apply H in local scope\n        ControlU(n, m, U),\n        subroutine(QFT(n)', 1:n))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"we use the first n qubits as the output space to store phase ϕ, and the other m qubits as the input state which corresponds to an eigenvector of oracle matrix U.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The subroutine here uses focus! and relax! to manage a local scope of quantum circuit, and only activate the first n qubits while applying the block inside the subroutine context, and the scope will be relax!ed back, after the context. This is equivalent to manually focus! then relax!","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"fullly activated","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"first 3 qubits activated","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"focus!(r, 1:3)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax back to the original","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax!(r, 1:3)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In this way, we will be able to apply small operator directly on the subset of the qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Details about the algorithm can be found here: Quantum Phase Estimation Algorithm","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check the results of our phase estimation.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we need to set up a unitary with known phase, we set the phase to be 0.75, which is 0.75 * 2^3 == 6 == 0b110 .","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"N, M = 3, 5\nP = eigen(rand_unitary(1<<M)).vectors\nθ = Int(0b110) / 1<<N\nphases = rand(1<<M)\nphases[0b010+1] = θ\nU = P * Diagonal(exp.(2π * im * phases)) * P'","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 Matrix{ComplexF64}:\n -0.0110022-0.203428im    -0.00796862-0.084783im    0.00160191+0.100374im      0.0290404+0.189217im     -0.0187435+0.0148158im      0.151147-0.241463im    0.0788929+0.054979im     -0.0986787+0.00248555im   0.0667253+0.0868751im     -0.226016+0.0995741im      0.0188658-0.227806im     0.0426969-0.175125im      0.0827512+0.138726im    -0.253328+0.0401121im      -0.15942-0.0879525im      0.120652-0.00734241im   -0.0340563+0.0545456im      0.077554-0.192979im     -0.0402142-0.063914im     -0.114391-0.200553im       -0.137208-0.161461im      0.0600159-0.0670288im    0.0437524+0.00755011im   -0.144535-0.202455im     -0.0755985-0.105171im     -0.0127593+0.0118199im      0.06665-0.0956393im     0.0990091-0.0829917im      -0.142585+0.141158im    -0.0998038-0.0434346im     -0.30049-0.109284im    -0.0285297-0.28404im\n  -0.111213-0.0521033im     -0.148897-0.0720597im     0.042735+0.117875im     -0.0810973+0.271043im        0.03498-0.180005im       0.026993+0.0615172im   0.0933275+0.0828808im    -0.0758209-0.0422729im    0.0265415+0.00763524im     0.127846+0.123039im        0.167971+0.0355608im    0.0115671+0.103124im      0.0983712+0.196688im     0.154503-0.103356im       0.330269-0.0708036im    -0.0779611-0.276918im     -0.0417031+0.0795844im     -0.220726+0.00360383im   -0.0299568+0.016876im     -0.018678-0.00327623im    -0.0245283-0.0323233im     0.0335357-0.065048im    -0.0689375+0.169462im    -0.0872285-0.0428482im     -0.207556+0.090598im       0.173236+0.0210001im    -0.342647-0.0158367im    0.00710657-0.138813im      -0.0722349-0.0400579im     0.120984-0.286428im     0.0583745+3.16743e-5im    0.116075-0.0302315im\n   0.161883+0.0289835im     -0.180387+0.0131322im   -0.0445582-0.117348im      -0.102681+0.102558im       0.133156+0.166716im      0.0146317+0.148648im    0.0678501-0.112176im      0.0133941-0.180365im    -0.0143002+0.2538im         0.125555-0.0709902im       0.273493+0.0287267im    0.0790579-0.0427869im    -0.0378505+0.0660448im  0.00330624-0.123391im      -0.245774+0.139528im     -0.0762095-0.329094im      -0.059657-0.0563605im       0.15817+0.107285im      0.0938518+0.0686982im    -0.166859+0.100447im      -0.0956542-0.00824084im   -0.0691643-0.0837237im    -0.150135+0.022617im     0.0265836-0.0687072im     -0.172915-0.0989187im    -0.0960433-0.013183im     0.0813152+0.106955im     -2.6794e-5+0.153215im        0.128161-0.0235011im    -0.154211+0.0163698im   -0.0368154+0.306255im    -0.0910374-0.149217im\n  0.0158741-0.101253im     -0.0668134-0.0236961im    -0.149554+0.0600363im     0.0330975-0.200526im    -0.00771905+0.0489796im    -0.0865917-0.0325584im    0.106264-0.0985928im     0.0308172+0.0426452im     0.161311+0.183377im      -0.233454-0.0258494im       0.156579+0.132711im    -0.0740607-0.229122im     -0.0790409-0.0681458im    0.162255+0.203331im       0.203934-0.14036im      -0.0792684+0.0408064im      0.233506-0.0565046im      0.124302+0.0133958im      0.101837+0.224181im     -0.276138+0.0421033im    0.000606648-0.0640343im    -0.0952635-0.0497257im   -0.0117552+0.198562im      0.103092+0.0345459im       0.19102+0.0497696im     -0.042614+0.193349im     -0.122639+0.047831im       0.106398+0.0418831im    -0.00601375+0.278117im     0.0703924-0.0950587im     0.137063-0.0859971im   -0.0157994-0.119394im\n  0.0681306+0.164834im       0.131241+0.130588im     -0.193428-0.0930064im      -0.10456+0.00412373im    -0.147573-0.0385091im     0.0129466-0.0498715im   -0.178528-0.051738im       0.204147-0.109316im    -0.0376225+0.064844im      -0.114218+0.142234im       -0.116391+0.10554im     0.00409837-0.174194im      0.0521361+0.040682im    -0.128202-0.199424im       0.135784+0.0454446im      0.174284-0.0389943im     0.0355497+0.187859im      -0.121905-0.0267323im      0.197891+0.00355148im   0.0825517-0.107225im        -0.16961-0.0528139im     -0.105792-0.0715412im    0.0201134+0.227918im      0.109511+0.255619im      -0.154383-0.0438718im      0.278772-0.195497im     0.0085697-0.111177im      0.0783741+0.0980024im      0.0317674+0.131137im     -0.229406+0.0201948im     0.111014-0.0215277im    -0.121562+0.00630424im\n  0.0999912-0.0229496im     0.0777847+0.0329162im   -0.0208412+0.0176006im     0.0810895+0.00783254im     0.143777-0.0582295im    -0.0225647-0.145618im    -0.307011-0.0484562im     -0.082737-0.0456562im     0.043983-0.0806714im     0.0209194-0.00769999im    0.00185479+0.0839811im   -0.0538663-0.165059im      -0.131341-0.136214im      -0.2387+0.0945238im    -0.0948512-0.0655716im    -0.0869389-0.0868957im     -0.178794-0.0509129im     -0.308051+0.198666im       0.288309-0.0320424im    -0.107596-0.13064im         0.267969+0.0598161im     -0.173057+0.0723685im   -0.0484671-0.120297im     -0.111922-0.00226227im   0.00204376-0.0550704im      0.181646+0.211441im    -0.0331299+0.148673im      0.0978513+0.142175im      -0.0829793-0.0460483im      0.10123-0.210245im     -0.135719+0.0701427im    0.0713308+0.0115211im\n  -0.186182+0.0312375im    -0.0729701+0.0280081im    -0.282532+0.0278929im     0.0136934+0.137073im     -0.0333372-0.133073im       0.053853+0.136534im   -0.0320077-0.077943im     -0.0504476-0.227043im     -0.264751-0.215313im     -0.0153957+0.145318im       0.0416642-0.105943im      0.154027+0.00167108im    0.0581848-0.0996268im    0.152124+0.235767im      -0.033297-0.0474722im    -0.0131614-0.0199345im     -0.206905+0.147704im     -0.0635329+0.0104428im    -0.0682154-0.0152116im    0.0121859+0.000217551im    -0.158381-0.0680771im     -0.207584-0.0616019im    -0.166822-0.0561181im   -0.0140878-0.121037im       0.131325+0.178079im     -0.0884021-0.00397915im    0.183737+0.0463425im      0.128186+0.193817im        0.226502+0.224939im     0.0657004+0.0402213im   -0.0240326-0.14038im       0.107891+0.0629514im\n  -0.264943+0.0669519im      0.041597+0.0912875im      0.10403-0.259642im     -0.0487136+0.160269im       0.142597+0.258114im        0.18603-0.154157im    -0.169745+0.0304483im   -0.00450546-0.0324591im     0.142835+0.188644im     0.00433148+0.110729im        0.114756-0.0523736im    -0.305007+0.218346im     -0.0585377-0.0907588im   0.0816143+0.0504191im     0.0595465+0.0478394im     0.0645338-0.024835im       0.100023+0.0673891im     0.0967019+0.06863im     -0.00761755+0.0258412im    0.0568887-0.262913im       0.0433511+0.0795235im    -0.0566999+0.0208499im    -0.266793-0.0431832im    -0.223971-0.0379402im      0.151061-0.0553188im    -0.0515989-0.158093im    0.00381256+0.0817107im    -0.0416464+0.000193619im   -0.0171039+0.0757376im   -0.0536084-0.063352im      0.160936-0.176884im    -0.0566327+0.0546833im\n  -0.141056-0.0867638im    -0.0539829-0.0831056im    -0.272458+0.0369752im     -0.123807-0.0374353im    -0.0902242+0.0701348im      0.141101+0.0781125im    0.336473+0.172419im       0.263765-0.0940709im    -0.133528+0.0333364im    -0.0991218-0.0786164im     0.00450286-0.0871451im    -0.227346+0.196257im     -0.0348227-0.0478068im    -0.17308-0.0707416im    -0.0337654-0.039617im      -0.203305+0.00306895im   -0.0749665+0.0716131im    -0.0948624+0.0817774im      0.112454-0.0288388im    0.0956454-0.119086im       0.0776491+0.0588619im      0.101872+0.185981im     0.0181656+0.00931364im   -0.139283+0.21381im       0.0559684+0.0408039im   -0.00114271+0.29381im      -0.170632-0.0346567im   -0.00544481+0.0629637im       0.131643-0.0196095im   -0.0416329+0.157995im     -0.100745+0.0198212im    -0.136044-0.112191im\n   0.123367-0.130704im     -0.0699495-0.0217754im     0.128166-0.0359876im     0.0858666-0.093817im      -0.161018+0.0317232im     0.0958939-0.155173im     0.284482+0.0280566im     -0.114842-0.0575529im   -0.0460582-0.332171im      0.0067721-0.21463im         0.101706+0.141622im     0.0475383+0.112157im      -0.213937-0.0433496im  -0.0507449-0.0359898im        0.1864+0.0530002im     0.0698712-0.0510135im     0.0991875-0.0769501im     0.0180984-0.137897im       0.106473-0.0946336im   -0.0876322-0.0427164im      -0.327632+0.172636im      -0.109316+0.135578im     -0.117407-0.0264718im    -0.111717-0.0545761im      0.052862-0.0272384im      0.200745-0.146144im       0.11862-0.00183837im  0.000600467+0.208864im        0.024692-0.0620941im    0.0877652-0.15424im     0.00238113-0.033022im     -0.217371+0.0111054im\n   -0.11242+0.0928317im      -0.16146-0.0254579im    0.0586019-0.00525655im    0.0733538-0.105615im     -0.0707055-0.0536842im    -0.0107424+0.165022im     0.194036-0.130247im     -0.0375855+0.153392im     0.0213104-0.0134765im        0.1619+0.0569013im     -0.0845875-0.239753im   -0.00991294-0.18974im      -0.0545443+0.0212151im  -0.0260186-0.100878im       0.166295-0.14848im        0.097795+0.0491136im     0.0845557-0.0158898im      0.132764+0.10219im        0.236304-0.103029im    -0.0097415-0.15851im         0.203773-0.258745im      -0.224828+0.0706464im    -0.232011-0.183698im     0.0316087-0.0798124im     -0.254983-0.0708818im     -0.130666-0.0810612im      -0.1385-0.113225im        0.11877+0.0486639im     -0.0068705-0.0285658im    0.0691589+0.142007im     -0.038807-0.0316216im     -0.16671+0.161545im\n -0.0731381+0.0496262im      0.244163+0.113481im    -0.0731528+0.0763237im       0.12619+0.115982im     -0.0515901+0.0158309im     -0.164108-0.0679372im   0.0985647-0.00531508im  -0.00831079-0.0338326im   -0.0857612-0.139139im      0.0209717+0.271949im        0.139521-0.0499378im    -0.117664-0.187746im     -0.0773684+0.0444103im  -0.0439999+0.0732811im      0.107647-0.0929198im     0.0355782-0.0535646im    -0.0270343+0.00456577im     0.376586-0.153946im        0.25345+0.164878im      0.100947-0.041792im      -0.0964132+0.0357942im      0.237042+0.0668582im   -0.0456243-0.0789825im   -0.0731165+0.0567011im     0.0238173+0.0883543im   -0.00616095+0.0317957im   -0.0375316+0.0887175im     -0.167704+0.121837im      -0.0599548-0.196576im    -0.0562838+0.0227475im    0.0262847+0.254017im       0.29933+0.0423209im\n  0.0678124-0.155426im       0.184891-0.229343im    -0.0825549+0.107179im       0.135557-0.0777316im    -0.0167911+0.00977455im    0.0830977-0.0171517im    0.143377-0.116852im       0.112566+0.00497287im   0.0105711+0.263447im     -0.0919721+0.150706im       -0.174212-0.138828im    -0.0149681+0.263949im      -0.172347-0.120227im    0.0152804-0.0842615im    -0.0292557+0.0610606im     0.0232015-0.10719im      -0.0534849-0.178157im       0.102092+0.030667im      0.0362652+0.0769155im    0.0878102+0.124944im       0.0143851+0.0520306im      -0.33109-0.0775935im     -0.05912-0.0606181im    0.0372813+0.0712671im     -0.104811+0.307272im      0.0893177-0.0764368im     0.146409-0.0804989im    -0.0130429-0.139153im       -0.102238+0.0117849im   -0.0702965-0.240529im     -0.107466+0.0063503im     0.161167+0.112323im\n  0.0566145-0.110798im       0.183449-0.211492im      0.127649-0.0969362im     0.0209552+0.116417im      0.0496967-0.0886535im     -0.222081+0.0778632im   0.0949508-0.0593813im     0.0852645-0.245159im    -0.0890384+0.0638992im   -0.00899523-0.00355918im    -0.0643328-0.0807899im    0.0270642-0.134331im       0.190208-0.197976im    -0.156031-0.060562im        0.12538+0.00929033im     0.219424+0.0785393im     0.0836721+0.0644969im      0.052923-0.0508959im     -0.105319-0.128153im    -0.0293102+0.118463im        0.285544+0.0711774im     0.0204584+0.152994im     -0.225758+0.291587im    -0.0415593-0.222776im      0.0771211-0.00286628im    0.0905959+0.098384im     0.0393446+0.140803im      -0.183704-0.0413345im       0.214919-0.0205389im   -0.0465157-0.0783601im    0.0213406-0.00717292im   -0.113288-0.0104063im\n  -0.152974+0.186424im     -0.0239474+0.0526804im   -0.0574167+0.0836809im    -0.0830706+0.0625986im      0.107973-0.0124867im    -0.0978981+0.0106551im   0.0125298+0.0461923im     -0.130349-0.0505511im   -0.0157191-0.0233571im    -0.0948197-0.299911im      -0.0293556-0.064073im     -0.284576+0.162599im      0.0632806+0.16515im     -0.221036-0.0837461im      0.160872-0.141226im      0.0970354+0.0783866im      0.106063+0.00035952im    -0.175753+0.0725205im      0.117037+0.163409im    -0.0139648+0.113518im      -0.0277857-0.0941684im    -0.0921413-0.121612im     -0.061745+0.0560437im     0.115451-0.186104im       0.234117+0.0320114im    -0.0435651-0.0879888im     0.235748-0.192265im     -0.0512221-0.0504442im     -0.0528918+0.0578752im    0.0392911-0.0132579im    -0.125046+0.365308im      0.062234+0.0254476im\n   0.096745-0.200921im       0.133051-0.117437im     0.0405178+0.00801321im   -0.0831268+0.0834823im     -0.352994-0.194742im       0.301176-0.125472im   -0.0306715+0.0396591im     -0.030554+0.144809im     0.0294155+0.0296913im     0.0994879+0.120561im      -0.0516114+0.0136965im   0.00272366+0.00166729im     -0.05671+0.0793109im   -0.122955-0.00992413im    0.0249437-0.116255im      -0.144473-0.0758547im     -0.134178-0.0412926im    -0.0599177-0.0492971im     0.0284027+0.148263im    -0.0863246+0.0737617im      0.0764579-0.0435597im      0.098262-0.173851im     -0.222688+0.0375462im     0.078744+0.119521im       0.156611-0.271433im      -0.166468-0.0525266im     0.103079+0.153863im     -0.0543878-0.116197im        0.192916+0.107839im     0.0902523+0.0600536im     0.122157+0.150313im     -0.091481+0.220984im\n  -0.077906+0.124299im      -0.156318-0.0028387im     0.312979-0.0372907im     0.0637583+0.182443im      0.0763547+0.117688im       0.110331+0.231775im    0.0066136+0.112329im     -0.0142512+0.163767im     -0.108777-0.130954im     -0.0223019+0.160697im     -0.00134079+0.0591582im   -0.0434502-0.0821898im    -0.0941573-0.101431im    -0.238986-0.0123373im     0.0701857+0.162851im      -0.157097+0.100867im      -0.019152-0.302181im        0.15265+0.016254im     -0.0266952-0.0354127im    0.0371405-0.128883im       0.0469493+0.135783im       0.042009-0.102297im     0.0117767+0.273282im      0.162612+0.113468im      -0.055602+0.0413556im      0.105252+0.0587096im    0.0905449-0.121371im       0.117857+0.0292362im       0.156253+0.26629im        0.08011-0.0213008im    -0.114603+0.0226404im     0.160637-0.0324704im\n -0.0508528+0.00903192im    -0.154148+0.136247im     0.0900235+0.286659im     -0.0962286-0.238891im      0.0783245-0.153389im    0.000708421-0.0333977im   -0.068004+0.105283im       0.161842+0.014257im    -0.0211124+0.212096im      -0.166088-0.17463im       -0.0698255-0.0750978im    0.0217939-0.03614im        0.145085-0.0784717im   0.0613056+0.216im          0.172999-0.00715491im    -0.069594-0.126788im     -0.0983884-0.124921im    -0.00699908-0.0526241im       0.15612-0.0104444im   0.00336942-0.148634im       0.0152382+0.0987273im     0.0591486-0.00565032im  -0.0782687+0.0461069im   -0.0832097+0.0186941im     -0.203634-0.0533858im     0.0220688-0.296878im      0.199247+0.167905im      -0.256718+0.000367209im     0.183687-0.0837166im     0.115195+0.104716im    -0.0914281-0.0943148im      0.12698-0.1112im\n -0.0141742+0.439177im      0.0894908-0.11946im     -0.0391954-0.0787508im       -0.3347-0.0161579im     -0.230426-0.0960172im     0.0231645-0.116036im      0.07728-0.0375008im     -0.147052+0.0222699im   -0.0560933+0.102574im      0.0498322+0.0186011im     -0.0154142-0.0765822im   -0.0126826-0.116889im      -0.201707+0.167389im   -0.0744787+0.117974im      0.0615967+0.087123im      -0.160961-0.0332924im     0.0415644-0.100714im      0.0105533+0.0515731im    -0.0892216-0.0463114im    -0.145557+0.0896976im      0.0426327+0.149008im     -0.0662158-0.0121521im    0.0866743-0.0990643im    -0.131224-0.224507im      -0.098643+0.0826157im      0.176305+0.180356im     0.0686635-0.0333976im     -0.260107+0.010611im      -0.0575943+0.0979522im   -0.0976161+0.122296im     0.0817241-0.170966im     0.0349021+0.00621411im\n  -0.212542+0.154731im       0.212584-0.0532336im    -0.141359+0.191341im      0.0968264+0.00140898im   -0.0317627+0.223898im      0.0713588+0.0642867im   0.0139962+0.0113016im     0.0440487+0.11608im     0.00431306-0.095682im      0.0288257+0.0229116im       -0.12031+0.137343im     0.0217792-0.0874929im      0.181777+0.207301im   0.00423062+0.0213503im      0.173685+0.12568im        0.114046-0.210089im      -0.290508-0.205546im       0.123591+0.194999im     -0.0600528-0.0173771im    0.0145397+0.0131344im      0.0505046-0.0322223im    -0.0347125+0.0309711im     0.091193+0.108484im    0.00499022-0.028282im       0.103917-0.00319156im    -0.121174+0.0293117im      0.14858+0.157119im      0.0463367+0.0230705im      -0.137814-0.122893im     0.0831296-0.133989im     0.0294087-0.0661881im    -0.368828-0.149202im\n  0.0378688+0.00497261im     0.155489+0.0868703im      0.13676-0.275805im       0.126236-0.189221im      -0.134186+0.0410698im     -0.110511-0.106887im     0.112223-0.0459369im     -0.100267-0.173231im    -0.0220892+0.0705253im    -0.0361927+0.100638im       0.0838613-0.0437799im     0.037135+0.0939364im      0.173589+0.176641im    0.0998173-0.0730496im    -0.0741554+0.0615725im     -0.157342-0.201304im      0.0495918-0.0264646im    -0.0678649+0.0175642im     0.0834286+0.119138im      0.199899-0.14056im        0.0969747-0.18095im       0.0470664+0.272905im      0.147948+0.0538573im   0.00785496-0.0861309im    -0.0376212+0.0421525im      0.123472+0.00803648im     0.18921+0.0389287im      0.104123-0.0971182im      0.0335623+0.248048im      0.371037+0.116638im    -0.0320959+0.0590728im    0.0183934-0.00471533im\n  0.0953424+0.0880595im     -0.136353+0.190392im    -0.0436608+0.149929im     -0.0396881-0.228037im     0.00264655+0.0198281im     -0.108126-0.0369574im    0.231894+0.143554im    -0.00807552+0.120419im      0.127048-0.0202068im    -0.0547795+0.140075im       0.0474089+0.10394im     -0.0228936-0.0423587im     0.0339869+0.168362im    -0.186427-0.104354im      -0.152524+0.151337im      0.0329088-0.151203im       0.115663+0.156047im     0.00293411-0.137668im       -0.10545-0.176887im      0.115179-0.0761442im       0.248937-0.0675648im    -0.0935917-0.287016im     0.0274763-0.00329924im   -0.182313-0.0539229im      0.203516+0.121007im     -0.0406699-0.0140114im    0.0333201+0.115829im      0.0840955+0.0890907im       0.231902-0.0501931im   -0.0511341-0.195862im     0.0740171-0.0308654im    0.0992854+0.18545im\n  0.0497634-0.0450581im      0.114457-0.139654im      0.116252-0.021453im      0.0374326-0.142379im       0.337129+0.0247947im     0.0818318-0.314955im    0.0822163-0.0231588im     -0.175162+0.105113im     -0.183562+0.0679668im     -0.115842+0.147992im      -0.0504704+0.0504027im   -0.0896108-0.0633545im   -0.00606125-0.0136485im   0.0798656-0.205112im       0.158003+0.0194054im    -0.0870498+0.0583292im    -0.0644425-0.114154im      -0.171303+0.202956im     -0.0489321-0.164508im       0.11467+0.120789im       -0.226481-0.272616im       0.039689-0.105057im    -0.0612769+0.0577888im    0.0177239-0.0566686im     0.0314349+0.0478218im    -0.0554777+0.0313397im    -0.132062+0.118555im     -0.0566323+0.248618im        0.124199-0.0491273im   -0.0925748+0.228437im   -0.00642753-0.0109117im    0.0695666-0.0330096im\n  -0.205445-0.0470272im     0.0906817+0.00404764im     0.11432+0.0139146im     0.0821039+0.101548im      0.0133196+0.063973im    -0.00240037+0.136868im    -0.163323+0.173272im       0.294711+0.249108im    -0.0695301+0.223905im     -0.0399504+0.106994im      -0.0177005+0.0466905im     0.264022+0.140244im     -0.0160322+0.0523669im   -0.132073-0.0657895im     0.0717939-0.0261361im     -0.104855-0.0318412im      0.199162+0.0524729im     -0.106661-0.140227im      0.0758648+0.0751964im     -0.30133+0.144361im      -0.0521527-0.128306im      0.0840816+0.156607im     0.0615261-0.172321im    -0.0413822-0.219524im      0.0541358+0.116241im       0.128571+0.016609im     0.0884421+0.0262756im      0.137461+0.258658im       0.0553209-0.0989333im   0.00369313+0.0582322im    0.0294556-0.00874199im  -0.0319735+0.0972774im\n -0.0734102+0.0369632im     -0.151509-0.0528272im    -0.155106-0.0129282im     0.0617888+0.330512im      0.0342296-0.170103im     -0.0584517-0.102853im     0.108408-0.132993im       0.180806+0.0313648im    -0.198127+0.0483801im     -0.080646+0.00279592im   -0.00929936+0.195805im     -0.103326-0.126721im      -0.075956-0.119176im     0.087527-0.209514im     -0.0554779+0.228394im      -0.130366+0.0238893im     0.0450502-0.0498613im     0.0126401-0.112863im       0.147642-0.262316im     -0.102461+0.0436035im      0.0667772-0.0908449im     -0.120921+0.0868976im     0.217597-0.0315705im     -0.10797+0.000485835im    0.170546-0.160518im      -0.130896-0.229338im     0.0327244+0.0648645im     -0.108712-0.149026im       -0.183275+0.0656467im     0.196164+0.0248897im    0.0538023+0.0196662im    0.0754187+0.0153052im\n   0.176416+0.218492im      -0.266626-0.121603im    -0.0776485-0.0550879im    -0.0751452-0.0176478im    -0.0702738+0.0942778im    -0.0426484-0.212393im    -0.191914+0.0386285im      0.159524+0.0688341im   -0.0954305-0.198694im       -0.14799+0.18826im       0.00475933-0.298548im     0.0154342+0.0364134im     -0.102842-0.193861im   -0.0679232+0.0870529im     0.0883407+0.0223888im     -0.148306-0.183524im       0.200054+0.027205im     -0.0364595-0.0747519im    -0.0880598+0.0390918im     0.204964+0.116155im       0.0428479-0.0940403im     0.0585156+0.0456703im    -0.113481-0.0209746im     0.229458-0.0750834im     0.0305681+0.028872im     -0.0750534-0.0411527im   -0.0149318+0.0891194im     0.0647503-0.0771692im     -0.0601098-0.173172im     0.0822131-0.136709im     0.0206065+0.082979im      -0.14803-0.232499im\n  -0.150029+0.0081473im      0.252592+0.0881807im     0.108966+0.0344941im    0.00689988+0.0249031im     -0.116552-0.116471im      -0.227101-0.0776552im   -0.138535-0.117197im      0.0300563-0.101091im     -0.105359+0.0337621im     0.0539462-0.263833im    -0.000408635+0.118916im    0.00609829+0.121728im      -0.128514-0.0527009im   -0.103213+0.0785021im    -0.0454442+0.0925485im     -0.249967-0.110303im      -0.014736-0.0428077im      0.220241-0.07345im       0.0888015+0.0233175im      0.18102+0.112439im       0.0166546-0.161075im      0.0402489-0.285017im    -0.0640372+0.03374im     -0.0456874-0.0957037im     0.0426308-0.0170119im    -0.0240166-0.0920912im    -0.334803-0.149194im       0.122261+0.00811555im      0.115747+0.00823939im  0.00450822-0.034051im     -0.222246-0.197922im      -0.16011-0.0586056im\n   0.091387-0.13556im       -0.157812+0.028357im      0.127555-0.231335im      0.0948099-0.0126307im     0.0230827+0.0961525im    -0.0242148+0.137791im     -0.14214-0.0331484im    -0.0430711-0.149541im     -0.102269-0.0682433im     -0.154262+0.0707552im      -0.205479+0.0180093im    0.0305063+0.0366368im    -0.0262488+0.225945im   -0.0586028-0.0325171im      0.233593-0.0744423im     0.0032342-0.193363im      0.0615909+0.19146im         0.16356+0.152595im       0.199817-0.154507im     -0.131409+0.118273im      -0.0461013+0.0519184im    -0.0269003-0.234017im     0.0420043-0.163309im    -0.0847099+0.173676im       0.143784+0.00980027im   -0.0178548+0.20312im       0.111758-0.0117339im    -0.0988292-0.266321im       0.0559749-0.125257im     0.0494571+0.120017im    -0.0607108-0.184666im     0.0513685-0.088819im\n  0.0703099-0.10314im        0.111729+0.0211514im    0.0180259+0.0208846im    0.00186621-0.131259im      0.0227201+0.046096im       0.122606+0.108647im    -0.063176-0.0610609im      0.250461+0.0319625im    0.0842785-0.0540099im       0.12429+0.0264898im      0.0438829-0.392214im     0.0295933-0.0408785im     -0.107832+0.0867301im   0.0493415+0.074185im      0.0466466+0.138886im    -0.00883082-0.0701092im     0.0608686+0.212577im      0.0280139+0.216004im     -0.0445325-0.139044im    -0.0155996+0.0237035im     -0.0840836+0.0868517im   -0.00777688-0.0840936im      0.19467+0.23602im     -0.0209694-0.0941947im      0.179618-0.170049im      0.0100937-0.0846545im    -0.152536-0.0624461im     -0.223706+0.255529im       -0.141663+0.127636im      0.198879-0.0426364im    -0.216329+0.0972557im    0.0567229+0.152477im\n  0.0101144-0.0341467im   -0.00714393-0.012707im     -0.120325-0.0502963im      0.176046+0.119072im      -0.182305-0.129066im      0.0318544-0.0806016im  -0.0688827-0.160633im       0.196176+0.0977855im     0.171552-0.0149773im     -0.053702-0.115023im       0.0622793+0.0821875im   -0.0146164+0.0123681im     0.0972735-0.0100502im    0.300225+0.00680621im     0.134665-0.0217523im    -0.0372749-0.127517im       0.141603-0.182997im     -0.0173441+0.0987218im    -0.0546507-0.304988im      0.101692-0.284727im       0.0369223+0.0893174im      0.157279-0.13898im     -0.0539901-0.0823364im     0.101937-0.205341im      0.0603576+0.0159068im      0.109501+0.214548im      0.143104-0.10381im       0.0828848-0.00491741im      0.087812-0.049896im     -0.253346+0.0833101im    -0.133129+0.189488im     0.0345107+0.0686569im\n -0.0702253+0.0142031im      0.023774-0.112808im      0.151406+0.00816822im    0.0451415+0.176104im       0.138338-0.0984706im     -0.118498-0.0672971im  -0.0337677+0.115026im      0.0896331-0.0575953im   -0.0299062+0.0862254im    -0.0637563-0.218074im       0.0469251-0.247484im     0.0117928-0.266988im      -0.106938+0.191209im    0.0338945+0.000490458im   -0.194172-0.119693im      0.0411691-0.185537im    -0.00146272-0.168238im    -0.00998819-0.00995786im    -0.159958-0.0142694im     0.032646-0.182858im       -0.123469-0.104696im      -0.100385+0.0613904im    0.0334513-0.133264im      0.161621+0.308674im       0.191902+0.111627im      0.0892182+0.0510413im   -0.0198902-0.161073im      -0.152978+0.0471788im       0.185535-0.0744118im     0.108587-0.111887im      0.212136-0.0461106im    -0.122675+0.113558im\n  0.0343419-0.024495im      -0.167074-0.167088im      0.065672+0.0361722im   0.000554205-0.143981im     -0.0905499-0.238797im       0.161833-0.116215im    -0.253408-0.0201632im     0.0428724-0.162818im     -0.231325-0.0452871im     0.0535979+0.143515im        0.222826+0.0196501im   -0.0639077+0.0961129im      0.282877+0.199561im   0.00712334+0.0110548im     -0.122179+0.177027im      0.0948611+0.222586im       0.201953-0.215399im      0.0818306+0.064228im        0.16985+0.107121im     -0.116248-0.0637443im      0.0775629-0.019217im      0.0044288-0.0385418im    0.0301904+0.108643im     -0.114498+0.0729944im     0.0152049+0.219007im      -0.145398+0.0449116im   -0.0201748-0.111719im     -0.0624904+0.116828im        -0.06352-0.13739im     -0.0250543-0.0697061im   -0.0493693-0.0293475im    -0.125314+0.0823881im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"and then generate the state ψ","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"psi = P[:, 3]","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32-element Vector{ComplexF64}:\n  -0.018917482464429702 + 0.11072973523018799im\n   0.047577367433381076 + 0.08543688998825055im\n    -0.1979531057725185 - 0.16775575052047065im\n    0.22744343694864375 + 0.24600272348269217im\n    0.03918860444330624 + 0.09211348079513249im\n    0.00775588933607619 + 0.04138227104779867im\n   -0.10295571952976491 - 0.12355307940787445im\n   0.019434018600994606 - 0.04605197403605671im\n    0.16715135271485354 - 0.05560234915173444im\n    0.08084531003567492 + 0.08670125626584278im\n   -0.05261218504944379 + 0.06604188127272483im\n   -0.10414681763237203 + 0.3396327646103428im\n   0.008130186191984037 - 0.001749129933842207im\n   -0.00661915992251088 + 0.07952743151905363im\n     0.3719676362503366 + 0.0im\n     0.1851386611628347 - 0.06023569519730577im\n   0.021505150423118246 - 0.1291889904881695im\n    0.12851622883473326 + 0.15422436326821756im\n    0.03522450369293095 - 0.15347305575954914im\n  -0.034637434019354346 + 0.12422002987298124im\n   -0.09477030503830634 - 0.16963791599209405im\n    0.28624594552093185 + 0.012009010460173965im\n   -0.13385658103936296 - 0.01634466588007616im\n   -0.10311265196296586 + 0.04030514460632738im\n   -0.07592726144970373 - 0.22410802490568968im\n   0.007238046186862982 - 0.025089532748951426im\n   -0.01204402606133519 - 0.1424108237846094im\n    0.13891196744075612 - 0.09068812324894893im\n   -0.13541429343774072 + 0.03798597594239353im\n -0.0074147500533847865 + 0.10046424889387631im\n  -0.010009905760552728 - 0.10859017952922836im\n   0.013158996338552675 + 0.03466596882945685im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In the phase estimation process, we will feed the state to circuit and measure the first n qubits processed by iQFT.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = join(ArrayReg(psi), zero_state(N))\nr |> PE(N, M, U)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 8/8\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since our phase can be represented by 3 qubits precisely, we only need to measure once","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"results = measure(r, 1:N; nshots=1)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"1-element Vector{DitStr{2, 3, Int64}}:\n 011 ₍₂₎","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Recall that our QFT's bit numbering is reversed, let's reverse it back","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using BitBasis\nestimated_phase = bfloat(results[]; nbits=N)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"0.75","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"the phase is exactly 0.75!","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/bitbasis.html#BitBasis","page":"BitBasis","title":"BitBasis","text":"","category":"section"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Types and operations for basis represented by bits in linear algebra.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"For more details please ref to BitBasis.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Modules = [BitBasis]\nOrder = [:macro, :function, :type, :module]","category":"page"},{"location":"man/bitbasis.html#BitBasis.@bit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@bit_str","text":"@bit_str -> BitStr64\n\nConstruct a bit string. such as bit\"0000\". The bit strings also supports string join. Just use it like normal strings.\n\nExample\n\njulia> bit\"10001\"\n10001 ₍₂₎\n\njulia> bit\"100_111_101\"\n100111101 ₍₂₎\n\njulia> join(bit\"1001\", bit\"11\", bit\"1110\")\n1001111110 ₍₂₎\n\njulia> onehot(bit\"1001\")\n16-element Vector{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@dit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@dit_str","text":"@dit_str -> DitStr64\n\nConstruct a dit string. such as dit\"0201;3\". The dit strings also supports string join. Just use it like normal strings.\n\nExample\n\njulia> dit\"10201;3\"\n10201 ₍₃₎\n\njulia> dit\"100_121_121;3\"\n100121121 ₍₃₎\n\njulia> join(dit\"1021;3\", dit\"11;3\", dit\"1210;3\")\n1021111210 ₍₃₎\n\njulia> onehot(dit\"1021;3\")\n81-element Vector{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n     ⋮\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@lbit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@lbit_str","text":"@lbit_str -> LongBitStr\n\nLong bit string version of @bit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@ldit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@ldit_str","text":"@ldit_str -> LongDitStr\n\nLong dit string version of @dit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.allone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.allone","text":"allone(index::Integer, mask::Integer) -> Bool\n\nReturn true if all masked position of index is 1.\n\nExample\n\ntrue if all masked positions are 1.\n\njulia> allone(0b1011, 0b1011)\ntrue\n\njulia> allone(0b1011, 0b1001)\ntrue\n\njulia> allone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\n\njulia> anyone(0b1011, 0b1100)\ntrue\n\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.baddrs-Tuple{Integer}","page":"BitBasis","title":"BitBasis.baddrs","text":"baddrs(b::Integer) -> Vector\n\nget the locations of nonzeros bits, i.e. the inverse operation of bmask.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.basis-Tuple{DitStr}","page":"BitBasis","title":"BitBasis.basis","text":"basis(ditstr) -> UnitRange{DitStr{D,N,T}}\nbasis(DitStr{D,N,T}) -> UnitRange{DitStr{D,N,T}}\n\nReturns the UnitRange for basis in Hilbert Space of qudits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bdistance-Union{Tuple{Ti}, Tuple{Ti, Ti}} where Ti<:Integer","page":"BitBasis","title":"BitBasis.bdistance","text":"bdistance(i::Integer, j::Integer) -> Int\n\nReturn number of different bits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with current bit numbering. See also bfloat_r.\n\nRef: wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with reversed bit numbering. See also bfloat.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{BitStr}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b; nbits=nothing) -> Int\n\ninteger view, with LSB 0 bit numbering. See also wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b; nbits::Int) -> Integer\n\ninteger read in inverse order.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_length-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bit_length","text":"bit_length(x::Integer) -> Int\n\nReturn the number of bits required to represent input integer x.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bitarray-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T<:Number","page":"BitBasis","title":"BitBasis.bitarray","text":"bitarray(v::Vector, [nbits::Int]) -> BitArray\nbitarray(v::Int, nbits::Int) -> BitArray\nbitarray(nbits::Int) -> Function\n\nConstruct BitArray from an integer vector, if nbits not supplied, it is 64. If an integer is supplied, it returns a function mapping a Vector/Int to bitarray.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bmask","page":"BitBasis","title":"BitBasis.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(b::Integer[, masks::Vector{Integer}]; nbits) -> Integer\n\nReturn left-right reflected integer.\n\nExample\n\nReflect the order of bits.\n\njulia> breflect(0b1011; nbits=4) == 0b1101\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(bit_str[, masks])\n\nReturn left-right reflected bit string.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bsizeof-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"BitBasis","title":"BitBasis.bsizeof","text":"bsizeof(::Type)\n\nReturns the size of given type in number of binary digits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.btruncate-Tuple{Integer, Any}","page":"BitBasis","title":"BitBasis.btruncate","text":"btruncate(b, n)\n\nTruncate bits b to given length n.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controldo-Union{Tuple{S}, Tuple{Union{Function, Type}, BitBasis.IterControl{S}}} where S","page":"BitBasis","title":"BitBasis.controldo","text":"controldo(f, itr::IterControl)\n\nExecute f while iterating itr.\n\nnote: Note\nthis is faster but equivalent than using itr as an iterator. See also itercontrol.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controller-Tuple{Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s4\"}} where var\"#s4\", Vector{Int64}}, Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s4\"}} where var\"#s4\", Vector{Int64}}}","page":"BitBasis","title":"BitBasis.controller","text":"controller(cbits, cvals) -> Function\n\nReturn a function that checks whether a basis at cbits takes specific value cvals.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.flip-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.flip","text":"flip(index::Integer, mask::Integer) -> Integer\n\nReturn an Integer with bits at masked position flipped.\n\nExample\n\njulia> flip(0b1011, 0b1011) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.group_shift!-Tuple{Int64, AbstractVector{Int64}}","page":"BitBasis","title":"BitBasis.group_shift!","text":"group_shift!(nbits, positions)\n\nShift bits on positions together.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.hypercubic-Tuple{Array}","page":"BitBasis","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.indices_with-Tuple{Int64, Vector{Int64}, Vector{Int64}}","page":"BitBasis","title":"BitBasis.indices_with","text":"indices_with(n::Int, locs::Vector{Int}, vals::Vector{Int}) -> Vector{Int}\n\nReturn indices with specific positions locs with value vals in a hilbert space of n qubits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.invorder-Tuple{AbstractVecOrMat}","page":"BitBasis","title":"BitBasis.invorder","text":"invorder(X::AbstractVecOrMat)\n\nInverse the order of given vector/matrix X.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2dim1-Tuple{Any}","page":"BitBasis","title":"BitBasis.log2dim1","text":"log2dim1(X)\n\nReturns the log2 of the first dimension's size.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2i","page":"BitBasis","title":"BitBasis.log2i","text":"log2i(x::Integer) -> Integer\n\nReturn log2(x), this integer version of log2 is fast but only valid for number equal to 2^n.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.neg","text":"neg(b::BitStr) -> BitStr\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.neg","text":"neg(index::Integer, nbits::Int) -> Integer\n\nReturn an integer with all bits flipped (with total number of bit nbits).\n\nExample\n\njulia> neg(0b1111, 4) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\njulia> neg(0b0111, 4) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.next_reordered_basis-Union{Tuple{T}, Tuple{N}, Tuple{T, Tuple{Vararg{T, N}}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.next_reordered_basis","text":"next_reordered_basis(basis, takers, differ)\n\nReturns the next reordered basis accroding to current basis.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{T1}, Tuple{N}, Tuple{T}, Tuple{D}, Tuple{Type{T}, DitStr{D, N, T1}}} where {D, T, N, T1}","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], dit_str[; nbatch])\n\nCreate an onehot vector in type Vector{T} or a batch of onehot vector in type Matrix{T}, where index x + 1 is one. One can specify the value of the nonzero entry by inputing a pair.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.packbits-Tuple{AbstractVector}","page":"BitBasis","title":"BitBasis.packbits","text":"packbits(arr::AbstractArray) -> AbstractArray\n\npack bits to integers, usually take a BitArray as input.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readat-Union{Tuple{T}, Tuple{N}, Tuple{D}, Tuple{DitStr{D, N, T}, Vararg{Integer}}} where {D, N, T}","page":"BitBasis","title":"BitBasis.readat","text":"readat(x, loc...) -> Integer\n\nRead the dit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readbit-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.readbit","text":"readbit(x, loc...)\n\nRead the bit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.reorder","page":"BitBasis","title":"BitBasis.reorder","text":"reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\ntip: Tip\nAlthough orders can be any iterable, Tuple is preferred inorder to gain as much performance as possible. But the conversion won't take much anyway.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.setbit-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.setbit","text":"setbit(index::Integer, mask::Integer) -> Integer\n\nset the bit at masked position to 1.\n\nExample\n\njulia> setbit(0b1011, 0b1100) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\njulia> setbit(0b1011, 0b0100) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\njulia> setbit(0b1011, 0b0000) |> bit(len=4)\nERROR: MethodError: no method matching bit(; len=4)\nClosest candidates are:\n  bit(!Matched::Any; len) at ~/.julia/juliaup/julia-1.7.2+0~x64/share/julia/base/deprecated.jl:70\nStacktrace:\n [1] top-level scope\n   @ none:1\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.swapbits-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.swapbits","text":"swapbits(n::Integer, mask_ij::Integer) -> Integer\nswapbits(n::Integer, i::Int, j::Int) -> Integer\n\nReturn an integer with bits at i and j flipped.\n\nExample\n\njulia> swapbits(0b1011, 0b1100) == 0b0111\ntrue\n\ntip: Tip\nlocations i and j specified by mask could be faster when bmask is not straight forward but known by constant.\n\nwarning: Warning\nmask_ij should only contain two 1, swapbits will not check it, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_reorder","page":"BitBasis","title":"BitBasis.unsafe_reorder","text":"unsafe_reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\nwarning: Warning\nunsafe_reorder won't check whether the length of orders and the size of first dimension of X match, use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{N}, Tuple{UnitRange{T}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange, b::NTuple{N}) -> NTuple{N}\n\nReturns result in type Tuple of a .- b. This will not check the length of a and b, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{UnitRange{T}, Vector{T}}} where T","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange{T}, b::Vector{T}) where T\n\nReturns a .- b, fallback version when b is a Vector.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.BitStr","page":"BitBasis","title":"BitBasis.BitStr","text":"BitStr{N,T} <: Integer\n\nThe struct for bit string with fixed length N and storage type T. It is an alias of DitStr{2,N,T}.\n\nBitStr{N,T}(integer)\nBitStr64{N}(integer)\nBitStr64(vector)\nLongBitStr{N}(integer)\nLongBitStr(vector)\n\nReturns a BitStr. When the input is an integer, the bits are read from right to left. When the input is a vector, the bits are read from left to right.\n\nExamples\n\nBitStr supports some basic arithmetic operations. It acts like an integer, but supports some frequently used methods for binary basis.\n\njulia> bit\"0101\" * 2\n1010 ₍₂₎\n\njulia> join([bit\"101\" for i in 1:10])\n\"101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎\"\n\njulia> repeat(bit\"101\", 2)\n101101 ₍₂₎\n\njulia> bit\"1101\"[2]\n0\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.DitStr","page":"BitBasis","title":"BitBasis.DitStr","text":"DitStr{N,T} <: Integer\n\nThe struct for dit string with fixed length N and storage type T, where dit is a extension of dit from binary system to a d-ary system.\n\nDitStr{D,N,T}(integer)\nDitStr{D,N}(integer)\nDitStr{D}(vector)\n\nReturns a DitStr. When the input is an integer, the dits are read from right to left. When the input is a vector, the dits are read from left to right.\n\nExamples\n\njulia> DitStr{3}([1,2,1,1,0])\n01121 ₍₃₎\n\njulia> DitStr{3, 5}(71)\n02122 ₍₃₎\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.IterControl","page":"BitBasis","title":"BitBasis.IterControl","text":"IterControl{S}\nIterControl(n::Int, base::Int, masks, ks) -> IterControl\n\nIterator to iterate through controlled subspace. See also itercontrol.  S is the number of shifts,  n is the size of Hilbert space,  base is the base of counter,  masks and ks are helpers for enumerating over the target Hilbert Space.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis{N, T}\n\nLazy reorderd basis.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis-Union{Tuple{Tuple{T, Vararg{T, N}}}, Tuple{T}, Tuple{N}} where {N, T<:Integer}","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis(orders::NTuple{N, <:Integer})\n\nReturns a lazy set of reordered basis.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Yao","category":"page"},{"location":"index.html#Yao","page":"Home","title":"Yao","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A General Purpose Quantum Computation Simulation Framework","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to Yao, a Flexible, Extensible, Efficient Framework for Quantum Algorithm Design. Yao (幺) is the Chinese character for normalized but not orthogonal.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We aim to provide a powerful tool for researchers, students to study and explore quantum computing in near term future, before quantum computer being used in large-scale.","category":"page"},{"location":"index.html#Quick-Starts","page":"Home","title":"Quick Starts","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"You can learn how to use Yao with some quick examples in this section. There are three badges on the top of each tutorial that allows you to open it in mybinder, preview it in nbviewer or download the tutorial as .zip file, which includes the notebook and the scripts and other related materials.","category":"page"},{"location":"index.html#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you are interesting in polishing or contributing our tutorial, you can just open a PR in our tutorial repo.","category":"page"},{"location":"index.html#Syntax","page":"Home","title":"Syntax","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are written with Literate.","category":"page"},{"location":"index.html#Pluto-Notebooks","page":"Home","title":"Pluto Notebooks","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"There is also a set of Pluto notebooks available in the notebooks folder","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/array_registers.md\",\n    \"man/blocks.md\",\n    \"man/registers.md\",\n    \"man/extending_blocks.md\",\n]\nDepth = 1","category":"page"},{"location":"man/simplification.html#Simplification","page":"Simplification","title":"Simplification","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"The simplification for YaoBlocks is currently implemented in a limited and straightforward fashion, there is only one interface simplify to call.","category":"page"},{"location":"man/simplification.html#APIs","page":"Simplification","title":"APIs","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"Modules = [YaoBlocks.Optimise]\nOrder = [:function, :macro]","category":"page"},{"location":"man/simplification.html#YaoBlocks.Optimise.is_pauli-Tuple","page":"Simplification","title":"YaoBlocks.Optimise.is_pauli","text":"is_pauli(x)\n\nCheck if x is an element of pauli group.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.replace_block-Tuple{Any, AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.replace_block","text":"replace_block(actor, tree::AbstractBlock) -> AbstractBlock\nreplace_block(pair::Pair{Type{ST}, TT}, tree::AbstractBlock) -> AbstractBlock\n\nreplace blocks in a circuit, where actor is a function that given input block, returns the block to replace, or nothing for skip replacing and visit sibling. If pair is provided, then replace original block with type ST with new block (pair.second).\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.simplify-Tuple{AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.simplify","text":"simplify(block[; rules=__default_simplification_rules__])\n\nSimplify a block tree accroding to given rules, default to use __default_simplification_rules__.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.to_basictypes","page":"Simplification","title":"YaoBlocks.Optimise.to_basictypes","text":"to_basictypes(block::AbstractBlock)\n\nconvert gates to basic types\n\n* ChainBlock\n* PutBlock\n* PrimitiveBlock\n\n\n\n\n\n","category":"function"}]
}
